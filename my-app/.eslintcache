[{"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/serviceWorker.js":"1","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/itinerarySlice.js":"2","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/ItineraryBoard.jsx":"3","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/CardList.jsx":"4","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/Dayplans.jsx":"5","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/dayplanSlice.js":"6","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/firebase/Config.js":"7","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/cardSlice.js":"8","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/store.js":"9","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/itineraryBoardLib.js":"10","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Navbar/Navbar.jsx":"11","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/App.jsx":"12","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/index.js":"13","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Home/Home.jsx":"14","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/User/userSlice.js":"15","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/Projects.jsx":"16","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/projectsSlice.js":"17","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/Project.jsx":"18","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/Expenditure/Expenditure.jsx":"19","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/CardBoard.jsx":"20","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/TodoList/TodoList.jsx":"21","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Navbar/component/Title.jsx":"22","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/component/SmallCard.jsx":"23","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/component/LargeCard.jsx":"24","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/User/membersSlice.js":"25","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/lib.js":"26"},{"size":4934,"mtime":1606275674064,"results":"27","hashOfConfig":"28"},{"size":1365,"mtime":1607240114314,"results":"29","hashOfConfig":"28"},{"size":1356,"mtime":1607698650195,"results":"30","hashOfConfig":"28"},{"size":1597,"mtime":1606801325055,"results":"31","hashOfConfig":"28"},{"size":5330,"mtime":1607344678171,"results":"32","hashOfConfig":"28"},{"size":3578,"mtime":1607308456990,"results":"33","hashOfConfig":"28"},{"size":13417,"mtime":1607659587703,"results":"34","hashOfConfig":"28"},{"size":3580,"mtime":1607415911611,"results":"35","hashOfConfig":"28"},{"size":681,"mtime":1607532777624,"results":"36","hashOfConfig":"28"},{"size":2381,"mtime":1606805397461,"results":"37","hashOfConfig":"28"},{"size":5849,"mtime":1607236657542,"results":"38","hashOfConfig":"28"},{"size":2071,"mtime":1607507549107,"results":"39","hashOfConfig":"28"},{"size":621,"mtime":1607507551414,"results":"40","hashOfConfig":"28"},{"size":433,"mtime":1606889043646,"results":"41","hashOfConfig":"28"},{"size":1092,"mtime":1607532713364,"results":"42","hashOfConfig":"28"},{"size":2098,"mtime":1607532329029,"results":"43","hashOfConfig":"28"},{"size":1916,"mtime":1607261062734,"results":"44","hashOfConfig":"28"},{"size":4758,"mtime":1607532606676,"results":"45","hashOfConfig":"28"},{"size":264,"mtime":1606896002777,"results":"46","hashOfConfig":"28"},{"size":2692,"mtime":1607667594680,"results":"47","hashOfConfig":"28"},{"size":255,"mtime":1606903395627,"results":"48","hashOfConfig":"28"},{"size":1389,"mtime":1607360464022,"results":"49","hashOfConfig":"28"},{"size":5447,"mtime":1607431644719,"results":"50","hashOfConfig":"28"},{"size":19446,"mtime":1607669882849,"results":"51","hashOfConfig":"28"},{"size":1728,"mtime":1607532798909,"results":"52","hashOfConfig":"28"},{"size":879,"mtime":1607667336493,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"19e0as4",{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"69"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"69"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"69"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"69"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"69"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"69"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"69"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/serviceWorker.js",[],["125","126"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/itinerarySlice.js",["127","128"],"import { createSlice } from \"@reduxjs/toolkit\"\nimport { getData, getFsData } from \"../../../../firebase/Config\"\n\nexport const itinerarySlice = createSlice({\n  name: \"itinerary\",\n  initialState: {},\n  reducers: {\n    initItinerary: (state, action) => {\n      for (let key in action.payload) {\n        state[key] = action.payload[key]\n      }\n    },\n    deleteDayplan: (state) => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload\n    },\n  },\n})\n\nexport const { initItinerary } = itinerarySlice.actions\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount))\n//   }, 1000)\n// }\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.itinerary.value)`\n// export const selectCount = (state) => state.itinerary.value\n\nexport default itinerarySlice.reducer\n",["129","130"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/ItineraryBoard.jsx",["131","132","133","134","135","136","137"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/CardList.jsx",["138"],"//tools\nimport React from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport { nanoid } from \"nanoid\"\nimport { Draggable, Droppable } from \"react-beautiful-dnd\"\n\n//components and scss\nimport styles from \"../../../../scss/itineraryBoard.module.scss\"\n\n//functions\nimport { addCard } from \"../CardBoard/cardSlice\"\n\nconst CardList = (props) => {\n  //dispatch\n  const dispatch = useDispatch()\n\n  const handleAddCard = (e) => {\n    if (e.target.id === \"cardList\") {\n      let card = {\n        title: \"test\" + nanoid(3),\n        id: nanoid(),\n        status: 0,\n      }\n      dispatch(addCard(card))\n    }\n  }\n\n  return (\n    <Droppable droppableId={\"cardsList\"}>\n      {(provided) => (\n        <div\n          id=\"cardList\"\n          className={styles.cardList}\n          // onClick={handleAddCard}\n          {...provided.droppableProps}\n          ref={provided.innerRef}\n        >\n          {props.cards.map((card, index) => {\n            return (\n              <Draggable key={card.id} draggableId={card.id} index={index}>\n                {(provided) => (\n                  <div\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}\n                    id={card.id}\n                    className={styles.card}\n                  >\n                    <div className={styles.cardTitle}>{card.title}</div>\n                  </div>\n                )}\n              </Draggable>\n            )\n          })}\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  )\n}\n\nexport default CardList\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/Dayplans.jsx",["139"],"//tools\nimport React, { useState } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { nanoid } from \"nanoid\"\nimport { Draggable, Droppable } from \"react-beautiful-dnd\"\n\n//components and scss\nimport styles from \"../../../../scss/itineraryBoard.module.scss\"\n\nimport { addDayplan_Fs } from \"../../../../firebase/Config\"\n\nconst Dayplans = () => {\n  //needed state\n  const dayplans = useSelector((state) => state.dayplans)\n  const cards = useSelector((state) => state.cards)\n\n  const getCardTitle = (id) => {\n    let target = cards.find((item) => item.id === id)\n    return target ? target.title : null\n  }\n\n  try {\n    return (\n      <div id=\"itineraryBoard\" className={styles.itineraryBoard}>\n        <div className={styles[`container_${dayplans.length}`]}>\n          <div className={styles.year}>\n            <span>2020</span>\n          </div>\n          <div className={styles.morning}>\n            <span>上午</span>\n          </div>\n          <div className={styles.afternoon}>\n            <span>下午</span>\n          </div>\n          <div className={styles.evening}>\n            <span>晚上</span>\n          </div>\n          <div className={styles.hotel}>\n            <span>住房</span>\n          </div>\n\n          {dayplans.map((dayplan, index) => {\n            return (\n              <Dates\n                key={nanoid()}\n                dayplan={dayplan}\n                index={index}\n                totalDays={dayplans.length}\n              />\n            )\n          })}\n\n          {dayplans.map((dayplan, index) => {\n            if (dayplan.id) {\n              return (\n                <Droppable key={nanoid()} droppableId={dayplan.id}>\n                  {(provided) => (\n                    <div\n                      className={styles[`dayplan_${index + 1}`]}\n                      {...provided.droppableProps}\n                      ref={provided.innerRef}\n                    >\n                      {dayplan.schedule.map((card, index) => {\n                        if (card.card_id) {\n                          return (\n                            <Draggable\n                              key={card.card_id}\n                              draggableId={card.card_id}\n                              index={index}\n                            >\n                              {(provided) => (\n                                <div\n                                  className={styles.card}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                  ref={provided.innerRef}\n                                >\n                                  <div className={styles.cardTitle}>\n                                    {getCardTitle(card.card_id)}\n                                  </div>\n                                </div>\n                              )}\n                            </Draggable>\n                          )\n                        }\n                        return null\n                      })}\n                      {provided.placeholder}\n                    </div>\n                  )}\n                </Droppable>\n              )\n            }\n            return null\n          })}\n        </div>\n      </div>\n    )\n  } catch {\n    return null\n  }\n}\n\nexport default Dayplans\n\nconst Dates = ({ dayplan, index, totalDays }) => {\n  const dateConverter = (dateString) => {\n    const dayNamesEn = [\"Sun.\", \"Mon.\", \"Tue.\", \"Wed.\", \"Thu.\", \"Fri.\", \"Sat.\"]\n    let date = new Date(dateString)\n    let temp = {\n      MM_DD: `${date.getMonth() + 1}/${date.getDate()}`,\n      Day: dayNamesEn[date.getDay()],\n    }\n    return temp\n  }\n\n  const toMMDD = (input) => {\n    return dateConverter(input).MM_DD\n  }\n\n  const toDay = (input) => {\n    return dateConverter(input).Day\n  }\n\n  //add dayplan\n  let itinerary_id = useSelector((state) => state.itinerary.id)\n\n  const addDayplan = (type, date) => {\n    let newDate = new Date(date)\n\n    switch (type) {\n      case \"before\": {\n        newDate.setDate(newDate.getDate() - 1)\n        let input = {\n          itinerary_id: itinerary_id,\n          schedule: [],\n          date: new Date(newDate),\n        }\n\n        console.log(input)\n        addDayplan_Fs(input)\n        break\n      }\n      case \"after\": {\n        newDate.setDate(newDate.getDate() + 1)\n        let input = {\n          itinerary_id: itinerary_id,\n          schedule: [],\n          date: new Date(newDate),\n        }\n        console.log(input)\n        addDayplan_Fs(input)\n        break\n      }\n      default: {\n        console.log(\"wrong type\")\n        break\n      }\n    }\n  }\n\n  try {\n    return (\n      <div className={styles[`date_${index + 1}`]}>\n        <div\n          className={index === 0 ? styles.addDateBtn : styles.space}\n          onClick={\n            index === 0 ? () => addDayplan(\"before\", dayplan.date) : null\n          }\n        ></div>\n        <span className={styles.dateString}>{`${toMMDD(dayplan.date)} (${toDay(\n          dayplan.date\n        )})`}</span>\n        <div\n          className={index === totalDays - 1 ? styles.addDateBtn : styles.space}\n          onClick={\n            index === totalDays - 1\n              ? () => addDayplan(\"after\", dayplan.date)\n              : null\n          }\n        ></div>\n      </div>\n    )\n  } catch {\n    return null\n  }\n}\n",["140","141"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/dayplanSlice.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/firebase/Config.js",["142","143"],"import firebase from \"firebase/app\"\nimport \"firebase/analytics\"\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAxbnsUNTG2SYqUsC2QqIbBo1OLuKXeZ-g\",\n  authDomain: \"pplanner-bfb1a.firebaseapp.com\",\n  databaseURL: \"https://pplanner-bfb1a.firebaseio.com\",\n  projectId: \"pplanner-bfb1a\",\n  storageBucket: \"pplanner-bfb1a.appspot.com\",\n  messagingSenderId: \"501383303118\",\n  appId: \"1:501383303118:web:a6c81e2be82826845e659f\",\n  measurementId: \"G-FETYRNE2VX\",\n}\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig)\n\n//abbreviation\nvar db = firebase.firestore()\n\nconst defaultID = \"aJyjoGPEIH69isQ7QfYs\"\n\nexport const toDate = firebase.firestore.Timestamp.toDate\n\n//////listening to cloud data///////\nexport const listenToMembers = (\n  projectId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"users\")\n    .where(\"projects\", \"array-contains\", projectId)\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n\n          //add id to data\n          data.id = id\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\nexport const listenToProjects = (\n  userId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"projects\")\n    .where(\"members\", \"array-contains\", userId)\n    .onSnapshot(function (snapshot) {\n      let temp = []\n      snapshot.docChanges().forEach(function (change) {\n        let changes = change.doc.data()\n        if (change.type === \"added\") {\n          // console.log(\"add \", changes, \"to local state\")\n          handleAdd(changes)\n        }\n        if (change.type === \"modified\") {\n          handleModify(changes)\n          console.log(\"modify \", changes, \"to local state\")\n        }\n        if (change.type === \"removed\") {\n          handleRemove(changes)\n          console.log(\"Removed: \", changes, \"from local state\")\n        }\n        temp.push(changes)\n      })\n    })\n  return unsubscribe\n}\n\nexport const listenToDayplans = (\n  itineraryId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"dayplans\")\n    .where(\"itinerary_id\", \"==\", itineraryId)\n    .orderBy(\"date\", \"asc\")\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n\n          //add id to data\n          data.id = id\n          //conver time object to string\n          data.date = data.date.toDate().toString()\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\nexport const listenToCard = (\n  projectId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"projects\")\n    .doc(projectId)\n    .collection(\"cards\")\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n\n          // console.log(source, type, id, data)\n          //add id to data\n          data.id = id\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\nexport const listenToComments = (\n  cardId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"comments\")\n    .where(\"card_id\", \"==\", cardId)\n    .orderBy(\"date\", \"asc\")\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      // console.log(source, snapshot, docChange)\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n          // console.log(source, type, id, data)\n\n          //add id to data\n          data.id = id\n          //conver time object to string\n          data.date = data.date.toDate().toString()\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\nexport const listenToLinks = (\n  cardId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"links\")\n    .where(\"card_id\", \"==\", cardId)\n    .orderBy(\"date\", \"asc\")\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      // console.log(source, snapshot, docChange)\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n          // console.log(source, type, id, data)\n\n          //add id to data\n          data.id = id\n          //conver time object to string\n          data.date = data.date.toDate().toString()\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\n//////update cloud data//////\n\n//basic function\nexport const update = (collection, doc, fileds) => {\n  let docRef = db.collection(collection).doc(doc)\n\n  return docRef\n    .update(fileds)\n    .then(function () {\n      console.log(\"Document successfully updated!\")\n    })\n    .then(docRef.update({ onChange: \"\" }))\n    .catch(function (error) {\n      // The document probably doesn't exist.\n      console.error(\"Error updating document: \", error)\n    })\n}\n\n//update project title in nav bar\nexport const updateProjectTitle_Fs = (projectId, input) => {\n  let docRef = db.collection(\"projects\").doc(projectId)\n  let changes = {\n    title: input,\n  }\n  return docRef\n    .update(changes)\n    .then(function () {\n      console.log(\"Document successfully updated project title!\")\n    })\n    .catch(function (error) {\n      console.error(\"Error updating document: \", error)\n    })\n}\n\n//////cards related//////\nexport const AddCard_Fs = (projectId, input) => {\n  let docRef = db.collection(\"projects\").doc(projectId).collection(\"cards\")\n\n  return docRef.add(input).catch(function (error) {\n    console.error(\"Error adding document: \", error)\n  })\n}\n\nexport const updateCard_Fs = (projectId, cardId, change) => {\n  // expected format:\n  // let change = {\n  //   title: input,\n  // }\n\n  let docRef = db\n    .collection(\"projects\")\n    .doc(projectId)\n    .collection(\"cards\")\n    .doc(cardId)\n\n  return docRef.update(change).catch(function (error) {\n    console.error(\"Error updating document: \", error)\n  })\n}\n\nexport const addComment_Fs = (input) => {\n  // expected format:\n  // let input = {\n  // card_id: cardId,\n  // sender_id: userId,\n  // content: pending,\n  // date: date object,\n  // }\n\n  let docRef = db.collection(\"comments\")\n\n  return docRef.add(input).catch(function (error) {\n    console.error(\"Error adding document: \", error)\n  })\n}\n\nexport const updateComment_Fs = (commentId, change) => {\n  // expected format:\n  // let change = {\n  //   content: input,\n  // }\n\n  let docRef = db.collection(\"comments\").doc(commentId)\n\n  return docRef.update(change).catch(function (error) {\n    console.error(\"Error updating document: \", error)\n  })\n}\n\nexport const removeComment_Fs = (commentId) => {\n  let docRef = db.collection(\"comments\").doc(commentId)\n\n  return docRef.delete().catch(function (error) {\n    console.error(\"Error deleting document: \", error)\n  })\n}\n\nexport const addLink_Fs = (input) => {\n  // expected format:\n  // let input = {\n  // card_id: cardId,\n  // url: url,\n  // title: string,\n  // date: date object,\n  // }\n\n  let docRef = db.collection(\"links\")\n\n  return docRef.add(input).catch(function (error) {\n    console.error(\"Error adding document: \", error)\n  })\n}\n\nexport const updateLink_Fs = (linkId, change) => {\n  // expected format:\n  // let change = {\n  //   title: input,\n  // }\n\n  let docRef = db.collection(\"links\").doc(linkId)\n\n  return docRef.update(change).catch(function (error) {\n    console.error(\"Error updating document: \", error)\n  })\n}\n\nexport const removeLink_Fs = (linkId) => {\n  let docRef = db.collection(\"links\").doc(linkId)\n\n  return docRef.delete().catch(function (error) {\n    console.error(\"Error deleting document: \", error)\n  })\n}\n\nexport const addDayplan_Fs = (input) => {\n  let docRef = db.collection(\"dayplans\")\n\n  return docRef\n    .add(input)\n    .then(function (newDayplan) {\n      newDayplan.update({\n        id: newDayplan.id,\n      })\n    })\n    .catch(function (error) {\n      console.error(\"Error adding document: \", error)\n    })\n}\n\n// // Atomically add a new region to the \"regions\" array field.\n// washingtonRef.update({\n//   regions: firebase.firestore.FieldValue.arrayUnion(\"greater_virginia\")\n// });\n\n// // Atomically remove a region from the \"regions\" array field.\n// washingtonRef.update({\n//   regions: firebase.firestore.FieldValue.arrayRemove(\"east_coast\")\n// });\n\n//////initialize local data//////\n\nexport function getFsData_Itinerary(project_id, field, operators, value) {\n  return db\n    .collection(\"projects\")\n    .doc(project_id)\n    .collection(\"itineraries\")\n    .orderBy(\"created_time\", \"desc\") //get the latest version of itineray\n    .limit(1)\n    .get()\n    .then(function (querySnapshot) {\n      let temp\n      querySnapshot.forEach(function (doc) {\n        temp = doc.data()\n      })\n      return temp\n    })\n    .then((res) => {\n      //conver time object to string\n      res.created_time = res.created_time.toDate().toString()\n      return res\n    })\n    .catch(function (error) {\n      console.log(\"Error getting documents: \", error)\n    })\n}\n\n//not sure what to do\n\nexport const listenToData = (callback) => {\n  db.collection(\"test\")\n    .doc(\"2eddU3pn48Llu7Ji60Nz\")\n    .onSnapshot(function (doc) {\n      var source = doc.metadata.hasPendingWrites ? \"Local\" : \"Server\"\n      let data = doc.data()\n      callback(data)\n    })\n}\n\nexport const updateCards = (projectId, cardId, changes) => {\n  let docRef = db\n    .collection(\"project\")\n    .doc(projectId)\n    .collection(\"cards\")\n    .doc(cardId)\n\n  return (\n    docRef\n      .update(changes)\n      .then(function () {\n        console.log(\"Document successfully updated!\")\n      })\n      // .then(docRef.update({ onChange: \"\" }))\n      .catch(function (error) {\n        // The document probably doesn't exist.\n        console.error(\"Error updating document: \", error)\n      })\n  )\n}\n\nexport const updateSchedule = (dayplanId, changes) => {\n  let docRef = db.collection(\"dayplans\").doc(dayplanId)\n\n  return (\n    docRef\n      .update({ schedule: changes })\n      .then(function () {\n        console.log(\"Document successfully updated!\")\n      })\n      // .then(docRef.update({ onChange: \"\" }))\n      .catch(function (error) {\n        // The document probably doesn't exist.\n        console.error(\"Error updating document: \", error)\n      })\n  )\n}\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/cardSlice.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/store.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/itineraryBoardLib.js",[],["144","145"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Navbar/Navbar.jsx",["146","147","148","149","150","151","152"],"import React, { useState, useEffect } from \"react\"\nimport {\n  Link,\n  useRouteMatch,\n  useParams,\n  useLocation,\n  Route,\n  Switch,\n  useHistory,\n} from \"react-router-dom\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport Select from \"react-select\"\nimport makeAnimated from \"react-select/animated\"\n\nimport styles from \"./navbar.module.scss\"\n\nimport Title from \"./component/Title\"\n\nconst Navbar = (props) => {\n  let [login, setLogin] = useState(true)\n  let { projectId } = useParams()\n  let match = useRouteMatch()\n  let thisProject = (state) =>\n    state.projects.find((project) => project.id === projectId)\n  let project = useSelector(thisProject)\n\n  const renderSwitch = () => {\n    switch (props.type) {\n      case \"cards\": {\n        return (\n          <div className={styles.switchBar}>\n            <div className={styles.searchBoard}>\n              <BoardSelect type={props.type} />\n            </div>\n\n            <div className={styles.searchCard}>\n              <CardSelect />\n            </div>\n          </div>\n        )\n      }\n      case \"itineraries\": {\n        return (\n          <div className={styles.switchBar}>\n            <div className={styles.searchBoard}>\n              <BoardSelect type={props.type} />\n            </div>\n          </div>\n        )\n      }\n      case \"expenditure\": {\n        return (\n          <div className={styles.switchBar}>\n            <div className={styles.searchBoard}>\n              <BoardSelect type={props.type} />\n            </div>\n          </div>\n        )\n      }\n      case \"todoList\": {\n        return (\n          <div className={styles.switchBar}>\n            <div className={styles.searchBoard}>\n              <BoardSelect type={props.type} />\n            </div>\n          </div>\n        )\n      }\n      default: {\n        return null\n      }\n    }\n  }\n\n  if (login) {\n    return (\n      <div className={styles.navBar}>\n        <Link to=\"/\" className={styles.item}>\n          Logo\n        </Link>\n        <Switch>\n          <Route path={`/projects/${projectId}`}>\n            <Title\n              title={project ? project.title : null}\n              projectId={project ? project.id : null}\n            />\n          </Route>\n        </Switch>\n\n        {renderSwitch()}\n        <div className={styles.space}></div>\n        <Link to=\"/user\" className={styles.button_border}>\n          User\n        </Link>\n      </div>\n    )\n  } else {\n    //not Login\n    return (\n      <div className={styles.navBar}>\n        <ul>\n          <li>\n            <Link to=\"/\" className={styles.button}>\n              Logo\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/signIn\" className={styles.button}>\n              Sign in\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/signUp\" className={styles.button_border}>\n              Sign up\n            </Link>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Navbar\n\nconst BoardSelect = (props) => {\n  let history = useHistory()\n  let match = useRouteMatch()\n  let itineraryId = useSelector((state) => state.itinerary.id)\n  let location = useLocation()\n  let { projectId } = useParams()\n\n  // console.log(match)\n\n  let options = [\n    { value: \"cards\", label: \"卡片板\" },\n    { value: \"itineraries\", label: \"行程板\" },\n    { value: \"expenditure\", label: \"花費板\" },\n    { value: \"todoList\", label: \"待辦清單\" },\n  ]\n  const thisBoard = () => {\n    return options.findIndex((option) => option.value === props.type)\n  }\n\n  const handleChange = (e) => {\n    //update URL\n    let boardType = e.value\n    let location\n    switch (boardType) {\n      case \"itineraries\": {\n        location = {\n          pathname: `/projects/${match.params.projectId}/${boardType}/${itineraryId}`,\n        }\n        break\n      }\n      default: {\n        location = {\n          pathname: `/projects/${match.params.projectId}/${boardType}`,\n        }\n      }\n    }\n    history.push(location)\n  }\n\n  return (\n    <Select\n      options={options}\n      value={options[thisBoard()]}\n      onChange={handleChange}\n    />\n  )\n}\n\nconst CardSelect = () => {\n  let history = useHistory()\n  let match = useRouteMatch()\n\n  let location = useLocation()\n  let { projectId } = useParams()\n  const animatedComponents = makeAnimated()\n\n  //prepare options\n  let cards = useSelector((state) => state.cards)\n  let [options, setOptions] = useState([])\n\n  useEffect(() => {\n    let tags = cards.reduce(function (prev, curr) {\n      return [...prev, ...curr.tags]\n    }, [])\n\n    const capitalize = (string) => {\n      return string.slice(0, 1).toUpperCase() + string.slice(1)\n    }\n    let temp = []\n    tags.forEach((tag) => {\n      temp.push({\n        value: tag,\n        label: capitalize(tag),\n      })\n      setOptions(temp)\n    })\n  }, [cards])\n\n  //get searched tags from URL\n  const useQuery = () => {\n    let tagString = new URLSearchParams(useLocation().search).get(\"tag\")\n    return tagString ? tagString.split(\" \") : null\n  }\n  let searchTags = useQuery()\n  const handleValue = () => {\n    return searchTags\n      ? options.filter((option) => searchTags.includes(option.value))\n      : null\n  }\n\n  //update URL when search\n  const handleChange = (e) => {\n    let params = []\n    let location\n    if (e) {\n      e.forEach((tag) => {\n        params.push(tag.value)\n      })\n      location = {\n        pathname: `${match.url}/`,\n        search: `?tag=${params.join(\"+\")}`,\n        state: { tags: params },\n      }\n    } else {\n      location = {\n        pathname: `${match.url}`,\n        state: { tags: false },\n      }\n    }\n    history.push(location)\n  }\n\n  return (\n    <Select\n      isMulti\n      options={options}\n      value={handleValue()}\n      onChange={handleChange}\n      closeMenuOnSelect={false}\n      components={animatedComponents}\n      placeholder=\"搜尋卡片標籤\"\n    />\n  )\n}\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/App.jsx",["153","154","155"],"import React from \"react\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n} from \"react-router-dom\"\n\nimport Navbar from \"./pages/Navbar/Navbar\"\nimport Projects from \"./pages/Project/Projects\"\nimport Home from \"./pages/Home/Home\"\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/projects\">\n            <Projects />\n          </Route>\n          <Route path=\"/\">\n            <Navbar type=\"default\" />\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\n// import React from \"react\"\n\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\n\n// import { test, update, listenToData } from \"./firebase/Config\"\n\n// function App() {\n// const [data, setData] = useState({})\n// const [userId, setUserId] = useState(\"aJyjoGPEIH69isQ7QfYs\")\n\n// function switchUser(target) {\n//   setUserId(target.value)\n// }\n\n// //註冊一次監聽事件\n// useEffect(() => {\n//   listenToData(setData)\n// }, [])\n\n/* <div>\n        <textarea\n          name=\"test\"\n          id=\"test\"\n          cols=\"30\"\n          rows=\"10\"\n          onChange={(e) => {\n            if (!data.onChange || data.onChange === userId) {\n              update(\"test\", \"2eddU3pn48Llu7Ji60Nz\", {\n                content: e.target.value,\n                onChange: userId,\n              })\n            } else {\n              console.log(`其他使用者${data.onChange}正在編輯`)\n            }\n          }}\n          value={data.content}\n        ></textarea>\n        <br />\n\n        <input\n          type=\"radio\"\n          name=\"tag\"\n          value=\"aJyjoGPEIH69isQ7QfYs\"\n          defaultChecked\n          onChange={(e) => switchUser(e.target)}\n        />\n        <label>test</label>\n        <input\n          type=\"radio\"\n          name=\"tag\"\n          value=\"jFz7tkCgR2bTkzHJd1jU\"\n          onChange={(e) => switchUser(e.target)}\n        />\n        <label>tset2</label>\n        <br />\n\n        <button onClick={test}>click</button>\n      </div> */\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/index.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Home/Home.jsx",["156","157"],"import React, { useState, useEffect } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport styles from \"./home.module.scss\"\n\nconst Home = () => {\n  return (\n    <div className={styles.view}>\n      <div className={styles.banner}>\n        現在開始規劃旅行吧！\n        <br />\n        <Link to=\"/projects\" className={styles.button_border}>\n          GO\n        </Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/User/userSlice.js",["158"],"import { createSlice } from \"@reduxjs/toolkit\"\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    id: \"aJyjoGPEIH69isQ7QfYs\",\n    name: \"\",\n    email: \"test\",\n    picture: \"\",\n    projects: [\"mG06SIS2LbvuKWOXdNSE\"],\n  },\n  reducers: {},\n})\n\nexport const {} = userSlice.actions\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount))\n//   }, 1000)\n// }\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.user.value)`\n// export const selectCount = (state) => state.user.value\n\nexport default userSlice.reducer\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/Projects.jsx",["159","160","161","162"],"import React, { useState, useEffect } from \"react\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n} from \"react-router-dom\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { nanoid } from \"@reduxjs/toolkit\"\n\nimport styles from \"./projects.module.scss\"\n\nimport Navbar from \"../Navbar/Navbar\"\nimport Project from \"./Project\"\n\nimport { listenToProjects } from \"../../firebase/Config\"\nimport { addProjects, modifyProjects, removeProjects } from \"./projectsSlice\"\nconst Projects = () => {\n  // console.log(\"render projects\")\n  let dispatch = useDispatch()\n  let match = useRouteMatch()\n  let projects = useSelector((state) => state.projects)\n  let userId = useSelector((state) => state.user.id)\n\n  const handleAddProject = (res) => {\n    dispatch(addProjects(res))\n  }\n\n  const handleModifyProject = (res) => {\n    dispatch(modifyProjects(res))\n  }\n\n  const handleRemoveProject = (res) => {\n    dispatch(removeProjects(res))\n  }\n\n  //init and listen to changes\n  useEffect(() => {\n    listenToProjects(\n      userId,\n      handleAddProject,\n      handleModifyProject,\n      handleRemoveProject\n    )\n  }, [])\n\n  return (\n    <div className={styles.view}>\n      <Switch>\n        <Route exact path={match.path}>\n          <Navbar type=\"default\" />\n          <div className={styles.container}>\n            {projects.map((project) => {\n              return (\n                <Link to={`${match.url}/${project.id}`} key={project.id}>\n                  <div className={styles.project}>\n                    <span className={styles.projectTitle}>{project.title}</span>\n                  </div>\n                </Link>\n              )\n            })}\n            <Link to={`${match.url}`} key={nanoid()}>\n              <div className={styles.addProject}>\n                <span className={styles.projectTitle}>新增旅行</span>\n              </div>\n            </Link>\n          </div>\n        </Route>\n\n        <Route path={`${match.path}/:projectId`}>\n          <Project />\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nexport default Projects\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/projectsSlice.js",["163","164"],"import { createSlice } from \"@reduxjs/toolkit\"\nimport { getData, getFsData } from \"../../firebase/Config\"\n\nexport const projectsSlice = createSlice({\n  name: \"projects\",\n  initialState: [],\n  reducers: {\n    addProjects: (state, action) => {\n      let target = action.payload\n\n      //prevent repeatly adding\n      if (state.findIndex((project) => project.id === target.id) < 0) {\n        state.push(target)\n      }\n    },\n    removeProjects: (state, action) => {\n      let target = action.payload\n      let index = state.findIndex((project) => project.id === target.id)\n      state.splice(index, 1)\n    },\n    modifyProjects: (state, action) => {\n      let target = action.payload\n      let index = state.findIndex((project) => project.id === target.id)\n      state.splice(index, 1, target)\n    },\n\n    editProjectTitle: (state, action) => {\n      let target = state.find(\n        (project) => project.id === action.payload.projectId\n      )\n      target.title = action.payload.newTitle\n    },\n  },\n})\n\nexport const {\n  addProjects,\n  removeProjects,\n  modifyProjects,\n  editProjectTitle,\n} = projectsSlice.actions\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount))\n//   }, 1000)\n// }\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.projects.value)`\n// export const selectCount = (state) => state.projects.value\n\nexport default projectsSlice.reducer\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/Project.jsx",["165","166","167","168","169","170","171","172"],"import React, { useState, useEffect } from \"react\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n} from \"react-router-dom\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { nanoid } from \"@reduxjs/toolkit\"\n\nimport styles from \"./project.module.scss\"\nimport Navbar from \"../Navbar/Navbar\"\nimport ItineraryBoard from \"./feature/itineraryBoard/ItineraryBoard\"\nimport CardBoard from \"./feature/CardBoard/CardBoard\"\nimport Expenditure from \"./feature/Expenditure/Expenditure\"\nimport TodoList from \"./feature/TodoList/TodoList\"\n\nimport {\n  getFsData_Itinerary,\n  listenToDayplans,\n  listenToCard,\n  listenToMembers,\n} from \"../../firebase/Config\"\n\nimport { initItinerary } from \"./feature/itineraryBoard/itinerarySlice\"\nimport {\n  addDayplan,\n  modifyDayplan,\n  removeDayplan,\n} from \"./feature/itineraryBoard/dayplanSlice\"\nimport {\n  addCard,\n  modifyCard,\n  removeCard,\n  initCards,\n} from \"./feature/CardBoard/cardSlice\"\n\nimport { addMember, modifyMember, removeMember } from \"../User/membersSlice\"\n\nconst Project = () => {\n  // console.log(\"rerender Project component\")\n\n  let { projectId } = useParams()\n  let match = useRouteMatch()\n  let projects = useSelector((state) => state.projects)\n  let itineraryId = useSelector((state) => state.itinerary.id)\n  let cards = useSelector((state) => state.cards)\n  const dispatch = useDispatch()\n\n  const handleAddDayplan = (res) => {\n    dispatch(addDayplan(res))\n  }\n\n  const handleModifyDayplan = (res) => {\n    dispatch(modifyDayplan(res))\n  }\n\n  const handleRemoveDayplan = (res) => {\n    dispatch(removeDayplan(res))\n  }\n\n  const handleAddCard = (res, source) => {\n    dispatch(addCard(res))\n  }\n\n  const handleModifyCard = (res, source) => {\n    dispatch(modifyCard(res))\n  }\n\n  const handleRemoveCard = (res, source) => {\n    dispatch(removeCard(res))\n  }\n\n  const handleAddMember = (res, source) => {\n    let input = {\n      id: res.id,\n      name: res.name,\n      picture: res.picture,\n    }\n    dispatch(addMember(input))\n  }\n\n  const handleModifyMember = (res, source) => {\n    let input = {\n      id: res.id,\n      name: res.name,\n      picture: res.picture,\n    }\n    dispatch(modifyMember(input))\n  }\n\n  const handleRemoveMember = (res, source) => {\n    let input = {\n      id: res.id,\n      name: res.name,\n      picture: res.picture,\n    }\n    dispatch(removeMember(input))\n  }\n\n  //init and listen to changes\n  useEffect(() => {\n    // initial itinerary with latest version\n    getFsData_Itinerary(projectId).then((itinerary) => {\n      //initial and listen to dayplans\n      let unsubscribeToDayplan = listenToDayplans(\n        itinerary.id,\n        handleAddDayplan,\n        handleModifyDayplan,\n        handleRemoveDayplan\n      )\n      dispatch(initItinerary(itinerary))\n    })\n\n    let unsubscribeToCard = listenToCard(\n      projectId,\n      handleAddCard,\n      handleModifyCard,\n      handleRemoveCard\n    )\n\n    let unsubscribeToMembers = listenToMembers(\n      projectId,\n      handleAddMember,\n      handleModifyMember,\n      handleRemoveMember\n    )\n\n    return () => {\n      unsubscribeToCard()\n      unsubscribeToMembers()\n    }\n  }, [])\n\n  // useEffect(() => {\n  //   // initial itinerary with latest version\n  //   getFsData_Itinerary(projectId).then((itinerary) => {\n  //     //initial dayplans\n  //     getFsData(\"dayplans\", \"itinerary_id\", \"==\", itinerary.id).then(\n  //       (dayplan) => {\n  //         dispatch(initItinerary(itinerary))\n  //         dispatch(initDayplans(dayplan))\n  //       }\n  //     )\n  //   })\n\n  //initial cards\n  //   getFsData_Cards(projectId).then((res) => {\n  //     dispatch(initCards(res))\n  //   })\n  //   console.log(\"init dayplans and cards\")\n  // }, [projectId])\n\n  return (\n    <Switch>\n      <Route exact path={match.path}>\n        <Navbar type=\"project\" />\n        <div className={styles.container}>\n          <ul>\n            <Link to={`${match.url}/todoList`}>待辦事項</Link>\n\n            <Link to={`${match.url}/cards`}>卡片板</Link>\n\n            <Link to={`${match.url}/itineraries/${itineraryId}`}>行程板</Link>\n\n            <Link to={`${match.url}/expenditure`}>花費板</Link>\n          </ul>\n        </div>\n      </Route>\n      <Route path={`${match.path}/itineraries/:itineraryId`}>\n        <Navbar type=\"itineraries\" />\n        <ItineraryBoard />\n      </Route>\n      <Route path={`${match.path}/cards`}>\n        <Navbar type=\"cards\" />\n        <CardBoard />\n      </Route>\n      <Route path={`${match.path}/expenditure`}>\n        <Navbar type=\"expenditure\" />\n        <Expenditure />\n      </Route>\n      <Route path={`${match.path}/todoList`}>\n        <Navbar type=\"todoList\" />\n        <TodoList />\n      </Route>\n    </Switch>\n  )\n}\n\nexport default Project\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/Expenditure/Expenditure.jsx",["173","174"],"import React, { useState, useEffect } from \"react\"\n\n// import styles from \"../../../scss/cardBoard.module.scss\"\n\nconst Expenditure = () => {\n  return (\n    <div>\n      <br />\n      <br />\n      <br />\n      Expenditure\n    </div>\n  )\n}\n\nexport default Expenditure\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/CardBoard.jsx",["175","176","177","178","179"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/TodoList/TodoList.jsx",["180","181"],"import React, { useState, useEffect } from \"react\"\n\n// import styles from \"../../../scss/cardBoard.module.scss\"\n\nconst TodoList = () => {\n  return (\n    <div>\n      <br />\n      <br />\n      <br />\n      todoList\n    </div>\n  )\n}\n\nexport default TodoList\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Navbar/component/Title.jsx",["182","183","184","185","186","187","188","189","190"],"import React, { useState, useEffect } from \"react\"\nimport {\n  Link,\n  useRouteMatch,\n  useParams,\n  useLocation,\n  Route,\n  Switch,\n} from \"react-router-dom\"\nimport { useSelector, useDispatch } from \"react-redux\"\n\nimport styles from \"../navbar.module.scss\"\n\nimport { updateProjectTitle_Fs } from \"../../../firebase/Config\"\nimport { editProjectTitle } from \"../../Project/projectsSlice\"\n\nconst Title = ({ projectId, title }) => {\n  let projectTitle = title ? title : null\n  let [isEditing, setEditing] = useState(false)\n  let [pending, setPending] = useState(\"\")\n\n  //update pending\n  useEffect(() => {\n    setPending(projectTitle)\n  }, [projectTitle])\n\n  let dispatch = useDispatch()\n\n  const handleTitleEdit = (e) => {\n    if (e.type === \"blur\" || e.key === \"Enter\") {\n      //update cloud data\n      updateProjectTitle_Fs(projectId, e.target.value)\n\n      setEditing(!isEditing)\n    }\n  }\n\n  if (!isEditing) {\n    return (\n      <div\n        className={styles.item}\n        onClick={() => {\n          setEditing(!isEditing)\n        }}\n      >\n        {projectTitle}\n      </div>\n    )\n  } else {\n    return (\n      <input\n        type=\"text\"\n        className={styles.editTitle}\n        value={pending}\n        onChange={(e) => setPending(e.target.value)}\n        onBlur={handleTitleEdit}\n        onKeyPress={handleTitleEdit}\n        autoFocus\n      />\n    )\n  }\n}\n\nexport default Title\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/component/SmallCard.jsx",["191"],"import React, { useState, useEffect } from \"react\"\n\nimport styles from \"../cardBoard.module.scss\"\n\nconst fakeImg = \"https://fakeimg.pl/65x65/\"\n\nexport const SmallCard = ({ card }) => {\n  return (\n    <div id={card.id} className={styles.card_small}>\n      <div className={styles[`tag_${card.category}`]}></div>\n      <div className={styles.info}>\n        <div className={styles.card_small_picture}>\n          <img src={card.cover_pic} alt=\"pic\" />\n        </div>\n        <div className={styles.details}>\n          <div className={styles.title}>{card.title}</div>\n          <div className={styles.description}>{card.description}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport const AddCard = ({ pendingInfo, setPendingInfo, shouldAddCard }) => {\n  //new card data\n  // const emptyCard = {\n  //   title: \"\",\n  //   description: \"\",\n  //   category: \"default\",\n  // }\n\n  // const [pendingInfo, setPendingInfo] = useState(emptyCard)\n\n  // useEffect(() => {\n  //   return () => {\n  //     console.log(\"unmount\")\n  //   }\n  // })\n\n  // console.log(pendingInfo !== emptyCard)\n  // pendingInfo, setPendingInfo, shouldAddCard\n  //detemine should add card or not\n  // if (pendingInfo !== emptyCard) {\n  //   shouldAddCard(true)\n  // }\n\n  //category related\n  const [selectCategory, setCategory] = useState(false)\n  const toggleCategorySelect = (e) => {\n    if (e.target.id === \"pendingCategory\") {\n      setCategory(!selectCategory)\n    }\n  }\n  const updateCategory = (e) => {\n    setPendingInfo({\n      ...pendingInfo,\n      category: e.target.value,\n      tags: [e.target.value],\n    })\n    setCategory(!selectCategory)\n  }\n\n  const updateTitle = (input) => {\n    setPendingInfo({ ...pendingInfo, title: input })\n  }\n\n  const updateDescription = (input) => {\n    setPendingInfo({ ...pendingInfo, description: input })\n  }\n\n  return (\n    <div className={styles.card_small}>\n      <div\n        id=\"pendingCategory\"\n        className={styles[`tag_${pendingInfo.category}`]}\n        onClick={toggleCategorySelect}\n      >\n        {selectCategory ? (\n          <SelectCategory handleSelectCategory={updateCategory} />\n        ) : null}\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.card_small_picture}>\n          <img src={fakeImg} alt=\"pic\" />\n        </div>\n        <div className={styles.details}>\n          <PendingTitle\n            pendingTitle={pendingInfo.title}\n            handleTitleUpdate={updateTitle}\n          />\n\n          <PendingDescription\n            pendingDescription={pendingInfo.description}\n            handleDescriptionUpdate={updateDescription}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\n////////////Title////////////\n\nconst PendingTitle = (props) => {\n  const [isEditing, setEditing] = useState(true)\n  const [pending, setPending] = useState(\"\")\n\n  let { pendingTitle, handleTitleUpdate } = props\n\n  const toggleInputTitle = (e) => {\n    if (e.target.id === \"pendingTitle\") {\n      setEditing(!isEditing)\n    }\n  }\n\n  const handleTitleEdit = (e) => {\n    if (e.type === \"blur\" || e.key === \"Enter\") {\n      if (e.target.value) {\n        setEditing(!isEditing)\n        handleTitleUpdate(e.target.value)\n      } else {\n        handleTitleUpdate(\"\")\n      }\n    }\n  }\n\n  if (isEditing) {\n    return (\n      <input\n        type=\"text\"\n        className={styles.inputTitle}\n        placeholder=\"編輯標題\"\n        value={pending}\n        onChange={(e) => setPending(e.target.value)}\n        onBlur={handleTitleEdit}\n        onKeyPress={handleTitleEdit}\n        autoFocus\n      />\n    )\n  } else {\n    return (\n      <div\n        id=\"pendingTitle\"\n        className={styles.title}\n        onClick={toggleInputTitle}\n      >\n        {pendingTitle}\n      </div>\n    )\n  }\n}\n\n////////////Description////////////\n\nconst PendingDescription = (props) => {\n  const [isEditing, setEditing] = useState(true)\n  const [pending, setPending] = useState(\"\")\n\n  let { pendingDescription, handleDescriptionUpdate } = props\n\n  const toggleInputDescription = (e) => {\n    if (e.target.id === \"pendingDescription\") {\n      setEditing(!isEditing)\n    }\n  }\n\n  const handleTitleEdit = (e) => {\n    if (e.type === \"blur\" || e.key === \"Enter\") {\n      if (e.target.value) {\n        setEditing(!isEditing)\n        handleDescriptionUpdate(e.target.value)\n      } else {\n        handleDescriptionUpdate(\"\")\n      }\n    }\n  }\n\n  if (isEditing) {\n    return (\n      <textarea\n        type=\"text\"\n        className={styles.inputDescription}\n        placeholder=\"編輯描述\"\n        value={pending}\n        onChange={(e) => setPending(e.target.value)}\n        onBlur={handleTitleEdit}\n        onKeyPress={handleTitleEdit}\n      />\n    )\n  } else {\n    return (\n      <div\n        id=\"pendingDescription\"\n        className={styles.description}\n        onClick={toggleInputDescription}\n      >\n        {pendingDescription}\n      </div>\n    )\n  }\n}\n\n////////////Category////////////\n\nconst SelectCategory = (props) => {\n  const categories = [\"food\", \"hotel\", \"country\", \"site\", \"commute\", \"default\"]\n  let handleSelectCategory = props.handleSelectCategory\n\n  return (\n    <div className={styles.selectCategory}>\n      {categories.map((category) => {\n        return (\n          <option\n            value={category}\n            className={styles[`category_${category}`]}\n            onClick={handleSelectCategory}\n          >\n            {category}\n          </option>\n        )\n      })}\n    </div>\n  )\n}\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/component/LargeCard.jsx",["192","193","194","195","196","197","198","199","200"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/User/membersSlice.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/lib.js",[],{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":2,"column":10,"nodeType":"207","messageId":"208","endLine":2,"endColumn":17},{"ruleId":"205","severity":1,"message":"209","line":2,"column":19,"nodeType":"207","messageId":"208","endLine":2,"endColumn":28},{"ruleId":"201","replacedBy":"210"},{"ruleId":"203","replacedBy":"211"},{"ruleId":"205","severity":1,"message":"212","line":2,"column":27,"nodeType":"207","messageId":"208","endLine":2,"endColumn":36},{"ruleId":"205","severity":1,"message":"213","line":5,"column":20,"nodeType":"207","messageId":"208","endLine":5,"endColumn":26},{"ruleId":"205","severity":1,"message":"214","line":6,"column":3,"nodeType":"207","messageId":"208","endLine":6,"endColumn":9},{"ruleId":"205","severity":1,"message":"215","line":7,"column":3,"nodeType":"207","messageId":"208","endLine":7,"endColumn":8},{"ruleId":"205","severity":1,"message":"216","line":8,"column":3,"nodeType":"207","messageId":"208","endLine":8,"endColumn":7},{"ruleId":"205","severity":1,"message":"217","line":9,"column":3,"nodeType":"207","messageId":"208","endLine":9,"endColumn":16},{"ruleId":"205","severity":1,"message":"218","line":24,"column":9,"nodeType":"207","messageId":"208","endLine":24,"endColumn":20},{"ruleId":"205","severity":1,"message":"219","line":17,"column":9,"nodeType":"207","messageId":"208","endLine":17,"endColumn":22},{"ruleId":"205","severity":1,"message":"220","line":2,"column":17,"nodeType":"207","messageId":"208","endLine":2,"endColumn":25},{"ruleId":"201","replacedBy":"221"},{"ruleId":"203","replacedBy":"222"},{"ruleId":"205","severity":1,"message":"223","line":23,"column":7,"nodeType":"207","messageId":"208","endLine":23,"endColumn":16},{"ruleId":"205","severity":1,"message":"224","line":473,"column":11,"nodeType":"207","messageId":"208","endLine":473,"endColumn":17},{"ruleId":"201","replacedBy":"225"},{"ruleId":"203","replacedBy":"226"},{"ruleId":"205","severity":1,"message":"227","line":11,"column":23,"nodeType":"207","messageId":"208","endLine":11,"endColumn":34},{"ruleId":"205","severity":1,"message":"228","line":20,"column":15,"nodeType":"207","messageId":"208","endLine":20,"endColumn":23},{"ruleId":"205","severity":1,"message":"229","line":22,"column":7,"nodeType":"207","messageId":"208","endLine":22,"endColumn":12},{"ruleId":"205","severity":1,"message":"230","line":129,"column":7,"nodeType":"207","messageId":"208","endLine":129,"endColumn":15},{"ruleId":"205","severity":1,"message":"231","line":130,"column":9,"nodeType":"207","messageId":"208","endLine":130,"endColumn":18},{"ruleId":"205","severity":1,"message":"230","line":177,"column":7,"nodeType":"207","messageId":"208","endLine":177,"endColumn":15},{"ruleId":"205","severity":1,"message":"231","line":178,"column":9,"nodeType":"207","messageId":"208","endLine":178,"endColumn":18},{"ruleId":"205","severity":1,"message":"216","line":6,"column":3,"nodeType":"207","messageId":"208","endLine":6,"endColumn":7},{"ruleId":"205","severity":1,"message":"217","line":7,"column":3,"nodeType":"207","messageId":"208","endLine":7,"endColumn":16},{"ruleId":"205","severity":1,"message":"232","line":8,"column":3,"nodeType":"207","messageId":"208","endLine":8,"endColumn":12},{"ruleId":"205","severity":1,"message":"220","line":1,"column":17,"nodeType":"207","messageId":"208","endLine":1,"endColumn":25},{"ruleId":"205","severity":1,"message":"212","line":1,"column":27,"nodeType":"207","messageId":"208","endLine":1,"endColumn":36},{"ruleId":"233","severity":1,"message":"234","line":15,"column":14,"nodeType":"235","messageId":"236","endLine":15,"endColumn":16},{"ruleId":"205","severity":1,"message":"220","line":1,"column":17,"nodeType":"207","messageId":"208","endLine":1,"endColumn":25},{"ruleId":"205","severity":1,"message":"213","line":3,"column":20,"nodeType":"207","messageId":"208","endLine":3,"endColumn":26},{"ruleId":"205","severity":1,"message":"232","line":8,"column":3,"nodeType":"207","messageId":"208","endLine":8,"endColumn":12},{"ruleId":"237","severity":1,"message":"238","line":47,"column":6,"nodeType":"239","endLine":47,"endColumn":8,"suggestions":"240"},{"ruleId":"205","severity":1,"message":"206","line":2,"column":10,"nodeType":"207","messageId":"208","endLine":2,"endColumn":17},{"ruleId":"205","severity":1,"message":"209","line":2,"column":19,"nodeType":"207","messageId":"208","endLine":2,"endColumn":28},{"ruleId":"205","severity":1,"message":"220","line":1,"column":17,"nodeType":"207","messageId":"208","endLine":1,"endColumn":25},{"ruleId":"205","severity":1,"message":"213","line":3,"column":20,"nodeType":"207","messageId":"208","endLine":3,"endColumn":26},{"ruleId":"205","severity":1,"message":"241","line":11,"column":10,"nodeType":"207","messageId":"208","endLine":11,"endColumn":16},{"ruleId":"205","severity":1,"message":"242","line":37,"column":3,"nodeType":"207","messageId":"208","endLine":37,"endColumn":12},{"ruleId":"205","severity":1,"message":"243","line":47,"column":7,"nodeType":"207","messageId":"208","endLine":47,"endColumn":15},{"ruleId":"205","severity":1,"message":"244","line":49,"column":7,"nodeType":"207","messageId":"208","endLine":49,"endColumn":12},{"ruleId":"205","severity":1,"message":"245","line":108,"column":11,"nodeType":"207","messageId":"208","endLine":108,"endColumn":31},{"ruleId":"237","severity":1,"message":"246","line":135,"column":6,"nodeType":"239","endLine":135,"endColumn":8,"suggestions":"247"},{"ruleId":"205","severity":1,"message":"220","line":1,"column":17,"nodeType":"207","messageId":"208","endLine":1,"endColumn":25},{"ruleId":"205","severity":1,"message":"212","line":1,"column":27,"nodeType":"207","messageId":"208","endLine":1,"endColumn":36},{"ruleId":"205","severity":1,"message":"212","line":1,"column":27,"nodeType":"207","messageId":"208","endLine":1,"endColumn":36},{"ruleId":"205","severity":1,"message":"248","line":9,"column":3,"nodeType":"207","messageId":"208","endLine":9,"endColumn":13},{"ruleId":"205","severity":1,"message":"249","line":19,"column":10,"nodeType":"207","messageId":"208","endLine":19,"endColumn":14},{"ruleId":"250","severity":1,"message":"251","line":39,"column":29,"nodeType":"252","messageId":"253","endLine":39,"endColumn":31},{"ruleId":"205","severity":1,"message":"254","line":61,"column":9,"nodeType":"207","messageId":"208","endLine":61,"endColumn":17},{"ruleId":"205","severity":1,"message":"220","line":1,"column":17,"nodeType":"207","messageId":"208","endLine":1,"endColumn":25},{"ruleId":"205","severity":1,"message":"212","line":1,"column":27,"nodeType":"207","messageId":"208","endLine":1,"endColumn":36},{"ruleId":"205","severity":1,"message":"216","line":3,"column":3,"nodeType":"207","messageId":"208","endLine":3,"endColumn":7},{"ruleId":"205","severity":1,"message":"217","line":4,"column":3,"nodeType":"207","messageId":"208","endLine":4,"endColumn":16},{"ruleId":"205","severity":1,"message":"232","line":5,"column":3,"nodeType":"207","messageId":"208","endLine":5,"endColumn":12},{"ruleId":"205","severity":1,"message":"255","line":6,"column":3,"nodeType":"207","messageId":"208","endLine":6,"endColumn":14},{"ruleId":"205","severity":1,"message":"215","line":7,"column":3,"nodeType":"207","messageId":"208","endLine":7,"endColumn":8},{"ruleId":"205","severity":1,"message":"214","line":8,"column":3,"nodeType":"207","messageId":"208","endLine":8,"endColumn":9},{"ruleId":"205","severity":1,"message":"256","line":10,"column":10,"nodeType":"207","messageId":"208","endLine":10,"endColumn":21},{"ruleId":"205","severity":1,"message":"257","line":15,"column":10,"nodeType":"207","messageId":"208","endLine":15,"endColumn":26},{"ruleId":"205","severity":1,"message":"254","line":27,"column":7,"nodeType":"207","messageId":"208","endLine":27,"endColumn":15},{"ruleId":"205","severity":1,"message":"212","line":1,"column":27,"nodeType":"207","messageId":"208","endLine":1,"endColumn":36},{"ruleId":"205","severity":1,"message":"216","line":4,"column":3,"nodeType":"207","messageId":"208","endLine":4,"endColumn":7},{"ruleId":"205","severity":1,"message":"217","line":5,"column":3,"nodeType":"207","messageId":"208","endLine":5,"endColumn":16},{"ruleId":"205","severity":1,"message":"255","line":7,"column":3,"nodeType":"207","messageId":"208","endLine":7,"endColumn":14},{"ruleId":"205","severity":1,"message":"215","line":8,"column":3,"nodeType":"207","messageId":"208","endLine":8,"endColumn":8},{"ruleId":"205","severity":1,"message":"214","line":9,"column":3,"nodeType":"207","messageId":"208","endLine":9,"endColumn":9},{"ruleId":"205","severity":1,"message":"258","line":26,"column":10,"nodeType":"207","messageId":"208","endLine":26,"endColumn":17},{"ruleId":"205","severity":1,"message":"254","line":36,"column":9,"nodeType":"207","messageId":"208","endLine":36,"endColumn":17},{"ruleId":"237","severity":1,"message":"259","line":90,"column":6,"nodeType":"239","endLine":90,"endColumn":8,"suggestions":"260"},{"ruleId":"237","severity":1,"message":"261","line":591,"column":6,"nodeType":"239","endLine":591,"endColumn":8,"suggestions":"262"},"no-native-reassign",["263"],"no-negated-in-lhs",["264"],"no-unused-vars","'getData' is defined but never used.","Identifier","unusedVar","'getFsData' is defined but never used.",["263"],["264"],"'useEffect' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'useRouteMatch' is defined but never used.","'itineraryId' is assigned a value but never used.","'handleAddCard' is assigned a value but never used.","'useState' is defined but never used.",["263"],["264"],"'defaultID' is assigned a value but never used.","'source' is assigned a value but never used.",["263"],["264"],"'useDispatch' is defined but never used.","'setLogin' is assigned a value but never used.","'match' is assigned a value but never used.","'location' is assigned a value but never used.","'projectId' is assigned a value but never used.","'useParams' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleAddProject', 'handleModifyProject', 'handleRemoveProject', and 'userId'. Either include them or remove the dependency array.","ArrayExpression",["265"],"'nanoid' is defined but never used.","'initCards' is defined but never used.","'projects' is assigned a value but never used.","'cards' is assigned a value but never used.","'unsubscribeToDayplan' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'handleAddCard', 'handleAddDayplan', 'handleAddMember', 'handleModifyCard', 'handleModifyDayplan', 'handleModifyMember', 'handleRemoveCard', 'handleRemoveDayplan', 'handleRemoveMember', and 'projectId'. Either include them or remove the dependency array.",["266"],"'useHistory' is defined but never used.","'wait' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'dispatch' is assigned a value but never used.","'useLocation' is defined but never used.","'useSelector' is defined but never used.","'editProjectTitle' is defined but never used.","'current' is defined but never used.","React Hook useEffect has missing dependencies: 'cardId' and 'handleAddLink'. Either include them or remove the dependency array.",["267"],"React Hook useEffect has missing dependencies: 'cardId' and 'handleAdd'. Either include them or remove the dependency array.",["268"],"no-global-assign","no-unsafe-negation",{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},"Update the dependencies array to be: [handleAddProject, handleModifyProject, handleRemoveProject, userId]",{"range":"277","text":"278"},"Update the dependencies array to be: [dispatch, handleAddCard, handleAddDayplan, handleAddMember, handleModifyCard, handleModifyDayplan, handleModifyMember, handleRemoveCard, handleRemoveDayplan, handleRemoveMember, projectId]",{"range":"279","text":"280"},"Update the dependencies array to be: [cardId, handleAddLink]",{"range":"281","text":"282"},"Update the dependencies array to be: [cardId, handleAdd]",{"range":"283","text":"284"},[1160,1162],"[handleAddProject, handleModifyProject, handleRemoveProject, userId]",[3166,3168],"[dispatch, handleAddCard, handleAddDayplan, handleAddMember, handleModifyCard, handleModifyDayplan, handleModifyMember, handleRemoveCard, handleRemoveDayplan, handleRemoveMember, projectId]",[1913,1915],"[cardId, handleAddLink]",[14996,14998],"[cardId, handleAdd]"]