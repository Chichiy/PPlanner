[{"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/serviceWorker.js":"1","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/firebase/Config.js":"2","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/store.js":"3","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/index.js":"4","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Landing/Landing.jsx":"5","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/App/App.jsx":"6","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Projects/Project.jsx":"7","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/slices/projectsSlice.js":"8","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Projects/Projects.jsx":"9","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/Navbar.jsx":"10","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/slices/cardSlice.js":"11","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/slices/userSlice.js":"12","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/slices/itinerarySlice.js":"13","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/CardBoard/CardBoard.jsx":"14","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/CardBoard/LargeCard.jsx":"15","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/CardBoard/SmallCard.jsx":"16","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/ItineraryBoard/CardList.jsx":"17","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/slices/dayplanSlice.js":"18","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/utils/itineraryBoardLib.js":"19","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/CardBoard/Tags.jsx":"20","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/slices/membersSlice.js":"21","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/ItineraryBoard/ItineraryBoard.jsx":"22","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/ItineraryBoard/Dayplans.jsx":"23","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/utils/lib.js":"24","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/BoardSelect.jsx":"25","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/CardSelect.jsx":"26","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/DaySelect.jsx":"27","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/InvitationButton.jsx":"28","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/ProjectTitle.jsx":"29","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/UserButton.jsx":"30","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Popup/Popup.jsx":"31","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/FeatureBar.jsx":"32","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Popup/SignIn.jsx":"33","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Popup/JoinProject.jsx":"34","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/App/CheckUser.jsx":"35"},{"size":4934,"mtime":1606275674064,"results":"36","hashOfConfig":"37"},{"size":18169,"mtime":1608878235775,"results":"38","hashOfConfig":"37"},{"size":575,"mtime":1609231022727,"results":"39","hashOfConfig":"37"},{"size":403,"mtime":1609219622655,"results":"40","hashOfConfig":"37"},{"size":2566,"mtime":1609224898551,"results":"41","hashOfConfig":"37"},{"size":693,"mtime":1609259147053,"results":"42","hashOfConfig":"37"},{"size":3855,"mtime":1609260176735,"results":"43","hashOfConfig":"37"},{"size":1916,"mtime":1609227029599,"results":"44","hashOfConfig":"37"},{"size":6591,"mtime":1609260302051,"results":"45","hashOfConfig":"37"},{"size":1527,"mtime":1609290859420,"results":"46","hashOfConfig":"37"},{"size":3169,"mtime":1609227058275,"results":"47","hashOfConfig":"37"},{"size":2204,"mtime":1609227183768,"results":"48","hashOfConfig":"37"},{"size":536,"mtime":1609232884652,"results":"49","hashOfConfig":"37"},{"size":3054,"mtime":1609232981139,"results":"50","hashOfConfig":"37"},{"size":26202,"mtime":1609233154327,"results":"51","hashOfConfig":"37"},{"size":7907,"mtime":1609232728834,"results":"52","hashOfConfig":"37"},{"size":7893,"mtime":1609233339175,"results":"53","hashOfConfig":"37"},{"size":3578,"mtime":1609227127652,"results":"54","hashOfConfig":"37"},{"size":5512,"mtime":1609233294461,"results":"55","hashOfConfig":"37"},{"size":7101,"mtime":1609307423934,"results":"56","hashOfConfig":"37"},{"size":1844,"mtime":1609227195037,"results":"57","hashOfConfig":"37"},{"size":6876,"mtime":1609233316386,"results":"58","hashOfConfig":"37"},{"size":15854,"mtime":1609233087929,"results":"59","hashOfConfig":"37"},{"size":3445,"mtime":1609254175806,"results":"60","hashOfConfig":"37"},{"size":1095,"mtime":1609254945353,"results":"61","hashOfConfig":"37"},{"size":2690,"mtime":1609258941895,"results":"62","hashOfConfig":"37"},{"size":3610,"mtime":1609254583442,"results":"63","hashOfConfig":"37"},{"size":1556,"mtime":1609256902025,"results":"64","hashOfConfig":"37"},{"size":1467,"mtime":1609256585868,"results":"65","hashOfConfig":"37"},{"size":1083,"mtime":1609255461706,"results":"66","hashOfConfig":"37"},{"size":2509,"mtime":1609294673105,"results":"67","hashOfConfig":"37"},{"size":1170,"mtime":1609258657626,"results":"68","hashOfConfig":"37"},{"size":1639,"mtime":1609292042780,"results":"69","hashOfConfig":"37"},{"size":2328,"mtime":1609293140679,"results":"70","hashOfConfig":"37"},{"size":1191,"mtime":1609295577205,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"19e0as4",{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"74"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"122"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"122"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/serviceWorker.js",[],["151","152"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/firebase/Config.js",["153","154","155","156"],"import firebase from \"firebase/app\"\nimport \"firebase/analytics\"\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAxbnsUNTG2SYqUsC2QqIbBo1OLuKXeZ-g\",\n  authDomain: \"pplanner-bfb1a.firebaseapp.com\",\n  databaseURL: \"https://pplanner-bfb1a.firebaseio.com\",\n  projectId: \"pplanner-bfb1a\",\n  storageBucket: \"pplanner-bfb1a.appspot.com\",\n  messagingSenderId: \"501383303118\",\n  appId: \"1:501383303118:web:a6c81e2be82826845e659f\",\n  measurementId: \"G-FETYRNE2VX\",\n}\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig)\n\n//abbreviation\nvar db = firebase.firestore()\nvar au = firebase.auth()\nexport const toDate = firebase.firestore.Timestamp.toDate\n\n////////////////////////////////////\n//          user-related          //\n////////////////////////////////////\n\nexport const checkUserStatus = (handleUser, handleNoUser) => {\n  au.onAuthStateChanged(function (user) {\n    if (user) {\n      // User is signed in.\n      handleUser(user)\n    } else {\n      // No user is signed in.\n      handleNoUser()\n    }\n  })\n}\n\nexport const signUp_Native = (input, handleSuccess) => {\n  au.createUserWithEmailAndPassword(input.email, input.password)\n    .then((result) => {\n      let user = result.user\n      let docRef = db.collection(\"users\").doc(user.uid)\n\n      let update = {\n        name: input.name,\n        email: user.email,\n        picture: user.photoURL,\n      }\n      docRef.set(update).catch(function (error) {\n        console.error(\"Error adding document: \", error)\n      })\n    })\n    .then((res) => {\n      handleSuccess()\n    })\n    .catch((error) => {\n      var errorCode = error.code\n      var errorMessage = error.message\n      alert(errorMessage)\n      // ..\n    })\n}\n\nexport const signIn_Native = (input, handleSuccess) => {\n  return au\n    .signInWithEmailAndPassword(input.email, input.password)\n    .then((user) => {\n      // Signed in\n      // ...\n      handleSuccess()\n    })\n    .catch((error) => {\n      var errorCode = error.code\n      var errorMessage = error.message\n      alert(errorMessage)\n    })\n}\n\nexport const signOut = (redirect) => {\n  return au\n    .signOut()\n    .then(function () {\n      // Sign-out successful.\n      redirect()\n    })\n    .catch(function (error) {\n      // An error happened.\n    })\n}\n\nexport const addProjectInUser_Fs = (userId, change) => {\n  let docRef = db.collection(\"users\").doc(userId)\n  //expect format\n  //change = projectId\n\n  return docRef\n    .update({\n      projects: firebase.firestore.FieldValue.arrayUnion(change),\n    })\n    .catch(function (error) {\n      console.error(\"Error updating document: \", error)\n    })\n}\n\n//////listening to cloud data///////\nexport const listenToUser = (userId, updateState) => {\n  let unsubscribe = db\n    .collection(\"users\")\n    .doc(userId)\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      let data = snapshot.data()\n      data.id = snapshot.id\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n      // console.log(source, snapshot, data)\n      updateState(data)\n    })\n  return unsubscribe\n}\n\nexport const listenToMembers = (\n  projectId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"users\")\n    .where(\"projects\", \"array-contains\", projectId)\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      // console.log(source, snapshot, docChange)\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n\n          //add id to data\n          data.id = id\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\nexport const listenToProjects = (\n  userId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"projects\")\n    .where(\"members\", \"array-contains\", userId)\n    .orderBy(\"created_time\", \"desc\")\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n\n          //add id to data\n          data.id = id\n          //conver time object to string\n          data.created_time = data.created_time.toDate().toString()\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\nexport const listenToDayplans = (\n  itineraryId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"dayplans\")\n    .where(\"itinerary_id\", \"==\", itineraryId)\n    .orderBy(\"date\", \"asc\")\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n\n          //add id to data\n          data.id = id\n          //conver time object to string\n          data.date = data.date.toDate().toString()\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\nexport const listenToCard = (\n  projectId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"projects\")\n    .doc(projectId)\n    .collection(\"cards\")\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n\n          // console.log(source, type, id, data)\n          //add id to data\n          data.id = id\n\n          if (data.start_time) {\n            //conver time object to string\n            data.start_time = data.start_time.toDate().toString()\n            data.end_time = data.end_time.toDate().toString()\n          }\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\nexport const listenToComments = (\n  cardId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"comments\")\n    .where(\"card_id\", \"==\", cardId)\n    .orderBy(\"date\", \"asc\")\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n          // console.log(source, type, id, data)\n\n          //add id to data\n          data.id = id\n          //conver time object to string\n          data.date = data.date.toDate().toString()\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n        // console.log(\"comments\")\n      }\n    })\n  return unsubscribe\n}\n\nexport const listenToLinks = (\n  cardId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"links\")\n    .where(\"card_id\", \"==\", cardId)\n    .orderBy(\"date\", \"asc\")\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      // console.log(source, snapshot, docChange)\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n          // console.log(source, type, id, data)\n\n          //add id to data\n          data.id = id\n          //conver time object to string\n          data.date = data.date.toDate().toString()\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\n//////update cloud data//////\n\n//basic function\nexport const update = (collection, doc, fileds) => {\n  let docRef = db.collection(collection).doc(doc)\n\n  return docRef\n    .update(fileds)\n    .then(function () {\n      console.log(\"Document successfully updated!\")\n    })\n    .then(docRef.update({ onChange: \"\" }))\n    .catch(function (error) {\n      // The document probably doesn't exist.\n      console.error(\"Error updating document: \", error)\n    })\n}\n\n//update project title in nav bar\n\nexport const addProject_Fs = (input) => {\n  let docRef = db.collection(\"projects\")\n\n  return docRef.add(input).catch(function (error) {\n    console.error(\"Error adding document: \", error)\n  })\n}\n\nexport const updateProject_Fs = (projectId, change) => {\n  let docRef = db.collection(\"projects\").doc(projectId)\n\n  return docRef.update(change).catch(function (error) {\n    console.error(\"Error updating document: \", error)\n  })\n}\n\nexport const updateProjectMember_Fs = (projectId, type, targetUserId) => {\n  let docRef = db.collection(\"projects\").doc(projectId)\n  let change\n\n  if (type === \"add\") {\n    change = {\n      members: firebase.firestore.FieldValue.arrayUnion(targetUserId),\n    }\n  }\n  if (type === \"remove\") {\n    change = {\n      members: firebase.firestore.FieldValue.arrayRemove(targetUserId),\n    }\n  }\n\n  return docRef.update(change).catch(function (error) {\n    console.error(\"Error updating document: \", error)\n  })\n}\n\nexport const removeProject_Fs = (projectId) => {\n  let docRef = db.collection(\"projects\").doc(projectId)\n\n  return docRef.delete().catch(function (error) {\n    console.error(\"Error deleting document: \", error)\n  })\n}\n\n//////cards related//////\nexport const AddCard_Fs = (projectId, input) => {\n  let docRef = db.collection(\"projects\").doc(projectId).collection(\"cards\")\n\n  return docRef.add(input).catch(function (error) {\n    console.error(\"Error adding document: \", error)\n  })\n}\n\nexport const updateCard_Fs = (projectId, cardId, change) => {\n  // expected format:\n  // let change = {\n  //   title: input,\n  // }\n\n  let docRef = db\n    .collection(\"projects\")\n    .doc(projectId)\n    .collection(\"cards\")\n    .doc(cardId)\n\n  return docRef.update(change).catch(function (error) {\n    console.error(\"Error updating document: \", error)\n  })\n}\n\nexport const removeCard_Fs = (projectId, cardId) => {\n  let docRef = db\n    .collection(\"projects\")\n    .doc(projectId)\n    .collection(\"cards\")\n    .doc(cardId)\n\n  return docRef.delete().catch(function (error) {\n    console.error(\"Error deleting document: \", error)\n  })\n}\n\nexport const getCommentsNumber_Fs = (cardId) => {\n  return db\n    .collection(\"comments\")\n    .where(\"card_id\", \"==\", cardId)\n    .get()\n    .then(function (querySnapshot) {\n      let temp = []\n      querySnapshot.forEach(function (doc) {\n        temp.push(doc.data())\n      })\n      return temp.length\n    })\n\n    .catch(function (error) {\n      console.log(\"Error getting documents: \", error)\n    })\n}\n\nexport const addComment_Fs = (input) => {\n  // expected format:\n  // let input = {\n  // card_id: cardId,\n  // sender_id: userId,\n  // content: pending,\n  // date: date object,\n  // }\n\n  let docRef = db.collection(\"comments\")\n\n  return docRef.add(input).catch(function (error) {\n    console.error(\"Error adding document: \", error)\n  })\n}\n\nexport const updateComment_Fs = (commentId, change) => {\n  // expected format:\n  // let change = {\n  //   content: input,\n  // }\n\n  let docRef = db.collection(\"comments\").doc(commentId)\n\n  return docRef.update(change).catch(function (error) {\n    console.error(\"Error updating document: \", error)\n  })\n}\n\nexport const removeComment_Fs = (commentId) => {\n  let docRef = db.collection(\"comments\").doc(commentId)\n\n  return docRef.delete().catch(function (error) {\n    console.error(\"Error deleting document: \", error)\n  })\n}\n\nexport const getLinksNumber_Fs = (cardId) => {\n  return db\n    .collection(\"links\")\n    .where(\"card_id\", \"==\", cardId)\n    .get()\n    .then(function (querySnapshot) {\n      let temp = []\n      querySnapshot.forEach(function (doc) {\n        temp.push(doc.data())\n      })\n      return temp.length\n    })\n\n    .catch(function (error) {\n      console.log(\"Error getting documents: \", error)\n    })\n}\n\nexport const addLink_Fs = (input) => {\n  // expected format:\n  // let input = {\n  // card_id: cardId,\n  // url: url,\n  // title: string,\n  // date: date object,\n  // }\n\n  let docRef = db.collection(\"links\")\n\n  return docRef.add(input).catch(function (error) {\n    console.error(\"Error adding document: \", error)\n  })\n}\n\nexport const updateLink_Fs = (linkId, change) => {\n  // expected format:\n  // let change = {\n  //   title: input,\n  // }\n\n  let docRef = db.collection(\"links\").doc(linkId)\n\n  return docRef.update(change).catch(function (error) {\n    console.error(\"Error updating document: \", error)\n  })\n}\n\nexport const removeLink_Fs = (linkId) => {\n  let docRef = db.collection(\"links\").doc(linkId)\n\n  return docRef.delete().catch(function (error) {\n    console.error(\"Error deleting document: \", error)\n  })\n}\n\n//get info once\n\nexport const getProject_Fs = (projectId) => {\n  let docRef = db.collection(\"projects\").doc(projectId)\n\n  return docRef\n    .get()\n    .then(function (doc) {\n      return doc.data()\n    })\n    .catch(function (error) {\n      console.log(\"Error getting document:\", error)\n    })\n}\n\nexport const addDayplan_Fs = (input) => {\n  let docRef = db.collection(\"dayplans\")\n\n  return docRef\n    .add(input)\n    .then(function (newDayplan) {\n      newDayplan.update({\n        id: newDayplan.id,\n      })\n    })\n    .catch(function (error) {\n      console.error(\"Error adding document: \", error)\n    })\n}\n\nexport function getFsData_Itinerary(project_id, field, operators, value) {\n  return db\n    .collection(\"projects\")\n    .doc(project_id)\n    .collection(\"itineraries\")\n    .orderBy(\"created_time\", \"desc\") //get the latest version of itineray\n    .limit(1)\n    .get()\n    .then(function (querySnapshot) {\n      let temp\n      querySnapshot.forEach(function (doc) {\n        temp = doc.data()\n      })\n      return temp\n    })\n    .then((res) => {\n      //conver time object to string\n      res.created_time = res.created_time.toDate().toString()\n      return res\n    })\n    .catch(function (error) {\n      console.log(\"Error getting documents: \", error)\n    })\n}\n\n//not sure what to do\n\nexport const listenToData = (callback) => {\n  db.collection(\"test\")\n    .doc(\"2eddU3pn48Llu7Ji60Nz\")\n    .onSnapshot(function (doc) {\n      var source = doc.metadata.hasPendingWrites ? \"Local\" : \"Server\"\n      let data = doc.data()\n      callback(data)\n    })\n}\n\nexport const updateCards = (projectId, cardId, changes) => {\n  let docRef = db\n    .collection(\"project\")\n    .doc(projectId)\n    .collection(\"cards\")\n    .doc(cardId)\n\n  return (\n    docRef\n      .update(changes)\n      .then(function () {\n        console.log(\"Document successfully updated!\")\n      })\n      // .then(docRef.update({ onChange: \"\" }))\n      .catch(function (error) {\n        // The document probably doesn't exist.\n        console.error(\"Error updating document: \", error)\n      })\n  )\n}\n\nexport const updateSchedule = (dayplanId, changes) => {\n  let docRef = db.collection(\"dayplans\").doc(dayplanId)\n\n  return (\n    docRef\n      .update({ schedule: changes })\n      .then(function () {\n        console.log(\"Document successfully updated!\")\n      })\n      // .then(docRef.update({ onChange: \"\" }))\n      .catch(function (error) {\n        // The document probably doesn't exist.\n        console.error(\"Error updating document: \", error)\n      })\n  )\n}\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/store.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/index.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Landing/Landing.jsx",[],["157","158"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/App/App.jsx",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Projects/Project.jsx",["159","160","161","162","163"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/slices/projectsSlice.js",["164","165"],"import { createSlice } from \"@reduxjs/toolkit\"\nimport { getData, getFsData } from \"../../firebase/Config\"\n\nexport const projectsSlice = createSlice({\n  name: \"projects\",\n  initialState: [],\n  reducers: {\n    addProjects: (state, action) => {\n      let target = action.payload\n\n      //prevent repeatly adding\n      if (state.findIndex((project) => project.id === target.id) < 0) {\n        state.push(target)\n      }\n    },\n    removeProjects: (state, action) => {\n      let target = action.payload\n      let index = state.findIndex((project) => project.id === target.id)\n      state.splice(index, 1)\n    },\n    modifyProjects: (state, action) => {\n      let target = action.payload\n      let index = state.findIndex((project) => project.id === target.id)\n      state.splice(index, 1, target)\n    },\n\n    editProjectTitle: (state, action) => {\n      let target = state.find(\n        (project) => project.id === action.payload.projectId\n      )\n      target.title = action.payload.newTitle\n    },\n  },\n})\n\nexport const {\n  addProjects,\n  removeProjects,\n  modifyProjects,\n  editProjectTitle,\n} = projectsSlice.actions\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount))\n//   }, 1000)\n// }\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.projects.value)`\n// export const selectCount = (state) => state.projects.value\n\nexport default projectsSlice.reducer\n",["166","167"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Projects/Projects.jsx",["168","169","170","171","172","173","174","175"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/Navbar.jsx",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/slices/cardSlice.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/slices/userSlice.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/slices/itinerarySlice.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/CardBoard/CardBoard.jsx",["176","177"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/CardBoard/LargeCard.jsx",["178","179","180","181"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/CardBoard/SmallCard.jsx",["182","183"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/ItineraryBoard/CardList.jsx",["184"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/slices/dayplanSlice.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/utils/itineraryBoardLib.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/CardBoard/Tags.jsx",["185"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/slices/membersSlice.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/ItineraryBoard/ItineraryBoard.jsx",["186","187","188","189","190","191","192","193"],"//tools\nimport React, { useState, useEffect } from \"react\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n} from \"react-router-dom\"\nimport { DragDropContext } from \"react-beautiful-dnd\"\n\n//components and scss\n\nimport CardList from \"./CardList\"\nimport Dayplans from \"./Dayplans\"\nimport styles from \"./ItineraryBoard.module.scss\"\n\n//functions\nimport { OnDragEnd } from \"../../utils/itineraryBoardLib\"\nimport { updateCard_Fs } from \"../../firebase/Config\"\nimport {\n  modifyCardProperties,\n  updateCardsOrder,\n} from \"../../app/slices/cardSlice\"\nimport LargeCard from \"../CardBoard/LargeCard\"\n\nconst ItineraryBoard = () => {\n  const { itineraryId, projectId } = useParams()\n\n  console.log(\"rerender!!!!!\")\n  //needed state\n  const itinerary = useSelector((state) => state.itinerary)\n  // const dayplans = useSelector((state) => state.dayplans)\n  const cards = useSelector((state) => state.cards)\n\n  const [filterMethod] = useState(\"status\")\n\n  const filterCards = (filterMethod) => {\n    switch (filterMethod) {\n      case \"noPlan\": {\n        return cards.filter((card) => card.status === 0)\n      }\n\n      case \"withPlan\": {\n        return cards.filter((card) => card.status === 1)\n      }\n\n      case \"noFilter\": {\n        return cards\n      }\n\n      default: {\n        return cards\n      }\n    }\n  }\n\n  // //register needed dispatch\n  const dispatch = useDispatch()\n\n  const handleOnDragEnd = (result) => {\n    // OnDragEnd(dispatch, result, itinerary, filterCards)\n\n    //define type\n    let type\n    let sou = result.source.droppableId\n    let des = result.destination.droppableId\n\n    if (sou === \"cardsList\" && des === \"cardsList\") {\n      type = \"reorderCards\"\n    }\n    if (sou === \"cardsList\" && des !== \"cardsList\") {\n      type = \"addAppointment\"\n    }\n    if (sou === \"appointments\" && des !== \"cardsList\") {\n      type = \"rescheduleAppointment\"\n    }\n    if (sou === \"appointments\" && des === \"cardsList\") {\n      type = \"removeAppointment\"\n    }\n\n    switch (type) {\n      case \"reorderCards\": {\n        //check if change\n        if (result.source.index === result.destination.index) {\n          break\n        }\n\n        let destinationId = filterCards(\"noPlan\")[result.destination.index].id\n        let updateAction = updateCardsOrder({\n          type: \"cardsList\",\n          result: result,\n          destinationId: destinationId,\n        })\n        dispatch(updateAction)\n\n        let change = {\n          isDragging: false,\n        }\n        //update to cloud database\n        updateCard_Fs(projectId, result.draggableId, change)\n        break\n      }\n\n      case \"rescheduleAppointment\": {\n        //get target item\n        let targetCardId = result.draggableId\n        let target = cards.find((card) => card.id === targetCardId)\n\n        //get original data\n        let startTime = new Date(target.start_time)\n        let endTime = new Date(target.end_time)\n        let timeSpan = endTime.getTime() - startTime.getTime()\n\n        //get new data\n        let newStartTime = new Date()\n        newStartTime.setTime(result.destination.droppableId)\n        let newEndTime = new Date()\n        newEndTime.setTime(newStartTime.getTime() + timeSpan)\n\n        //check if change\n        if (\n          startTime.getTime() === newStartTime.getTime() &&\n          endTime.getTime() === newEndTime.getTime()\n        ) {\n          //prepare changes\n          let change = {\n            isDragging: false,\n          }\n\n          //update to cloud database to cancel isDragging\n          updateCard_Fs(projectId, targetCardId, change)\n          break\n        }\n\n        //prepare changes\n        let change = {\n          start_time: newStartTime,\n          end_time: newEndTime,\n          isDragging: false,\n        }\n        let convertedChange = {\n          start_time: newStartTime.toString(),\n          end_time: newEndTime.toString(),\n          isDragging: false,\n        }\n\n        //update locally first\n        dispatch(\n          modifyCardProperties({ change: convertedChange, id: targetCardId })\n        )\n        //update to cloud database\n        updateCard_Fs(projectId, targetCardId, change)\n        break\n      }\n\n      case \"addAppointment\": {\n        //get target item\n        let targetCardId = result.draggableId\n\n        //get new data\n        let newStartTime = new Date()\n        newStartTime.setTime(result.destination.droppableId)\n        let newEndTime = new Date()\n        newEndTime.setTime(newStartTime.getTime() + 60 * 60 * 1000)\n\n        //prepare changes\n        let change = {\n          status: 1,\n          start_time: newStartTime,\n          end_time: newEndTime,\n          isDragging: false,\n        }\n        let convertedChange = {\n          status: 1,\n          start_time: newStartTime.toString(),\n          end_time: newEndTime.toString(),\n          isDragging: false,\n        }\n\n        //update locally first\n        dispatch(\n          modifyCardProperties({ change: convertedChange, id: targetCardId })\n        )\n        //update to cloud database\n        updateCard_Fs(projectId, targetCardId, change)\n\n        break\n      }\n\n      case \"removeAppointment\": {\n        //get target item\n        let targetCardId = result.draggableId\n\n        //prepare changes\n        let change = {\n          status: 0,\n          start_time: null,\n          end_time: null,\n          isDragging: false,\n        }\n        let convertedChange = {\n          status: 0,\n          start_time: null,\n          end_time: null,\n          isDragging: false,\n        }\n\n        //update locally first\n        dispatch(\n          modifyCardProperties({ change: convertedChange, id: targetCardId })\n        )\n        //update to cloud database\n        updateCard_Fs(projectId, targetCardId, change)\n\n        break\n      }\n\n      default: {\n        console.log(\"something wrong when drag and drop\")\n        break\n      }\n    }\n  }\n\n  const user = useSelector((state) => state.user)\n\n  const handleOnDragStart = (result) => {\n    //register dragger's info on cloud data to prevent re-writes\n    let targetCardId = result.draggableId\n    let userId = user.id\n\n    //prepare changes\n    let change = {\n      isDragging: userId,\n    }\n    let convertedChange = {\n      isDragging: userId,\n    }\n\n    //update to cloud database with blocking listening again\n    updateCard_Fs(projectId, targetCardId, change)\n  }\n\n  const match = useRouteMatch()\n  return (\n    <div className={styles.view}>\n      <DragDropContext\n        onDragStart={handleOnDragStart}\n        onDragEnd={handleOnDragEnd}\n      >\n        <CardList cards={filterCards(\"noPlan\")} />\n        <Dayplans />\n      </DragDropContext>\n\n      <Switch>\n        <Route path={`${match.path}/:cardId`}>\n          <LargeCard />\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nexport default ItineraryBoard\n",["194","195"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/ItineraryBoard/Dayplans.jsx",["196","197","198"],"// tools\nimport React, { useState, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { nanoid } from \"nanoid\"\nimport { Draggable, Droppable } from \"react-beautiful-dnd\"\nimport {\n  Link,\n  useRouteMatch,\n  useParams,\n  useLocation,\n  Route,\n  Switch,\n  useHistory,\n} from \"react-router-dom\"\n\n//components and scss\nimport styles from \"./ItineraryBoard.module.scss\"\n\nimport DayJS from \"react-dayjs\"\nimport { getDateHeader, colorCode, resetTime, getColor } from \"../../utils/lib\"\nimport { responsiveTime } from \"../../utils/itineraryBoardLib\"\nimport { modifyCardProperties } from \"../../app/slices/cardSlice\"\nimport { updateCard_Fs } from \"../../firebase/Config\"\n\nconst Dayplans = () => {\n  //set start time\n  const cards = useSelector((state) => state.cards)\n  const location = useLocation()\n  let startDate\n  try {\n    //get startTime from navbar through state in loaction\n    startDate = location.state.startDate\n  } catch {\n    //if no, show today\n    let temp = new Date()\n    temp.setHours(0)\n    temp.setMinutes(0)\n    temp.setSeconds(0)\n    temp.setMilliseconds(0)\n    startDate = temp\n  }\n\n  //expand edit feature\n  const { projectId } = useParams()\n  const [isExpanding, setExpanding] = useState(false)\n  const dispatch = useDispatch()\n\n  const handleExpandStart = (e) => {\n    if (e.target.ariaLabel === \"lower\") {\n      setExpanding(e.target.dataset.cardid)\n    }\n  }\n\n  const handleExpandEnd = () => {\n    //check if isExpanding\n    if (isExpanding) {\n      //get target size and position\n      let targetCardId = isExpanding\n      let target = document.querySelector(`[data-displayid=\"${targetCardId}\"]`)\n      let targetHeight = target.getBoundingClientRect().height\n\n      //per 30 mins\n      let timeSpan =\n        targetHeight % 20 < 11\n          ? Math.floor(targetHeight / 20)\n          : Math.ceil(targetHeight / 20)\n\n      //get original data\n      let targetData = cards.find((card) => card.id === targetCardId)\n      let startTime = new Date(targetData.start_time)\n      let newEndTime = new Date(startTime.getTime() + timeSpan * 30 * 60 * 1000)\n\n      //prepare changes\n      let change = {\n        end_time: newEndTime,\n      }\n      let convertedChange = {\n        end_time: newEndTime.toString(),\n      }\n\n      //update locally first\n      dispatch(\n        modifyCardProperties({ change: convertedChange, id: targetCardId })\n      )\n      //update to cloud database\n      updateCard_Fs(projectId, targetCardId, change)\n\n      //turn off listening\n      setExpanding(false)\n    }\n  }\n\n  const handlePosition = (e) => {\n    //listen to mousemove\n    if (isExpanding) {\n      //mouse position\n      let mousePosition = e.clientY\n\n      //get target size and position\n      let targetId = isExpanding\n      let target = document.querySelector(`[data-displayid=\"${targetId}\"]`)\n      let targetPosition = target.getBoundingClientRect()\n\n      //new height (10px for buffer)\n      let rawHeight = mousePosition - targetPosition.top + 10\n\n      let timeSpan =\n        rawHeight % 20 < 11\n          ? Math.floor(rawHeight / 20)\n          : Math.ceil(rawHeight / 20)\n      let newHeight = timeSpan * 20\n\n      //at least need to be longer than 20px (30mins)\n      if (newHeight > 19) {\n        target.style.height = `${newHeight}px`\n      }\n\n      //update end time display\n      let endTimeElement = target.querySelector(\n        `time[aria-label=\"expandEndTime\"]`\n      )\n      let startTime = new Date(\n        cards.find((card) => card.id === targetId).start_time\n      )\n      let newEndTime = new Date(startTime.getTime() + timeSpan * 30 * 60 * 1000)\n\n      endTimeElement.textContent = `${\n        newEndTime.getHours() < 10\n          ? `0${newEndTime.getHours()}`\n          : newEndTime.getHours()\n      }:${newEndTime.getMinutes() < 30 ? `00` : \"30\"}`\n    }\n  }\n\n  return (\n    <div id=\"itineraryBoard\" className={styles.itineraryBoard}>\n      <TimeTable\n        startDate={startDate}\n        cards={cards}\n        handleExpandEnd={handleExpandEnd}\n        handlePosition={handlePosition}\n      />\n      <Appointments\n        startDate={startDate}\n        cards={cards}\n        isExpanding={isExpanding}\n        handleExpandStart={handleExpandStart}\n        handleExpandEnd={handleExpandEnd}\n        handlePosition={handlePosition}\n      />\n    </div>\n  )\n}\n\nexport default Dayplans\n\n////// Appointment //////\nconst Appointments = React.memo(\n  ({\n    startDate,\n    cards,\n    isExpanding,\n    handleExpandStart,\n    handleExpandEnd,\n    handlePosition,\n  }) => {\n    const cardHasPlan = cards.filter((card) => card.status === 1)\n\n    //display responsive time on appointment card\n    const time = (card, snapshot) => {\n      let hoverTime = new Date(Number(snapshot.draggingOver))\n      let timeSpan = new Date(card.end_time) - new Date(card.start_time)\n      let hoverEndTime = new Date(hoverTime.getTime() + timeSpan)\n\n      if (!snapshot.isDragging) {\n        return (\n          <div className={styles.appointment_time}>\n            <DayJS format=\"HH:mm\">{card.start_time}</DayJS>\n            <span>-</span>\n            <DayJS format=\"HH:mm\">{card.end_time}</DayJS>\n          </div>\n        )\n      } else {\n        return (\n          <div className={styles.appointment_time}>\n            {isNaN(hoverTime.getHours()) ? null : (\n              <div>\n                <time>\n                  {hoverTime.getHours()}:\n                  {hoverTime.getMinutes() < 30 ? \"00\" : \"30\"}\n                </time>\n\n                <span>-</span>\n\n                <time>\n                  {hoverEndTime.getHours()}:\n                  {hoverEndTime.getMinutes() < 30 ? \"00\" : \"30\"}\n                </time>\n              </div>\n            )}\n          </div>\n        )\n      }\n    }\n\n    const style = (card, snapshot, provided, type) => {\n      let day = new Date(card.start_time)\n      let dayIndex = Math.floor((day - startDate) / 24 / 60 / 60 / 1000)\n\n      let startTime = day.getHours() * 2 + (day.getMinutes() >= 30 ? 1 : 0) + 1\n\n      let endTime = new Date(card.end_time)\n      let timeSpan = Math.ceil((endTime.getTime() - day.getTime()) / 60000 / 30)\n      let temp\n      let appointments\n      let resize\n      let resizeWidth\n\n      //resize when view change\n      try {\n        appointments = document\n          .querySelector(\"#appointments\")\n          .getBoundingClientRect()\n        resize = appointments.width * 0.055 < 45\n        resizeWidth = (appointments.width - 45) / 7\n      } catch {\n        resize = false\n      }\n\n      switch (type) {\n        case \"sensor\": {\n          // temp = {\n          //   padding: \"6px\",\n          //   boxSizing: \"border-box\",\n          //   position: \"absolute\",\n          //   borderRadius: \"5px\",\n          //   border: \"2px solid white\",\n          //   cursor: \"pointer\",\n\n          //   backgroundColor: colorCode[card.category],\n          //   top: `${startTime * 20 - 20}px`,\n          //   left: resize\n          //     ? `${resizeWidth * dayIndex + 45}px`\n          //     : `${dayIndex * 13.5 + 5.5}%`,\n          //   width: resize ? `${resizeWidth}px` : \"13.5%\",\n          //   height: `${timeSpan * 20}px`,\n          //   ...provided.draggableProps.style,\n          // }\n\n          temp = {\n            position: \"absolute\",\n\n            top: `${startTime * 20 - 20}px`,\n            left: resize\n              ? `${resizeWidth * dayIndex + 45}px`\n              : `${dayIndex * 13.5 + 5.5}%`,\n            width: resize ? `${resizeWidth}px` : \"13.5%\",\n            height: `20px`,\n            ...provided.draggableProps.style,\n          }\n\n          break\n        }\n        case \"display\": {\n          temp = {\n            padding: \"2px 6px\",\n            boxSizing: \"border-box\",\n            position: \"absolute\",\n            borderRadius: \"5px\",\n            border: \"2px solid white\",\n            overflow: \"hidden\",\n            cursor: \"pointer\",\n            backgroundColor: colorCode[card.category],\n            top: \"0\",\n            left: \"0\",\n            width: \"100%\",\n            height: `${timeSpan * 20}px`,\n          }\n\n          //display blocking card when other is dragging\n          if (card.isDragging) {\n            temp.backgroundColor = colorCode[`${card.category}_shade`]\n          }\n\n          break\n        }\n        default: {\n          break\n        }\n      }\n\n      //fix position\n      if (!snapshot.isDragging) temp.transform = \"translateX(1px)\"\n\n      return dayIndex > -1 && dayIndex < 7 ? temp : { display: \"none\" }\n    }\n\n    const history = useHistory()\n    const match = useRouteMatch()\n    const handleShowCard = (e) => {\n      history.push(`${match.url}/${e.target.dataset.cardid}`)\n    }\n\n    useEffect(() => {}, [])\n\n    return (\n      <Droppable\n        key={nanoid()}\n        droppableId=\"appointments\"\n        isDropDisabled={true}\n      >\n        {(provided) => (\n          <div\n            id=\"appointments\"\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n            className={styles.appointments}\n            onMouseDown={handleExpandStart}\n            onMouseUp={handleExpandEnd}\n            onMouseMove={handlePosition}\n          >\n            {cardHasPlan.map((card, index) => {\n              return (\n                <Draggable key={nanoid()} draggableId={card.id} index={index}>\n                  {(provided, snapshot) => {\n                    return (\n                      <div\n                        {...provided.draggableProps}\n                        id={card.id}\n                        style={style(card, snapshot, provided, \"sensor\")}\n                        ref={provided.innerRef}\n                        data-cardid={card.id}\n                        isDragDisabled={card.isDragging ? true : false}\n                      >\n                        <div\n                          data-displayid={card.id}\n                          style={style(card, snapshot, provided, \"display\")}\n                        >\n                          <div\n                            className={styles.appointment_title}\n                            data-cardid={card.id}\n                          >\n                            {card.title}\n                          </div>\n                          {responsiveTime(card, snapshot, isExpanding)}\n\n                          <div\n                            aria-label=\"upper\"\n                            data-cardid={card.id}\n                            className={styles.expandHandle_upper}\n                            {...provided.dragHandleProps}\n                            onClick={handleShowCard}\n                          ></div>\n\n                          {/* expand handle */}\n\n                          <div\n                            aria-label=\"lower\"\n                            data-cardid={card.id}\n                            className={styles.expandHandle_lower}\n                          ></div>\n                          <IsDraggingUser isDragging={card.isDragging} />\n                        </div>\n                      </div>\n                    )\n                  }}\n                </Draggable>\n              )\n            })}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    )\n  }\n)\n\nconst IsDraggingUser = ({ isDragging }) => {\n  const members = useSelector((state) => state.members)\n  const isDraggingUser = members.find((member) => member.id === isDragging)\n  if (isDragging) {\n    return (\n      <div\n        className={styles.isDragging_user}\n        style={{\n          backgroundColor: getColor(isDragging),\n        }}\n      >\n        {isDraggingUser.name[0]}\n      </div>\n    )\n  } else {\n    return null\n  }\n}\n\n////// Time Table //////\nconst TimeTable = React.memo(\n  ({ startDate, cards, handleExpandEnd, handlePosition }) => {\n    console.log(startDate)\n    const datesHeader = () => {\n      let temp = []\n      for (let i = 0; i < 8; i++) {\n        if (i === 0) {\n          temp.push(\n            <td className={styles.datesHeader_space} key={nanoid()}></td>\n          )\n        } else {\n          let date = new Date(\n            startDate.getTime() + (i - 1) * 24 * 60 * 60 * 1000\n          )\n\n          temp.push(\n            <td key={nanoid()}>\n              <div className={styles.datesHeader_day}>\n                {getDateHeader(date, \"Day\")}\n              </div>\n              <div\n                className={\n                  date.getTime() === resetTime(new Date()).getTime()\n                    ? `${styles.datesHeader_date} ${styles.datesHeader_date__today}`\n                    : styles.datesHeader_date\n                }\n              >\n                <DayJS format=\"DD\">{date}</DayJS>\n              </div>\n            </td>\n          )\n        }\n      }\n      return temp\n    }\n\n    const timeSlot = (dayIndex, timeIndex) => {\n      return new Date(\n        startDate.getTime() +\n          dayIndex * 24 * 60 * 60 * 1000 +\n          timeIndex * 30 * 60 * 1000\n      )\n    }\n\n    const timeSlotShadow = ({ draggingOverWith }) => {\n      let targetCard = cards.find((card) => card.id === draggingOverWith)\n\n      let style = {\n        position: \"absolute\",\n        top: \"0\",\n        left: \"0\",\n\n        width: \"100%\",\n\n        backgroundColor: \"rgba(0,0,0,0.1)\",\n      }\n\n      if (targetCard.hasOwnProperty(\"start_time\") && targetCard.start_time) {\n        let startTime = new Date(targetCard.start_time)\n        let endTime = new Date(targetCard.end_time)\n        let timeSpan = Math.ceil((endTime - startTime) / 60000 / 30)\n        style.height = `${timeSpan * 20}px`\n      } else {\n        style.height = `40px`\n      }\n      return style\n    }\n\n    const hourHeader = (hour, i) => {\n      if (hour === 0) {\n        return null\n      } else {\n        return hour < 10 ? `0${i / 2}:00` : `${i / 2}:00`\n      }\n    }\n\n    const getRow = () => {\n      let rows = []\n      for (let i = 0; i < 48; i++) {\n        let data = []\n        for (let j = 0; j < 8; j++) {\n          if (j === 0) {\n            if (i % 2 === 0) {\n              //hour header\n              let hour = i / 2\n              data.push(\n                <td rowSpan=\"2\" className={styles.hourHeader} key={nanoid()}>\n                  {hourHeader(hour, i)}\n                </td>\n              )\n            }\n          } else {\n            // time slots\n            let time = timeSlot(j - 1, i)\n            data.push(\n              <Droppable key={nanoid()} droppableId={String(time.getTime())}>\n                {(provided, snapshot) => {\n                  return (\n                    <td\n                      {...provided.droppableProps}\n                      ref={provided.innerRef}\n                      style={{\n                        height: \"20px\",\n                        position: \"relative\",\n                        backgroundColor: snapshot.isDraggingOver\n                          ? \"transparent\"\n                          : \"transparent\",\n                      }}\n                      className={\n                        i % 2 === 1\n                          ? styles.td_border__halfHour\n                          : styles.td_border__fullHour\n                      }\n                    >\n                      {/* shadow */}\n                      {snapshot.isDraggingOver && (\n                        <div style={timeSlotShadow(snapshot)}></div>\n                      )}\n                    </td>\n                  )\n                }}\n              </Droppable>\n            )\n          }\n        }\n\n        rows.push(<tr key={nanoid()}>{data}</tr>)\n      }\n      return rows\n    }\n\n    return (\n      <table>\n        <tbody\n          className={styles.tbody}\n          //handle expand\n          onMouseMove={handlePosition}\n          onMouseUp={handleExpandEnd}\n        >\n          <tr key={nanoid()} className={styles.datesHeader_row}>\n            {datesHeader()}\n          </tr>\n          {getRow()}\n        </tbody>\n      </table>\n    )\n  }\n)\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/utils/lib.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/BoardSelect.jsx",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/CardSelect.jsx",["199","200"],"import React, { useState, useEffect } from \"react\"\nimport {\n  useRouteMatch,\n  useLocation,\n  useHistory,\n  useParams,\n} from \"react-router-dom\"\nimport { useSelector } from \"react-redux\"\nimport Select from \"react-select\"\nimport makeAnimated from \"react-select/animated\"\n\nimport { reactSelectsCustomStyles } from \"../../utils/lib\"\n\nconst CardSelect = () => {\n  let history = useHistory()\n  let match = useRouteMatch()\n  const animatedComponents = makeAnimated()\n\n  const { projectId } = useParams()\n  const thisProject = (state) =>\n    state.projects.find((project) => project.id === projectId)\n  const project = useSelector(thisProject)\n\n  //prepare options\n  const tags = project ? project.tags : []\n  const cards = useSelector((state) => state.cards)\n  const [options, setOptions] = useState([])\n\n  useEffect(() => {\n    //get all added tag's id from each card\n    let tagList = cards.reduce(function (prev, curr) {\n      curr.tags.forEach((tag) => {\n        if (!prev.includes(tag)) {\n          prev.push(tag)\n        }\n      })\n      return prev\n    }, [])\n\n    try {\n      tagList.forEach((tagId, index) => {\n        tagList[index] = tags.find((tag) => tag.id === tagId).name\n      })\n    } catch {\n      tagList = []\n    }\n    const capitalize = (string) => {\n      return string.slice(0, 1).toUpperCase() + string.slice(1)\n    }\n\n    let temp = []\n    tagList.forEach((tag) => {\n      temp.push({\n        value: tag,\n        label: capitalize(tag),\n      })\n      setOptions(temp)\n    })\n  }, [cards, tags])\n\n  //get searched tags from URL\n  const useQuery = () => {\n    let tagString = new URLSearchParams(useLocation().search).get(\"tag\")\n    return tagString ? tagString.split(\" \") : null\n  }\n  let searchTags = useQuery()\n  const handleValue = () => {\n    return searchTags\n      ? options.filter((option) => searchTags.includes(option.value))\n      : null\n  }\n\n  //update URL when search\n  const handleChange = (e) => {\n    let params = []\n    let location\n    if (e) {\n      e.forEach((tag) => {\n        params.push(tag.value)\n      })\n      location = {\n        pathname: `${match.url}` + `${match.url.slice(-1) === \"/\" ? \"\" : \"/\"}`,\n        search: `?tag=${params.join(\"+\")}`,\n        // state: { tags: params },\n      }\n    } else {\n      location = {\n        pathname: `${match.url}`,\n        // state: { tags: false },\n      }\n    }\n    history.push(location)\n  }\n\n  return (\n    <Select\n      styles={reactSelectsCustomStyles}\n      isMulti\n      options={options}\n      value={handleValue()}\n      onChange={handleChange}\n      closeMenuOnSelect={false}\n      components={animatedComponents}\n      placeholder=\"搜尋卡片標籤\"\n    />\n  )\n}\n\nexport default CardSelect\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/DaySelect.jsx",["201"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/InvitationButton.jsx",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/ProjectTitle.jsx",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/UserButton.jsx",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Popup/Popup.jsx",["202","203","204","205","206","207","208","209","210","211","212"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Navbar/FeatureBar.jsx",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Popup/SignIn.jsx",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/Popup/JoinProject.jsx",["213","214"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/components/App/CheckUser.jsx",["215"],{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","severity":1,"message":"221","line":60,"column":11,"nodeType":"222","messageId":"223","endLine":60,"endColumn":20},{"ruleId":"220","severity":1,"message":"221","line":76,"column":11,"nodeType":"222","messageId":"223","endLine":76,"endColumn":20},{"ruleId":"220","severity":1,"message":"224","line":116,"column":11,"nodeType":"222","messageId":"223","endLine":116,"endColumn":17},{"ruleId":"220","severity":1,"message":"224","line":669,"column":11,"nodeType":"222","messageId":"223","endLine":669,"endColumn":17},{"ruleId":"216","replacedBy":"225"},{"ruleId":"218","replacedBy":"226"},{"ruleId":"220","severity":1,"message":"227","line":38,"column":7,"nodeType":"222","messageId":"223","endLine":38,"endColumn":18},{"ruleId":"220","severity":1,"message":"228","line":39,"column":9,"nodeType":"222","messageId":"223","endLine":39,"endColumn":14},{"ruleId":"220","severity":1,"message":"229","line":46,"column":9,"nodeType":"222","messageId":"223","endLine":46,"endColumn":25},{"ruleId":"230","severity":1,"message":"231","line":110,"column":6,"nodeType":"232","endLine":110,"endColumn":8,"suggestions":"233"},{"ruleId":"230","severity":1,"message":"234","line":119,"column":6,"nodeType":"232","endLine":119,"endColumn":12,"suggestions":"235"},{"ruleId":"220","severity":1,"message":"236","line":2,"column":10,"nodeType":"222","messageId":"223","endLine":2,"endColumn":17},{"ruleId":"220","severity":1,"message":"237","line":2,"column":19,"nodeType":"222","messageId":"223","endLine":2,"endColumn":28},{"ruleId":"216","replacedBy":"238"},{"ruleId":"218","replacedBy":"239"},{"ruleId":"220","severity":1,"message":"240","line":1,"column":38,"nodeType":"222","messageId":"223","endLine":1,"endColumn":44},{"ruleId":"220","severity":1,"message":"241","line":3,"column":20,"nodeType":"222","messageId":"223","endLine":3,"endColumn":26},{"ruleId":"220","severity":1,"message":"242","line":6,"column":3,"nodeType":"222","messageId":"223","endLine":6,"endColumn":7},{"ruleId":"220","severity":1,"message":"243","line":8,"column":3,"nodeType":"222","messageId":"223","endLine":8,"endColumn":12},{"ruleId":"220","severity":1,"message":"244","line":9,"column":3,"nodeType":"222","messageId":"223","endLine":9,"endColumn":14},{"ruleId":"230","severity":1,"message":"245","line":62,"column":6,"nodeType":"232","endLine":62,"endColumn":14,"suggestions":"246"},{"ruleId":"220","severity":1,"message":"247","line":165,"column":10,"nodeType":"222","messageId":"223","endLine":165,"endColumn":23},{"ruleId":"220","severity":1,"message":"248","line":165,"column":25,"nodeType":"222","messageId":"223","endLine":165,"endColumn":41},{"ruleId":"249","severity":1,"message":"250","line":48,"column":29,"nodeType":"251","messageId":"252","endLine":48,"endColumn":31},{"ruleId":"220","severity":1,"message":"253","line":71,"column":9,"nodeType":"222","messageId":"223","endLine":71,"endColumn":17},{"ruleId":"220","severity":1,"message":"253","line":41,"column":9,"nodeType":"222","messageId":"223","endLine":41,"endColumn":17},{"ruleId":"230","severity":1,"message":"254","line":116,"column":6,"nodeType":"232","endLine":116,"endColumn":8,"suggestions":"255"},{"ruleId":"230","severity":1,"message":"256","line":381,"column":6,"nodeType":"232","endLine":381,"endColumn":8,"suggestions":"257"},{"ruleId":"230","severity":1,"message":"258","line":875,"column":6,"nodeType":"232","endLine":875,"endColumn":8,"suggestions":"259"},{"ruleId":"230","severity":1,"message":"260","line":90,"column":6,"nodeType":"232","endLine":90,"endColumn":8,"suggestions":"261"},{"ruleId":"230","severity":1,"message":"260","line":121,"column":6,"nodeType":"232","endLine":121,"endColumn":8,"suggestions":"262"},{"ruleId":"220","severity":1,"message":"263","line":19,"column":9,"nodeType":"222","messageId":"223","endLine":19,"endColumn":22},{"ruleId":"220","severity":1,"message":"264","line":11,"column":8,"nodeType":"222","messageId":"223","endLine":11,"endColumn":18},{"ruleId":"220","severity":1,"message":"265","line":2,"column":27,"nodeType":"222","messageId":"223","endLine":2,"endColumn":36},{"ruleId":"220","severity":1,"message":"241","line":5,"column":20,"nodeType":"222","messageId":"223","endLine":5,"endColumn":26},{"ruleId":"220","severity":1,"message":"242","line":8,"column":3,"nodeType":"222","messageId":"223","endLine":8,"endColumn":7},{"ruleId":"220","severity":1,"message":"266","line":21,"column":10,"nodeType":"222","messageId":"223","endLine":21,"endColumn":19},{"ruleId":"220","severity":1,"message":"227","line":30,"column":11,"nodeType":"222","messageId":"223","endLine":30,"endColumn":22},{"ruleId":"220","severity":1,"message":"267","line":34,"column":9,"nodeType":"222","messageId":"223","endLine":34,"endColumn":18},{"ruleId":"220","severity":1,"message":"268","line":38,"column":10,"nodeType":"222","messageId":"223","endLine":38,"endColumn":22},{"ruleId":"220","severity":1,"message":"269","line":239,"column":9,"nodeType":"222","messageId":"223","endLine":239,"endColumn":24},{"ruleId":"216","replacedBy":"270"},{"ruleId":"218","replacedBy":"271"},{"ruleId":"220","severity":1,"message":"242","line":7,"column":3,"nodeType":"222","messageId":"223","endLine":7,"endColumn":7},{"ruleId":"220","severity":1,"message":"272","line":11,"column":3,"nodeType":"222","messageId":"223","endLine":11,"endColumn":8},{"ruleId":"220","severity":1,"message":"273","line":12,"column":3,"nodeType":"222","messageId":"223","endLine":12,"endColumn":9},{"ruleId":"230","severity":1,"message":"274","line":25,"column":9,"nodeType":"275","endLine":25,"endColumn":43},{"ruleId":"276","severity":1,"message":"277","line":82,"column":34,"nodeType":"278","messageId":"279","endLine":82,"endColumn":35},{"ruleId":"230","severity":1,"message":"280","line":64,"column":6,"nodeType":"232","endLine":64,"endColumn":17,"suggestions":"281"},{"ruleId":"220","severity":1,"message":"282","line":1,"column":17,"nodeType":"222","messageId":"223","endLine":1,"endColumn":25},{"ruleId":"220","severity":1,"message":"265","line":1,"column":27,"nodeType":"222","messageId":"223","endLine":1,"endColumn":36},{"ruleId":"220","severity":1,"message":"283","line":2,"column":10,"nodeType":"222","messageId":"223","endLine":2,"endColumn":21},{"ruleId":"220","severity":1,"message":"243","line":6,"column":10,"nodeType":"222","messageId":"223","endLine":6,"endColumn":19},{"ruleId":"220","severity":1,"message":"244","line":6,"column":21,"nodeType":"222","messageId":"223","endLine":6,"endColumn":32},{"ruleId":"220","severity":1,"message":"284","line":9,"column":3,"nodeType":"222","messageId":"223","endLine":9,"endColumn":18},{"ruleId":"220","severity":1,"message":"285","line":10,"column":3,"nodeType":"222","messageId":"223","endLine":10,"endColumn":15},{"ruleId":"220","severity":1,"message":"286","line":12,"column":3,"nodeType":"222","messageId":"223","endLine":12,"endColumn":16},{"ruleId":"220","severity":1,"message":"287","line":13,"column":3,"nodeType":"222","messageId":"223","endLine":13,"endColumn":25},{"ruleId":"220","severity":1,"message":"288","line":14,"column":3,"nodeType":"222","messageId":"223","endLine":14,"endColumn":22},{"ruleId":"220","severity":1,"message":"289","line":17,"column":10,"nodeType":"222","messageId":"223","endLine":17,"endColumn":18},{"ruleId":"220","severity":1,"message":"290","line":17,"column":17,"nodeType":"222","messageId":"223","endLine":17,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":36,"column":6,"nodeType":"232","endLine":36,"endColumn":8,"suggestions":"291"},{"ruleId":"230","severity":1,"message":"292","line":37,"column":6,"nodeType":"232","endLine":37,"endColumn":8,"suggestions":"293"},"no-native-reassign",["294"],"no-negated-in-lhs",["295"],"no-unused-vars","'errorCode' is assigned a value but never used.","Identifier","unusedVar","'source' is assigned a value but never used.",["294"],["295"],"'itineraryId' is assigned a value but never used.","'cards' is assigned a value but never used.","'handleModifyCard' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkModifyCard', 'dispatch', 'handleAddCard', 'handleAddMember', 'handleModifyMember', 'handleRemoveCard', 'handleRemoveMember', and 'projectId'. Either include them or remove the dependency array.","ArrayExpression",["296"],"React Hook useEffect has missing dependencies: 'history' and 'projectId'. Either include them or remove the dependency array.",["297"],"'getData' is defined but never used.","'getFsData' is defined but never used.",["294"],["295"],"'useRef' is defined but never used.","'Router' is defined but never used.","'Link' is defined but never used.","'useParams' is defined but never used.","'useLocation' is defined but never used.","React Hook useEffect has missing dependencies: 'handleAddProject', 'handleModifyProject', and 'handleRemoveProject'. Either include them or remove the dependency array.",["298"],"'pendingMember' is assigned a value but never used.","'setPendingMember' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'dispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'cardId' and 'handleAddLink'. Either include them or remove the dependency array.",["299"],"React Hook useEffect has missing dependencies: 'card.end_time' and 'card.start_time'. Either include them or remove the dependency array. If 'setStartDate' needs the current value of 'card.start_time', you can also switch to useReducer instead of useState and read 'card.start_time' in the reducer.",["300"],"React Hook useEffect has missing dependencies: 'cardId' and 'handleAdd'. Either include them or remove the dependency array.",["301"],"React Hook useEffect has a missing dependency: 'cardId'. Either include it or remove the dependency array.",["302"],["303"],"'handleAddCard' is assigned a value but never used.","'DatePicker' is defined but never used.","'useEffect' is defined but never used.","'OnDragEnd' is defined but never used.","'itinerary' is assigned a value but never used.","'filterMethod' is assigned a value but never used.","'convertedChange' is assigned a value but never used.",["294"],["295"],"'Route' is defined but never used.","'Switch' is defined but never used.","The 'tags' conditional could make the dependencies of useEffect Hook (at line 59) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'tags' in its own useMemo() Hook.","VariableDeclarator","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'handleDateChange'. Either include it or remove the dependency array.",["304"],"'useState' is defined but never used.","'useDispatch' is defined but never used.","'checkUserStatus' is defined but never used.","'listenToUser' is defined but never used.","'getProject_Fs' is defined but never used.","'updateProjectMember_Fs' is defined but never used.","'addProjectInUser_Fs' is defined but never used.","'initUser' is defined but never used.","'setPopUp' is assigned a value but never used.",["305"],"React Hook useEffect has missing dependencies: 'handleNoUser' and 'handleUser'. Either include them or remove the dependency array.",["306"],"no-global-assign","no-unsafe-negation",{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"319","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},"Update the dependencies array to be: [checkModifyCard, dispatch, handleAddCard, handleAddMember, handleModifyMember, handleRemoveCard, handleRemoveMember, projectId]",{"range":"328","text":"329"},"Update the dependencies array to be: [history, projectId, user]",{"range":"330","text":"331"},"Update the dependencies array to be: [handleAddProject, handleModifyProject, handleRemoveProject, userId]",{"range":"332","text":"333"},"Update the dependencies array to be: [cardId, handleAddLink]",{"range":"334","text":"335"},"Update the dependencies array to be: [card.end_time, card.start_time]",{"range":"336","text":"337"},"Update the dependencies array to be: [cardId, handleAdd]",{"range":"338","text":"339"},"Update the dependencies array to be: [cardId]",{"range":"340","text":"341"},{"range":"342","text":"341"},"Update the dependencies array to be: [handleDateChange, startDate]",{"range":"343","text":"344"},"Update the dependencies array to be: [history, projectId]",{"range":"345","text":"346"},"Update the dependencies array to be: [handleNoUser, handleUser]",{"range":"347","text":"348"},[2393,2395],"[checkModifyCard, dispatch, handleAddCard, handleAddMember, handleModifyMember, handleRemoveCard, handleRemoveMember, projectId]",[2639,2645],"[history, projectId, user]",[1380,1388],"[handleAddProject, handleModifyProject, handleRemoveProject, userId]",[2591,2593],"[cardId, handleAddLink]",[9591,9593],"[card.end_time, card.start_time]",[21710,21712],"[cardId, handleAdd]",[2549,2551],"[cardId]",[3178,3180],[2128,2139],"[handleDateChange, startDate]",[894,896],"[history, projectId]",[1036,1038],"[handleNoUser, handleUser]"]