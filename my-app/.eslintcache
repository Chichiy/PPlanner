[{"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/serviceWorker.js":"1","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/itinerarySlice.js":"2","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/ItineraryBoard.jsx":"3","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/CardList.jsx":"4","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/Dayplans.jsx":"5","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/dayplanSlice.js":"6","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/firebase/Config.js":"7","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/cardSlice.js":"8","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/store.js":"9","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/itineraryBoardLib.js":"10","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Navbar/Navbar.jsx":"11","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/App.jsx":"12","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/index.js":"13","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Home/Home.jsx":"14","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/User/userSlice.js":"15","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/Projects.jsx":"16","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/projectsSlice.js":"17","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/Project.jsx":"18","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/Expenditure/Expenditure.jsx":"19","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/CardBoard.jsx":"20","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/TodoList/TodoList.jsx":"21","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Navbar/component/Title.jsx":"22","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/component/SmallCard.jsx":"23","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/component/LargeCard.jsx":"24","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/User/membersSlice.js":"25","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/lib.js":"26","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/User/User.jsx":"27","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/component/Tags.jsx":"28"},{"size":4934,"mtime":1606275674064,"results":"29","hashOfConfig":"30"},{"size":601,"mtime":1607954762104,"results":"31","hashOfConfig":"30"},{"size":6888,"mtime":1608967670554,"results":"32","hashOfConfig":"30"},{"size":7891,"mtime":1608790531557,"results":"33","hashOfConfig":"30"},{"size":15936,"mtime":1609119272419,"results":"34","hashOfConfig":"30"},{"size":3578,"mtime":1607308456990,"results":"35","hashOfConfig":"30"},{"size":18169,"mtime":1608878235775,"results":"36","hashOfConfig":"30"},{"size":3169,"mtime":1608878836852,"results":"37","hashOfConfig":"30"},{"size":681,"mtime":1607532777624,"results":"38","hashOfConfig":"30"},{"size":5500,"mtime":1608794631959,"results":"39","hashOfConfig":"30"},{"size":13734,"mtime":1608606025230,"results":"40","hashOfConfig":"30"},{"size":2280,"mtime":1608603274262,"results":"41","hashOfConfig":"30"},{"size":621,"mtime":1607507551414,"results":"42","hashOfConfig":"30"},{"size":2444,"mtime":1609081823784,"results":"43","hashOfConfig":"30"},{"size":2204,"mtime":1608607057797,"results":"44","hashOfConfig":"30"},{"size":6584,"mtime":1608571002091,"results":"45","hashOfConfig":"30"},{"size":1916,"mtime":1608818685483,"results":"46","hashOfConfig":"30"},{"size":5155,"mtime":1608611469292,"results":"47","hashOfConfig":"30"},{"size":264,"mtime":1606896002777,"results":"48","hashOfConfig":"30"},{"size":3151,"mtime":1608865755785,"results":"49","hashOfConfig":"30"},{"size":255,"mtime":1606903395627,"results":"50","hashOfConfig":"30"},{"size":1537,"mtime":1608371760607,"results":"51","hashOfConfig":"30"},{"size":8044,"mtime":1608824445432,"results":"52","hashOfConfig":"30"},{"size":26245,"mtime":1609091399862,"results":"53","hashOfConfig":"30"},{"size":1844,"mtime":1608611498573,"results":"54","hashOfConfig":"30"},{"size":2943,"mtime":1609119040174,"results":"55","hashOfConfig":"30"},{"size":8739,"mtime":1609060899002,"results":"56","hashOfConfig":"30"},{"size":7365,"mtime":1609000676281,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"19e0as4",{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"74"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/serviceWorker.js",[],["135","136"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/itinerarySlice.js",["137","138"],"import { createSlice } from \"@reduxjs/toolkit\"\nimport { getData, getFsData } from \"../../../../firebase/Config\"\n\nexport const itinerarySlice = createSlice({\n  name: \"itinerary\",\n  initialState: {},\n  reducers: {\n    initItinerary: (state, action) => {\n      for (let key in action.payload) {\n        state[key] = action.payload[key]\n      }\n    },\n    deleteDayplan: (state) => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload\n    },\n  },\n})\n\nexport const { initItinerary } = itinerarySlice.actions\n\nexport default itinerarySlice.reducer\n",["139","140"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/ItineraryBoard.jsx",["141","142","143","144","145","146","147","148"],"//tools\nimport React, { useState, useEffect } from \"react\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n} from \"react-router-dom\"\nimport { DragDropContext } from \"react-beautiful-dnd\"\n\n//components and scss\n\nimport CardList from \"./CardList\"\nimport Dayplans from \"./Dayplans\"\nimport styles from \"../../../../scss/itineraryBoard.module.scss\"\n\n//functions\nimport { OnDragEnd } from \"./itineraryBoardLib\"\nimport { updateCard_Fs } from \"../../../../firebase/Config\"\nimport { modifyCardProperties, updateCardsOrder } from \"../CardBoard/cardSlice\"\nimport LargeCard from \"../CardBoard/component/LargeCard\"\n\nconst ItineraryBoard = () => {\n  const { itineraryId, projectId } = useParams()\n\n  console.log(\"rerender!!!!!\")\n  //needed state\n  const itinerary = useSelector((state) => state.itinerary)\n  // const dayplans = useSelector((state) => state.dayplans)\n  const cards = useSelector((state) => state.cards)\n\n  const [filterMethod] = useState(\"status\")\n\n  const filterCards = (filterMethod) => {\n    switch (filterMethod) {\n      case \"noPlan\": {\n        return cards.filter((card) => card.status === 0)\n      }\n\n      case \"withPlan\": {\n        return cards.filter((card) => card.status === 1)\n      }\n\n      case \"noFilter\": {\n        return cards\n      }\n\n      default: {\n        return cards\n      }\n    }\n  }\n\n  // //register needed dispatch\n  const dispatch = useDispatch()\n\n  const handleOnDragEnd = (result) => {\n    // OnDragEnd(dispatch, result, itinerary, filterCards)\n\n    //define type\n    let type\n    let sou = result.source.droppableId\n    let des = result.destination.droppableId\n\n    if (sou === \"cardsList\" && des === \"cardsList\") {\n      type = \"reorderCards\"\n    }\n    if (sou === \"cardsList\" && des !== \"cardsList\") {\n      type = \"addAppointment\"\n    }\n    if (sou === \"appointments\" && des !== \"cardsList\") {\n      type = \"rescheduleAppointment\"\n    }\n    if (sou === \"appointments\" && des === \"cardsList\") {\n      type = \"removeAppointment\"\n    }\n\n    switch (type) {\n      case \"reorderCards\": {\n        //check if change\n        if (result.source.index === result.destination.index) {\n          break\n        }\n\n        let destinationId = filterCards(\"noPlan\")[result.destination.index].id\n        let updateAction = updateCardsOrder({\n          type: \"cardsList\",\n          result: result,\n          destinationId: destinationId,\n        })\n        dispatch(updateAction)\n\n        let change = {\n          isDragging: false,\n        }\n        //update to cloud database\n        updateCard_Fs(projectId, result.draggableId, change)\n        break\n      }\n\n      case \"rescheduleAppointment\": {\n        //get target item\n        let targetCardId = result.draggableId\n        let target = cards.find((card) => card.id === targetCardId)\n\n        //get original data\n        let startTime = new Date(target.start_time)\n        let endTime = new Date(target.end_time)\n        let timeSpan = endTime.getTime() - startTime.getTime()\n\n        //get new data\n        let newStartTime = new Date()\n        newStartTime.setTime(result.destination.droppableId)\n        let newEndTime = new Date()\n        newEndTime.setTime(newStartTime.getTime() + timeSpan)\n\n        //check if change\n        if (\n          startTime.getTime() === newStartTime.getTime() &&\n          endTime.getTime() === newEndTime.getTime()\n        ) {\n          //prepare changes\n          let change = {\n            isDragging: false,\n          }\n\n          //update to cloud database to cancel isDragging\n          updateCard_Fs(projectId, targetCardId, change)\n          break\n        }\n\n        //prepare changes\n        let change = {\n          start_time: newStartTime,\n          end_time: newEndTime,\n          isDragging: false,\n        }\n        let convertedChange = {\n          start_time: newStartTime.toString(),\n          end_time: newEndTime.toString(),\n          isDragging: false,\n        }\n\n        //update locally first\n        dispatch(\n          modifyCardProperties({ change: convertedChange, id: targetCardId })\n        )\n        //update to cloud database\n        updateCard_Fs(projectId, targetCardId, change)\n        break\n      }\n\n      case \"addAppointment\": {\n        //get target item\n        let targetCardId = result.draggableId\n\n        //get new data\n        let newStartTime = new Date()\n        newStartTime.setTime(result.destination.droppableId)\n        let newEndTime = new Date()\n        newEndTime.setTime(newStartTime.getTime() + 60 * 60 * 1000)\n\n        //prepare changes\n        let change = {\n          status: 1,\n          start_time: newStartTime,\n          end_time: newEndTime,\n          isDragging: false,\n        }\n        let convertedChange = {\n          status: 1,\n          start_time: newStartTime.toString(),\n          end_time: newEndTime.toString(),\n          isDragging: false,\n        }\n\n        //update locally first\n        dispatch(\n          modifyCardProperties({ change: convertedChange, id: targetCardId })\n        )\n        //update to cloud database\n        updateCard_Fs(projectId, targetCardId, change)\n\n        break\n      }\n\n      case \"removeAppointment\": {\n        //get target item\n        let targetCardId = result.draggableId\n\n        //prepare changes\n        let change = {\n          status: 0,\n          start_time: null,\n          end_time: null,\n          isDragging: false,\n        }\n        let convertedChange = {\n          status: 0,\n          start_time: null,\n          end_time: null,\n          isDragging: false,\n        }\n\n        //update locally first\n        dispatch(\n          modifyCardProperties({ change: convertedChange, id: targetCardId })\n        )\n        //update to cloud database\n        updateCard_Fs(projectId, targetCardId, change)\n\n        break\n      }\n\n      default: {\n        console.log(\"something wrong when drag and drop\")\n        break\n      }\n    }\n  }\n\n  const user = useSelector((state) => state.user)\n\n  const handleOnDragStart = (result) => {\n    //register dragger's info on cloud data to prevent re-writes\n    let targetCardId = result.draggableId\n    let userId = user.id\n\n    //prepare changes\n    let change = {\n      isDragging: userId,\n    }\n    let convertedChange = {\n      isDragging: userId,\n    }\n\n    //update to cloud database with blocking listening again\n    updateCard_Fs(projectId, targetCardId, change)\n  }\n\n  const match = useRouteMatch()\n  return (\n    <div className={styles.view}>\n      <DragDropContext\n        onDragStart={handleOnDragStart}\n        onDragEnd={handleOnDragEnd}\n      >\n        <CardList cards={filterCards(\"noPlan\")} />\n        <Dayplans />\n      </DragDropContext>\n\n      <Switch>\n        <Route path={`${match.path}/:cardId`}>\n          <LargeCard />\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nexport default ItineraryBoard\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/CardList.jsx",["149"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/Dayplans.jsx",["150","151","152"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/dayplanSlice.js",[],["153","154"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/firebase/Config.js",["155","156","157","158"],"import firebase from \"firebase/app\"\nimport \"firebase/analytics\"\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAxbnsUNTG2SYqUsC2QqIbBo1OLuKXeZ-g\",\n  authDomain: \"pplanner-bfb1a.firebaseapp.com\",\n  databaseURL: \"https://pplanner-bfb1a.firebaseio.com\",\n  projectId: \"pplanner-bfb1a\",\n  storageBucket: \"pplanner-bfb1a.appspot.com\",\n  messagingSenderId: \"501383303118\",\n  appId: \"1:501383303118:web:a6c81e2be82826845e659f\",\n  measurementId: \"G-FETYRNE2VX\",\n}\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig)\n\n//abbreviation\nvar db = firebase.firestore()\nvar au = firebase.auth()\nexport const toDate = firebase.firestore.Timestamp.toDate\n\n////////////////////////////////////\n//          user-related          //\n////////////////////////////////////\n\nexport const checkUserStatus = (handleUser, handleNoUser) => {\n  au.onAuthStateChanged(function (user) {\n    if (user) {\n      // User is signed in.\n      handleUser(user)\n    } else {\n      // No user is signed in.\n      handleNoUser()\n    }\n  })\n}\n\nexport const signUp_Native = (input, handleSuccess) => {\n  au.createUserWithEmailAndPassword(input.email, input.password)\n    .then((result) => {\n      let user = result.user\n      let docRef = db.collection(\"users\").doc(user.uid)\n\n      let update = {\n        name: input.name,\n        email: user.email,\n        picture: user.photoURL,\n      }\n      docRef.set(update).catch(function (error) {\n        console.error(\"Error adding document: \", error)\n      })\n    })\n    .then((res) => {\n      handleSuccess()\n    })\n    .catch((error) => {\n      var errorCode = error.code\n      var errorMessage = error.message\n      alert(errorMessage)\n      // ..\n    })\n}\n\nexport const signIn_Native = (input, handleSuccess) => {\n  return au\n    .signInWithEmailAndPassword(input.email, input.password)\n    .then((user) => {\n      // Signed in\n      // ...\n      handleSuccess()\n    })\n    .catch((error) => {\n      var errorCode = error.code\n      var errorMessage = error.message\n      alert(errorMessage)\n    })\n}\n\nexport const signOut = (redirect) => {\n  return au\n    .signOut()\n    .then(function () {\n      // Sign-out successful.\n      redirect()\n    })\n    .catch(function (error) {\n      // An error happened.\n    })\n}\n\nexport const addProjectInUser_Fs = (userId, change) => {\n  let docRef = db.collection(\"users\").doc(userId)\n  //expect format\n  //change = projectId\n\n  return docRef\n    .update({\n      projects: firebase.firestore.FieldValue.arrayUnion(change),\n    })\n    .catch(function (error) {\n      console.error(\"Error updating document: \", error)\n    })\n}\n\n//////listening to cloud data///////\nexport const listenToUser = (userId, updateState) => {\n  let unsubscribe = db\n    .collection(\"users\")\n    .doc(userId)\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      let data = snapshot.data()\n      data.id = snapshot.id\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n      // console.log(source, snapshot, data)\n      updateState(data)\n    })\n  return unsubscribe\n}\n\nexport const listenToMembers = (\n  projectId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"users\")\n    .where(\"projects\", \"array-contains\", projectId)\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      // console.log(source, snapshot, docChange)\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n\n          //add id to data\n          data.id = id\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\nexport const listenToProjects = (\n  userId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"projects\")\n    .where(\"members\", \"array-contains\", userId)\n    .orderBy(\"created_time\", \"desc\")\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n\n          //add id to data\n          data.id = id\n          //conver time object to string\n          data.created_time = data.created_time.toDate().toString()\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\nexport const listenToDayplans = (\n  itineraryId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"dayplans\")\n    .where(\"itinerary_id\", \"==\", itineraryId)\n    .orderBy(\"date\", \"asc\")\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n\n          //add id to data\n          data.id = id\n          //conver time object to string\n          data.date = data.date.toDate().toString()\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\nexport const listenToCard = (\n  projectId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"projects\")\n    .doc(projectId)\n    .collection(\"cards\")\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n\n          // console.log(source, type, id, data)\n          //add id to data\n          data.id = id\n\n          if (data.start_time) {\n            //conver time object to string\n            data.start_time = data.start_time.toDate().toString()\n            data.end_time = data.end_time.toDate().toString()\n          }\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\nexport const listenToComments = (\n  cardId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"comments\")\n    .where(\"card_id\", \"==\", cardId)\n    .orderBy(\"date\", \"asc\")\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n          // console.log(source, type, id, data)\n\n          //add id to data\n          data.id = id\n          //conver time object to string\n          data.date = data.date.toDate().toString()\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n        // console.log(\"comments\")\n      }\n    })\n  return unsubscribe\n}\n\nexport const listenToLinks = (\n  cardId,\n  handleAdd,\n  handleModify,\n  handleRemove\n) => {\n  let unsubscribe = db\n    .collection(\"links\")\n    .where(\"card_id\", \"==\", cardId)\n    .orderBy(\"date\", \"asc\")\n    .onSnapshot({ includeMetadataChanges: true }, function (snapshot) {\n      var docChange = snapshot.docChanges()\n      var source = snapshot.metadata.hasPendingWrites ? \"local\" : \"server\"\n\n      // console.log(source, snapshot, docChange)\n\n      //local data needs to be changed\n      if (docChange.length > 0) {\n        snapshot.docChanges().forEach(function (change) {\n          let type = change.type\n          let id = change.doc.id\n          let data = change.doc.data()\n          // console.log(source, type, id, data)\n\n          //add id to data\n          data.id = id\n          //conver time object to string\n          data.date = data.date.toDate().toString()\n\n          if (type === \"added\") {\n            handleAdd(data, source)\n          }\n          if (type === \"modified\") {\n            handleModify(data, source)\n          }\n          if (type === \"removed\") {\n            handleRemove(data, source)\n          }\n        })\n      } else {\n        //changes have been saved\n        console.log(\"data has been saved to cloud database\")\n      }\n    })\n  return unsubscribe\n}\n\n//////update cloud data//////\n\n//basic function\nexport const update = (collection, doc, fileds) => {\n  let docRef = db.collection(collection).doc(doc)\n\n  return docRef\n    .update(fileds)\n    .then(function () {\n      console.log(\"Document successfully updated!\")\n    })\n    .then(docRef.update({ onChange: \"\" }))\n    .catch(function (error) {\n      // The document probably doesn't exist.\n      console.error(\"Error updating document: \", error)\n    })\n}\n\n//update project title in nav bar\n\nexport const addProject_Fs = (input) => {\n  let docRef = db.collection(\"projects\")\n\n  return docRef.add(input).catch(function (error) {\n    console.error(\"Error adding document: \", error)\n  })\n}\n\nexport const updateProject_Fs = (projectId, change) => {\n  let docRef = db.collection(\"projects\").doc(projectId)\n\n  return docRef.update(change).catch(function (error) {\n    console.error(\"Error updating document: \", error)\n  })\n}\n\nexport const updateProjectMember_Fs = (projectId, type, targetUserId) => {\n  let docRef = db.collection(\"projects\").doc(projectId)\n  let change\n\n  if (type === \"add\") {\n    change = {\n      members: firebase.firestore.FieldValue.arrayUnion(targetUserId),\n    }\n  }\n  if (type === \"remove\") {\n    change = {\n      members: firebase.firestore.FieldValue.arrayRemove(targetUserId),\n    }\n  }\n\n  return docRef.update(change).catch(function (error) {\n    console.error(\"Error updating document: \", error)\n  })\n}\n\nexport const removeProject_Fs = (projectId) => {\n  let docRef = db.collection(\"projects\").doc(projectId)\n\n  return docRef.delete().catch(function (error) {\n    console.error(\"Error deleting document: \", error)\n  })\n}\n\n//////cards related//////\nexport const AddCard_Fs = (projectId, input) => {\n  let docRef = db.collection(\"projects\").doc(projectId).collection(\"cards\")\n\n  return docRef.add(input).catch(function (error) {\n    console.error(\"Error adding document: \", error)\n  })\n}\n\nexport const updateCard_Fs = (projectId, cardId, change) => {\n  // expected format:\n  // let change = {\n  //   title: input,\n  // }\n\n  let docRef = db\n    .collection(\"projects\")\n    .doc(projectId)\n    .collection(\"cards\")\n    .doc(cardId)\n\n  return docRef.update(change).catch(function (error) {\n    console.error(\"Error updating document: \", error)\n  })\n}\n\nexport const removeCard_Fs = (projectId, cardId) => {\n  let docRef = db\n    .collection(\"projects\")\n    .doc(projectId)\n    .collection(\"cards\")\n    .doc(cardId)\n\n  return docRef.delete().catch(function (error) {\n    console.error(\"Error deleting document: \", error)\n  })\n}\n\nexport const getCommentsNumber_Fs = (cardId) => {\n  return db\n    .collection(\"comments\")\n    .where(\"card_id\", \"==\", cardId)\n    .get()\n    .then(function (querySnapshot) {\n      let temp = []\n      querySnapshot.forEach(function (doc) {\n        temp.push(doc.data())\n      })\n      return temp.length\n    })\n\n    .catch(function (error) {\n      console.log(\"Error getting documents: \", error)\n    })\n}\n\nexport const addComment_Fs = (input) => {\n  // expected format:\n  // let input = {\n  // card_id: cardId,\n  // sender_id: userId,\n  // content: pending,\n  // date: date object,\n  // }\n\n  let docRef = db.collection(\"comments\")\n\n  return docRef.add(input).catch(function (error) {\n    console.error(\"Error adding document: \", error)\n  })\n}\n\nexport const updateComment_Fs = (commentId, change) => {\n  // expected format:\n  // let change = {\n  //   content: input,\n  // }\n\n  let docRef = db.collection(\"comments\").doc(commentId)\n\n  return docRef.update(change).catch(function (error) {\n    console.error(\"Error updating document: \", error)\n  })\n}\n\nexport const removeComment_Fs = (commentId) => {\n  let docRef = db.collection(\"comments\").doc(commentId)\n\n  return docRef.delete().catch(function (error) {\n    console.error(\"Error deleting document: \", error)\n  })\n}\n\nexport const getLinksNumber_Fs = (cardId) => {\n  return db\n    .collection(\"links\")\n    .where(\"card_id\", \"==\", cardId)\n    .get()\n    .then(function (querySnapshot) {\n      let temp = []\n      querySnapshot.forEach(function (doc) {\n        temp.push(doc.data())\n      })\n      return temp.length\n    })\n\n    .catch(function (error) {\n      console.log(\"Error getting documents: \", error)\n    })\n}\n\nexport const addLink_Fs = (input) => {\n  // expected format:\n  // let input = {\n  // card_id: cardId,\n  // url: url,\n  // title: string,\n  // date: date object,\n  // }\n\n  let docRef = db.collection(\"links\")\n\n  return docRef.add(input).catch(function (error) {\n    console.error(\"Error adding document: \", error)\n  })\n}\n\nexport const updateLink_Fs = (linkId, change) => {\n  // expected format:\n  // let change = {\n  //   title: input,\n  // }\n\n  let docRef = db.collection(\"links\").doc(linkId)\n\n  return docRef.update(change).catch(function (error) {\n    console.error(\"Error updating document: \", error)\n  })\n}\n\nexport const removeLink_Fs = (linkId) => {\n  let docRef = db.collection(\"links\").doc(linkId)\n\n  return docRef.delete().catch(function (error) {\n    console.error(\"Error deleting document: \", error)\n  })\n}\n\n//get info once\n\nexport const getProject_Fs = (projectId) => {\n  let docRef = db.collection(\"projects\").doc(projectId)\n\n  return docRef\n    .get()\n    .then(function (doc) {\n      return doc.data()\n    })\n    .catch(function (error) {\n      console.log(\"Error getting document:\", error)\n    })\n}\n\nexport const addDayplan_Fs = (input) => {\n  let docRef = db.collection(\"dayplans\")\n\n  return docRef\n    .add(input)\n    .then(function (newDayplan) {\n      newDayplan.update({\n        id: newDayplan.id,\n      })\n    })\n    .catch(function (error) {\n      console.error(\"Error adding document: \", error)\n    })\n}\n\nexport function getFsData_Itinerary(project_id, field, operators, value) {\n  return db\n    .collection(\"projects\")\n    .doc(project_id)\n    .collection(\"itineraries\")\n    .orderBy(\"created_time\", \"desc\") //get the latest version of itineray\n    .limit(1)\n    .get()\n    .then(function (querySnapshot) {\n      let temp\n      querySnapshot.forEach(function (doc) {\n        temp = doc.data()\n      })\n      return temp\n    })\n    .then((res) => {\n      //conver time object to string\n      res.created_time = res.created_time.toDate().toString()\n      return res\n    })\n    .catch(function (error) {\n      console.log(\"Error getting documents: \", error)\n    })\n}\n\n//not sure what to do\n\nexport const listenToData = (callback) => {\n  db.collection(\"test\")\n    .doc(\"2eddU3pn48Llu7Ji60Nz\")\n    .onSnapshot(function (doc) {\n      var source = doc.metadata.hasPendingWrites ? \"Local\" : \"Server\"\n      let data = doc.data()\n      callback(data)\n    })\n}\n\nexport const updateCards = (projectId, cardId, changes) => {\n  let docRef = db\n    .collection(\"project\")\n    .doc(projectId)\n    .collection(\"cards\")\n    .doc(cardId)\n\n  return (\n    docRef\n      .update(changes)\n      .then(function () {\n        console.log(\"Document successfully updated!\")\n      })\n      // .then(docRef.update({ onChange: \"\" }))\n      .catch(function (error) {\n        // The document probably doesn't exist.\n        console.error(\"Error updating document: \", error)\n      })\n  )\n}\n\nexport const updateSchedule = (dayplanId, changes) => {\n  let docRef = db.collection(\"dayplans\").doc(dayplanId)\n\n  return (\n    docRef\n      .update({ schedule: changes })\n      .then(function () {\n        console.log(\"Document successfully updated!\")\n      })\n      // .then(docRef.update({ onChange: \"\" }))\n      .catch(function (error) {\n        // The document probably doesn't exist.\n        console.error(\"Error updating document: \", error)\n      })\n  )\n}\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/cardSlice.js",[],["159","160"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/app/store.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/itineraryBoard/itineraryBoardLib.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Navbar/Navbar.jsx",["161","162","163","164","165","166","167","168","169","170"],"import React, { useState, useEffect, useRef } from \"react\"\nimport {\n  Link,\n  useRouteMatch,\n  useParams,\n  useLocation,\n  Route,\n  Switch,\n  useHistory,\n} from \"react-router-dom\"\nimport { useSelector, useDispatch } from \"react-redux\"\n\n//React Select\nimport Select from \"react-select\"\nimport makeAnimated from \"react-select/animated\"\n\n//DatePicker\nimport DatePicker from \"react-datepicker\"\nimport \"react-datepicker/dist/react-datepicker.css\"\n\nimport \"./react-datepicker-customstyle.scss\"\nimport styles from \"./navbar.module.scss\"\nimport User from \"../User/User\"\nimport Title from \"./component/Title\"\nimport { getColor, resetTime } from \"../lib\"\n\nconst Navbar = (props) => {\n  //get login status\n  const user = useSelector((state) => state.user)\n  const login = user.id ? true : false\n\n  //get project data\n  const { projectId } = useParams()\n  const thisProject = (state) =>\n    state.projects.find((project) => project.id === projectId)\n  const project = useSelector(thisProject)\n\n  //get different feature bar\n  const renderSwitch = () => {\n    switch (props.type) {\n      case \"cards\": {\n        return (\n          <div className={styles.board_bar}>\n            <div className={styles.board_select}>\n              <BoardSelect type={props.type} />\n            </div>\n\n            <div className={styles.card_select}>\n              <CardSelect project={project && project} />\n            </div>\n            <Invitation isShowing={isShowing} setShowing={setShowing} />\n          </div>\n        )\n      }\n      case \"itineraries\": {\n        return (\n          <div className={styles.board_bar}>\n            <div className={styles.board_select}>\n              <BoardSelect type={props.type} />\n            </div>\n            <div className={`${styles.daySelect_container} ${styles.tooltip}`}>\n              <DaySelect />\n              <div style={{ width: \"90px\" }} className={styles.tooltip_text}>\n                選擇起始日期\n              </div>\n            </div>\n\n            {/* <div className={styles.modeSelect}>\n              <ModeSelect />\n            </div> */}\n            <Invitation isShowing={isShowing} setShowing={setShowing} />\n          </div>\n        )\n      }\n      case \"expenditure\": {\n        return (\n          <div className={styles.board_bar}>\n            <div className={styles.board_select}>\n              <BoardSelect type={props.type} />\n            </div>\n          </div>\n        )\n      }\n      case \"todoList\": {\n        return (\n          <div className={styles.board_bar}>\n            <div className={styles.board_select}>\n              <BoardSelect type={props.type} />\n            </div>\n          </div>\n        )\n      }\n      default: {\n        return null\n      }\n    }\n  }\n\n  //show popup\n  const location = useLocation()\n  const [isShowing, setShowing] = useState(false)\n\n  //handle popup request from other conponent\n  useEffect(() => {\n    try {\n      if (location.state.showPopup) {\n        setShowing(location.state.showPopup)\n      }\n    } catch {}\n  }, [location])\n\n  const clickOnUserIcon = () => {\n    if (isShowing !== \"user\") {\n      setShowing(\"user\")\n    }\n    if (isShowing === \"user\") {\n      setShowing(false)\n    }\n  }\n\n  return (\n    <div className={styles.navbar}>\n      <Switch>\n        {/* display: home button and project title on project page*/}\n        <Route path={`/projects/${projectId}`}>\n          <Link\n            to=\"/projects\"\n            className={`${styles.item} ${styles.home} ${styles.tooltip}`}\n          >\n            <div className={styles.tooltip_text}>返回總覽</div>\n          </Link>\n          <Title\n            title={project ? project.title : null}\n            projectId={project ? project.id : null}\n          />\n        </Route>\n\n        {/* display: logo on index and projects page*/}\n        <Route path=\"/\">\n          <Link to=\"/projects\" className={styles.logo}></Link>\n        </Route>\n      </Switch>\n\n      {/* display: feature bar */}\n      {renderSwitch()}\n\n      {/* display: to fill the empty space */}\n      <div className={styles.space}></div>\n\n      {/* display: user status */}\n\n      {login ? (\n        <div\n          className={styles.user_icon}\n          onClick={clickOnUserIcon}\n          style={{ backgroundColor: getColor(user.id) }}\n        >\n          {user.name[0]}\n        </div>\n      ) : (\n        <div className={styles.user_buttons}>\n          <div\n            className={styles.sign_in_button}\n            onClick={() => {\n              setShowing(\"signIn\")\n            }}\n          >\n            登入\n          </div>\n\n          <div\n            className={styles.sign_up_button}\n            onClick={() => {\n              setShowing(\"signUp\")\n            }}\n          >\n            註冊\n          </div>\n        </div>\n      )}\n\n      {isShowing && <User isShowing={isShowing} setShowing={setShowing} />}\n    </div>\n  )\n}\n\nexport default Navbar\n\nconst customStyles = {\n  control: (provided, state) => ({\n    ...provided,\n    minHeight: 30,\n  }),\n  input: (provided) => ({\n    ...provided,\n    // display: \"none\",\n  }),\n  dropdownIndicator: (provided) => ({\n    ...provided,\n    padding: 5,\n  }),\n  valueContainer: (provided) => ({\n    ...provided,\n    padding: 5,\n    height: 30,\n    boxSizing: \"border-box\",\n  }),\n\n  singleValue: (provided) => ({\n    ...provided,\n    fontSize: 14,\n  }),\n  option: (provided, state) => ({\n    ...provided,\n    fontSize: 14,\n  }),\n}\n\nconst BoardSelect = (props) => {\n  let history = useHistory()\n  let match = useRouteMatch()\n  let itineraryId = useSelector((state) => state.itinerary.id)\n  let location = useLocation()\n  let { projectId } = useParams()\n\n  // console.log(match)\n\n  let options = [\n    { value: \"cards\", label: \"卡片板\" },\n    { value: \"itineraries\", label: \"行程板\" },\n    // { value: \"expenditure\", label: \"花費板\" },\n    // { value: \"todoList\", label: \"待辦清單\" },\n  ]\n  const thisBoard = () => {\n    return options.findIndex((option) => option.value === props.type)\n  }\n\n  const handleChange = (e) => {\n    //update URL\n    let boardType = e.value\n    let location\n    switch (boardType) {\n      case \"itineraries\": {\n        location = {\n          pathname: `/projects/${match.params.projectId}/${boardType}`,\n        }\n        break\n      }\n      default: {\n        location = {\n          pathname: `/projects/${match.params.projectId}/${boardType}`,\n        }\n      }\n    }\n    history.push(location)\n  }\n\n  return (\n    <Select\n      styles={customStyles}\n      options={options}\n      value={options[thisBoard()]}\n      onChange={handleChange}\n    />\n  )\n}\n\nconst CardSelect = ({ project }) => {\n  let history = useHistory()\n  let match = useRouteMatch()\n\n  let location = useLocation()\n  let { projectId } = useParams()\n  const animatedComponents = makeAnimated()\n\n  //prepare options\n  const tags = project ? project.tags : []\n  const cards = useSelector((state) => state.cards)\n  const [options, setOptions] = useState([])\n\n  useEffect(() => {\n    //get all added tag's id from each card\n    let tagList = cards.reduce(function (prev, curr) {\n      curr.tags.forEach((tag) => {\n        if (!prev.includes(tag)) {\n          prev.push(tag)\n        }\n      })\n      return prev\n    }, [])\n\n    try {\n      tagList.forEach((tagId, index) => {\n        tagList[index] = tags.find((tag) => tag.id === tagId).name\n      })\n    } catch {\n      tagList = []\n    }\n    const capitalize = (string) => {\n      return string.slice(0, 1).toUpperCase() + string.slice(1)\n    }\n\n    let temp = []\n    tagList.forEach((tag) => {\n      temp.push({\n        value: tag,\n        label: capitalize(tag),\n      })\n      setOptions(temp)\n    })\n  }, [cards, tags])\n\n  //get searched tags from URL\n  const useQuery = () => {\n    let tagString = new URLSearchParams(useLocation().search).get(\"tag\")\n    return tagString ? tagString.split(\" \") : null\n  }\n  let searchTags = useQuery()\n  const handleValue = () => {\n    return searchTags\n      ? options.filter((option) => searchTags.includes(option.value))\n      : null\n  }\n\n  //update URL when search\n  const handleChange = (e) => {\n    let params = []\n    let location\n    if (e) {\n      e.forEach((tag) => {\n        params.push(tag.value)\n      })\n      location = {\n        pathname: `${match.url}` + `${match.url.slice(-1) === \"/\" ? \"\" : \"/\"}`,\n        search: `?tag=${params.join(\"+\")}`,\n        // state: { tags: params },\n      }\n    } else {\n      location = {\n        pathname: `${match.url}`,\n        // state: { tags: false },\n      }\n    }\n    history.push(location)\n  }\n\n  return (\n    <Select\n      styles={customStyles}\n      isMulti\n      options={options}\n      value={handleValue()}\n      onChange={handleChange}\n      closeMenuOnSelect={false}\n      components={animatedComponents}\n      placeholder=\"搜尋卡片標籤\"\n    />\n  )\n}\n\nconst DaySelect = () => {\n  const [startDate, setStartDate] = useState(resetTime(new Date()))\n  const plannedCards = useSelector((state) =>\n    state.cards.filter((card) => card.status === 1)\n  )\n\n  // automacticllu set date with first planned card\n  // let currentDateRange\n  // if (plannedCards.length > 0) {\n  //   currentDateRange = plannedCards.reduce((prev, curr) => {\n  //     try {\n  //       let currDate = new Date(curr.start_time)\n  //       let diffDay = Math.floor((currDate - startDate) / (24 * 60 * 60 * 1000))\n  //       if (diffDay > -1 && diffDay < 7) {\n  //         return [...prev, ...currDate]\n  //       }\n  //     } catch { }\n  //   }, [])\n  //   console.log(currentDateRange)\n  // }\n\n  // useEffect(() => {\n  //   if (plannedCards.length > 0) {\n  //     // let currentDateRange = plannedCards.reduce(function (prev, curr) {\n  //     //   let currDate = new Date(curr.start_time)\n  //     //   let diffDay = Math.floor(((currDate - startDate) / 24) * 60 * 60 * 1000)\n  //     //   if (diffDay > -1 && diffDay < 7) {\n  //     //     return [...prev, ...currDate]\n  //     //   }\n  //     // }, [])\n  //     setStartDate(resetTime(new Date(plannedCards[0].start_time)))\n  //   }\n  // }, [plannedCards[0]])\n\n  //update start date through location.state\n  let history = useHistory()\n  let match = useRouteMatch()\n  let location = useLocation()\n  const previousDate = useRef()\n  const handleDateChange = () => {\n    location = {\n      pathname: match.url,\n      state: { startDate: startDate },\n    }\n    history.push(location)\n  }\n  useEffect(() => {\n    if (previousDate.current !== startDate) {\n      //prevent repeatly redirect\n      previousDate.current = startDate\n      handleDateChange()\n    }\n  }, [startDate])\n\n  //show dates with plans\n\n  const getDate = (type, string) => {\n    switch (type) {\n      case \"dateObj\": {\n        let time = new Date(string)\n        return time\n      }\n\n      case \"date\": {\n        let time = new Date(string)\n        return time.getDate()\n      }\n      case \"month\": {\n        let time = new Date(string)\n        return time.getMonth()\n      }\n      case \"year\": {\n        let time = new Date(string)\n        return time.getFullYear()\n      }\n      default: {\n        break\n      }\n    }\n  }\n\n  //find current date has plan or not\n  const hasPlan = (compareDate) => {\n    if (\n      plannedCards.findIndex(\n        (card) =>\n          0 < getDate(\"dateObj\", card.start_time) - compareDate &&\n          getDate(\"dateObj\", card.start_time) - compareDate <\n            24 * 60 * 60 * 1000\n      ) > -1\n    ) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  return (\n    <DatePicker\n      selected={startDate}\n      onChange={(date) => setStartDate(date)}\n      className={styles.daySelect}\n      dateFormat=\"yyyy年MM月\"\n      popperModifiers={{\n        offset: {\n          enabled: true,\n          offset: \"10px, 5px\",\n        },\n        preventOverflow: {\n          enabled: true,\n          escapeWithReference: false,\n          boundariesElement: \"viewport\",\n        },\n      }}\n      wrapperClassName={styles.wrapper}\n      dayClassName={(date) => (hasPlan(date) ? styles.hasPlan : null)}\n    />\n  )\n}\n\nconst ModeSelect = () => {\n  const options = [\n    { value: \"day\", label: \"單日\" },\n    { value: \"week\", label: \"單週\" },\n    { value: \"month\", label: \"單月\" },\n  ]\n\n  return (\n    <Select\n      options={options}\n      value={options[1]}\n      // onChange={handleChange}\n    />\n  )\n}\n\nconst Invitation = ({ isShowing, setShowing }) => {\n  // const [isShowing, setShow] = useState(false)\n  const { projectId } = useParams()\n\n  const getUrl = () => {\n    let url = window.location.origin\n    return url + `/joinProject/${projectId}`\n  }\n  const handleFocus = (e) => {\n    e.target.select()\n  }\n\n  const handleCopy = () => {\n    let copyText = document.querySelector(\"#url\")\n    copyText.select()\n    copyText.setSelectionRange(0, 99999) /* For mobile devices */\n    document.execCommand(\"copy\")\n    setShowing(false)\n  }\n\n  const clickOnInvitation = (e) => {\n    if (isShowing !== \"invitation\") {\n      setShowing(\"invitation\")\n    } else if (e.target.id === \"invitation\") {\n      setShowing(false)\n    }\n  }\n\n  return (\n    <div\n      id=\"invitation\"\n      className={styles.invitation}\n      onClick={clickOnInvitation}\n    >\n      邀請\n      {isShowing === \"invitation\" && (\n        // <div>\n        <div className={styles.invitation_container}>\n          <div className={styles.caption}>邀請好友加入</div>\n          <input\n            id=\"url\"\n            className={styles.url}\n            type=\"text\"\n            value={getUrl()}\n            autoFocus\n            readOnly\n            onFocus={handleFocus}\n          />\n          <div className={styles.buttons}>\n            <div className={styles.copy_button} onClick={handleCopy}>\n              點擊複製連結\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n",["171","172"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/App.jsx",["173","174","175","176"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/index.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Home/Home.jsx",["177","178","179"],"import React, { useState, useEffect } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport styles from \"./home.module.scss\"\nimport { ReactComponent as Discovery } from \"../../img/Discovery.svg\"\nimport cards from \"../../img/cards.svg\"\nimport itinerary from \"../../img/itinerary.svg\"\n\nconst Home = () => {\n  const user = useSelector((state) => state.user)\n  const history = useHistory()\n  const handleClick = () => {\n    if (user.id) {\n      history.push({ pathname: \"/projects\" })\n    } else {\n      history.push({ pathname: \"/\", state: { showPopup: \"signIn\" } })\n    }\n  }\n\n  return (\n    <div className={styles.view}>\n      <div style={{ marginBottom: \"-50px\" }} className={styles.block}>\n        <Discovery className={styles.cover_photo} />\n        <div className={styles.banner}>\n          <div className={styles.banner_slogan}>\n            規劃旅行\n            <br />\n            可以更簡單！\n          </div>\n          <div className={styles.banner_text}>\n            使用 PPlanner 讓您更有效率地整理旅遊資訊\n            <br />\n            和旅伴一起安排行程不再困難重重！\n          </div>\n          <div className={styles.button} onClick={handleClick}>\n            現在開始體驗\n          </div>\n        </div>\n      </div>\n\n      <div className={styles.card_block}>\n        <div className={styles.cards_section}>\n          <div className={styles.cards_slogan}>\n            視覺化\n            <br />\n            旅程的每一步\n          </div>\n          <div className={styles.cards_text}>\n            透過卡片板系統性記錄所蒐集到的旅遊資訊\n            <br />\n            不論是檢索歸納、和旅伴討論都超方便！\n          </div>\n        </div>\n        <img src={cards} alt=\"\" className={styles.cards_svg} />\n      </div>\n      <div className={styles.itinerary_block}>\n        <div className={styles.cards_section}>\n          <div className={styles.cards_slogan}>\n            動態拖拉\n            <br />\n            輕鬆安排行程\n          </div>\n          <div className={styles.cards_text}>\n            透過在畫面拖拉的方式移動待定行程\n            <br />\n            新增、刪改旅行計劃都超 Easy！\n          </div>\n        </div>\n        <img src={itinerary} alt=\"\" className={styles.itinerary_svg} />\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/User/userSlice.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/Projects.jsx",["180","181","182","183","184","185","186","187"],"import React, { useState, useEffect, useRef } from \"react\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n  useLocation,\n  useHistory,\n} from \"react-router-dom\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { nanoid } from \"@reduxjs/toolkit\"\n\nimport styles from \"./projects.module.scss\"\n\nimport Navbar from \"../Navbar/Navbar\"\nimport Project from \"./Project\"\n\nimport {\n  listenToProjects,\n  addProject_Fs,\n  removeProject_Fs,\n  addProjectInUser_Fs,\n} from \"../../firebase/Config\"\nimport { addProjects, modifyProjects, removeProjects } from \"./projectsSlice\"\nconst Projects = () => {\n  const dispatch = useDispatch()\n  const match = useRouteMatch()\n  const projects = useSelector((state) => state.projects)\n  const userId = useSelector((state) => state.user.id)\n\n  const handleAddProject = (res) => {\n    dispatch(addProjects(res))\n  }\n\n  const handleModifyProject = (res) => {\n    dispatch(modifyProjects(res))\n  }\n\n  const handleRemoveProject = (res) => {\n    dispatch(removeProjects(res))\n  }\n\n  //init and listen to changes\n  useEffect(() => {\n    const unsubscribe = listenToProjects(\n      userId,\n      handleAddProject,\n      handleModifyProject,\n      handleRemoveProject\n    )\n    if (!userId) {\n      //unsubscribe before user check\n      unsubscribe()\n    }\n    return unsubscribe\n  }, [userId])\n\n  const history = useHistory()\n  const [isConfirming, setConfirm] = useState(false)\n\n  const handleToProject = (e, projectId) => {\n    if (e.target.ariaLabel === \"removeBtn\") {\n      setConfirm(projectId)\n    } else {\n      let location = {\n        pathname: `${match.url}/${projectId}/cards`,\n      }\n      history.push(location)\n    }\n  }\n\n  const handleClickOnConfirm = (e) => {\n    if (e.target.ariaLabel === \"remove\") {\n      removeProject_Fs(isConfirming)\n      setConfirm(false)\n    }\n    if (\n      e.target.ariaLabel === \"cancel\" ||\n      e.target.ariaLabel === \"background\"\n    ) {\n      setConfirm(false)\n    }\n  }\n\n  return (\n    <div className={styles.view}>\n      <Switch>\n        <Route exact path={match.path}>\n          {/* projects page */}\n\n          <Navbar type=\"default\" />\n          <div className={styles.container}>\n            {/* projects sections */}\n            {projects.map((project) => {\n              // console.log(project)\n              return (\n                // <Link to={`${match.url}/${project.id}`} >\n                <div\n                  key={project.id}\n                  className={styles.project}\n                  onClick={(e) => handleToProject(e, project.id)}\n                >\n                  <div\n                    aria-label=\"removeBtn\"\n                    className={styles.removeProject}\n                  ></div>\n                  <span className={styles.projectTitle}>{project.title}</span>\n                </div>\n                // </Link>\n              )\n            })}\n\n            {/* new project */}\n\n            <AddProject userId={userId} />\n\n            {/* pop-up confirmation  */}\n            {isConfirming && (\n              <div\n                aria-label=\"background\"\n                className={styles.background}\n                onClick={(e) => handleClickOnConfirm(e)}\n              >\n                <div className={styles.confirm_container}>\n                  <div className={styles.text}>\n                    執行刪除後將無法復原\n                    <br />\n                    您確定要刪除這個旅行計劃嗎？\n                  </div>\n\n                  <div className={styles.tools}>\n                    <div aria-label=\"remove\" className={styles.removeBtn}>\n                      刪除\n                    </div>\n                    <div aria-label=\"cancel\" className={styles.cancelBtn}>\n                      取消\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </Route>\n\n        {/* project page */}\n        <Route path={`${match.path}/:projectId`}>\n          <Project />\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nexport default Projects\n\nconst AddProject = ({ userId }) => {\n  const [isEditing, setEditing] = useState(false)\n  const [pendingTitle, setPendingTitle] = useState(\"\")\n  const [pendingMember, setPendingMember] = useState([])\n\n  let projectFormat = {\n    creater: \"\",\n    title: \"\",\n    members: [],\n    tags: [\n      {\n        color: \"orange\",\n        name: \"\",\n        id: nanoid(5),\n      },\n      {\n        color: \"blue\",\n        name: \"\",\n        id: nanoid(5),\n      },\n      {\n        color: \"yellow\",\n        name: \"\",\n        id: nanoid(5),\n      },\n      {\n        color: \"pink\",\n        name: \"\",\n        id: nanoid(5),\n      },\n      {\n        color: \"green\",\n        name: \"\",\n        id: nanoid(5),\n      },\n    ],\n    created_time: null,\n  }\n\n  const handleAddProject = () => {\n    if (pendingTitle === \"\") {\n      document.querySelector(\"#inputTitle\").focus()\n    } else {\n      projectFormat.creater = userId\n      projectFormat.title = pendingTitle\n      projectFormat.members.push(userId)\n      projectFormat.created_time = new Date()\n      addProject_Fs(projectFormat).then((res) => {\n        addProjectInUser_Fs(userId, res.id)\n      })\n\n      setEditing(!isEditing)\n      setPendingTitle(\"\")\n    }\n  }\n\n  return (\n    <div\n      className={styles.addProject_container}\n      onClick={() => {\n        !isEditing && setEditing(!isEditing)\n      }}\n    >\n      {!isEditing ? (\n        <span className={styles.projectTitle}>新增旅行</span>\n      ) : (\n        <div className={styles.addProject}>\n          {/* <div className={styles.header}>\n        \n          </div> */}\n          <div className={styles.main}>\n            <div className={styles.row}>\n              <div className={styles.caption}>旅行名稱</div>\n              <input\n                id=\"inputTitle\"\n                type=\"text\"\n                value={pendingTitle}\n                onChange={(e) => {\n                  setPendingTitle(e.target.value)\n                }}\n                placeholder=\"請輸入計劃名稱\"\n                autoFocus\n              />\n            </div>\n          </div>\n          <div className={styles.bottom}>\n            <div\n              className={styles.cancel}\n              onClick={() => {\n                setEditing(!isEditing)\n              }}\n            >\n              取消\n            </div>\n            <div className={styles.next} onClick={handleAddProject}>\n              繼續\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/projectsSlice.js",["188","189"],"import { createSlice } from \"@reduxjs/toolkit\"\nimport { getData, getFsData } from \"../../firebase/Config\"\n\nexport const projectsSlice = createSlice({\n  name: \"projects\",\n  initialState: [],\n  reducers: {\n    addProjects: (state, action) => {\n      let target = action.payload\n\n      //prevent repeatly adding\n      if (state.findIndex((project) => project.id === target.id) < 0) {\n        state.push(target)\n      }\n    },\n    removeProjects: (state, action) => {\n      let target = action.payload\n      let index = state.findIndex((project) => project.id === target.id)\n      state.splice(index, 1)\n    },\n    modifyProjects: (state, action) => {\n      let target = action.payload\n      let index = state.findIndex((project) => project.id === target.id)\n      state.splice(index, 1, target)\n    },\n\n    editProjectTitle: (state, action) => {\n      let target = state.find(\n        (project) => project.id === action.payload.projectId\n      )\n      target.title = action.payload.newTitle\n    },\n  },\n})\n\nexport const {\n  addProjects,\n  removeProjects,\n  modifyProjects,\n  editProjectTitle,\n} = projectsSlice.actions\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount))\n//   }, 1000)\n// }\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.projects.value)`\n// export const selectCount = (state) => state.projects.value\n\nexport default projectsSlice.reducer\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/Project.jsx",["190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210"],"import React, { useState, useEffect } from \"react\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n  useHistory,\n} from \"react-router-dom\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { nanoid } from \"@reduxjs/toolkit\"\n\nimport styles from \"./project.module.scss\"\n\nimport { ReactComponent as CardsIcon } from \"../../img/icon/cards.svg\"\nimport { ReactComponent as CalendarIcon } from \"../../img/icon/calendar.svg\"\nimport Navbar from \"../Navbar/Navbar\"\nimport ItineraryBoard from \"./feature/itineraryBoard/ItineraryBoard\"\nimport CardBoard from \"./feature/CardBoard/CardBoard\"\nimport Expenditure from \"./feature/Expenditure/Expenditure\"\nimport TodoList from \"./feature/TodoList/TodoList\"\n\nimport {\n  getFsData_Itinerary,\n  listenToDayplans,\n  listenToCard,\n  listenToMembers,\n} from \"../../firebase/Config\"\n\nimport { initItinerary } from \"./feature/itineraryBoard/itinerarySlice\"\nimport {\n  addDayplan,\n  modifyDayplan,\n  removeDayplan,\n} from \"./feature/itineraryBoard/dayplanSlice\"\nimport {\n  addCard,\n  modifyCard,\n  removeCard,\n  initCards,\n  modifyCardWithCheck,\n  clearCardsState,\n} from \"./feature/CardBoard/cardSlice\"\n\nimport {\n  addMember,\n  modifyMember,\n  removeMember,\n  clearMembersState,\n} from \"../User/membersSlice\"\n\nconst Project = () => {\n  // console.log(\"rerender Project component\")\n\n  let { projectId } = useParams()\n  let match = useRouteMatch()\n  const user = useSelector((state) => state.user)\n  let itineraryId = useSelector((state) => state.itinerary.id)\n  const cards = useSelector((state) => state.cards)\n  const dispatch = useDispatch()\n\n  const handleAddDayplan = (res) => {\n    dispatch(addDayplan(res))\n  }\n\n  const handleModifyDayplan = (res) => {\n    dispatch(modifyDayplan(res))\n  }\n\n  const handleRemoveDayplan = (res) => {\n    dispatch(removeDayplan(res))\n  }\n\n  const handleAddCard = (res, source) => {\n    dispatch(addCard(res))\n  }\n\n  const handleModifyCard = (res, source) => {\n    dispatch(modifyCard(res))\n  }\n\n  const checkModifyCard = (res) => {\n    dispatch(modifyCardWithCheck(res))\n  }\n\n  const handleRemoveCard = (res, source) => {\n    dispatch(removeCard(res))\n  }\n\n  const handleAddMember = (res, source) => {\n    let input = {\n      id: res.id,\n      name: res.name,\n      picture: res.picture,\n    }\n    dispatch(addMember(input))\n  }\n\n  const handleModifyMember = (res, source) => {\n    let input = {\n      id: res.id,\n      name: res.name,\n      picture: res.picture,\n    }\n    dispatch(modifyMember(input))\n  }\n\n  const handleRemoveMember = (res, source) => {\n    let input = {\n      id: res.id,\n      name: res.name,\n      picture: res.picture,\n    }\n    dispatch(removeMember(input))\n  }\n\n  //init and listen to changes\n  useEffect(() => {\n    // initial itinerary with latest version\n    // getFsData_Itinerary(projectId).then((itinerary) => {\n    //   //initial and listen to dayplans\n    //   // let unsubscribeToDayplan = listenToDayplans(\n    //   //   itinerary.id,\n    //   //   handleAddDayplan,\n    //   //   handleModifyDayplan,\n    //   //   handleRemoveDayplan\n    //   // )\n    //   dispatch(initItinerary(itinerary))\n    // })\n\n    let unsubscribeToCard = listenToCard(\n      projectId,\n      handleAddCard,\n      checkModifyCard,\n      // handleModifyCard,\n      handleRemoveCard\n    )\n\n    let unsubscribeToMembers = listenToMembers(\n      projectId,\n      handleAddMember,\n      handleModifyMember,\n      handleRemoveMember\n    )\n\n    return () => {\n      unsubscribeToCard()\n      unsubscribeToMembers()\n\n      //reset cards and memebers' state\n      dispatch(clearCardsState())\n      dispatch(clearMembersState())\n    }\n  }, [])\n\n  //check if user is in the project or not\n  const history = useHistory()\n  useEffect(() => {\n    if (user.id && !user.projects.includes(projectId)) {\n      alert(\"您沒有訪問這個旅行計劃的權限\")\n      history.replace({ pathname: \"/projects\" })\n    }\n  }, [user])\n\n  return (\n    <Switch>\n      <Route path={`${match.path}/itineraries`}>\n        <Navbar type=\"itineraries\" />\n        <ItineraryBoard />\n      </Route>\n      <Route path={`${match.path}/cards`}>\n        <Navbar type=\"cards\" />\n        <CardBoard />\n      </Route>\n    </Switch>\n  )\n}\n\nexport default Project\n\n//\n//<Route exact path={match.path}>\n//<Navbar type=\"project\" />\n//<div className={styles.container}>\n//  <ul>\n//    {/* <Link to={`${match.url}/todoList`}>待辦事項</Link> */}\n//      <CardsIcon className={styles.cardsIcon} />\n//      <div className={styles.title}>卡片板 </div>\n//    </Link>\n//\n//    {/* <Link to={`${match.url}/itineraries/${itineraryId}`}> */}\n//    <Link to={`${match.url}/itineraries/`}>\n//      <CalendarIcon className={styles.itineraryIcon} />\n//      <div className={styles.title}> 行程板 </div>\n//    </Link>\n//\n//    {/* <Link to={`${match.url}/expenditure`}>花費板</Link> */}\n//  </ul>\n//</div>\n//</Route>\n\n//<Route path={`${match.path}/expenditure`}>\n//        <Navbar type=\"expenditure\" />\n//        <Expenditure />\n//      </Route>\n//      <Route path={`${match.path}/todoList`}>\n//        <Navbar type=\"todoList\" />\n//        <TodoList />\n//      </Route>\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/Expenditure/Expenditure.jsx",["211","212"],"import React, { useState, useEffect } from \"react\"\n\n// import styles from \"../../../scss/cardBoard.module.scss\"\n\nconst Expenditure = () => {\n  return (\n    <div>\n      <br />\n      <br />\n      <br />\n      Expenditure\n    </div>\n  )\n}\n\nexport default Expenditure\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/CardBoard.jsx",["213","214","215","216","217"],"import React, { useState, useEffect } from \"react\"\nimport {\n  Link,\n  useRouteMatch,\n  useParams,\n  useLocation,\n  Route,\n  Switch,\n  useHistory,\n} from \"react-router-dom\"\nimport { useSelector, useDispatch } from \"react-redux\"\n\nimport styles from \"./cardBoard.module.scss\"\n\nimport { SmallCard, AddCard } from \"./component/SmallCard\"\nimport LargeCard from \"./component/LargeCard\"\n\nimport { AddCard_Fs } from \"../../../../firebase/Config\"\nimport { wait } from \"@testing-library/react\"\n\nconst CardBoard = () => {\n  // console.log(\"re-cardBoard\")\n\n  const cards = useSelector((state) => state.cards)\n  const { projectId } = useParams()\n  const project = useSelector((state) =>\n    state.projects.find((project) => project.id === projectId)\n  )\n  const match = useRouteMatch()\n\n  //////filter cards//////\n\n  //get searched tags from URL\n  const useQuery = () => {\n    let tagString = new URLSearchParams(useLocation().search).get(\"tag\")\n    return tagString ? tagString.split(\" \") : null\n  }\n  let searchTags = useQuery()\n\n  const findTagId = (tagName) => {\n    try {\n      return project.tags.find((tag) => tag.name === tagName).id\n    } catch {\n      return null\n    }\n  }\n\n  const filteredCard = () => {\n    return searchTags\n      ? cards.filter((card) => {\n          for (let i = 0; i < searchTags.length; i++) {\n            if (card.tags.includes(findTagId(searchTags[i]))) {\n              return true\n            }\n          }\n        })\n      : cards\n  }\n\n  //////add new card//////\n  const emptyCard = {\n    title: \"\",\n    description: \"\",\n    category: \"default\",\n    tags: [],\n    status: 0,\n    // cover_pic: \"https://fakeimg.pl/65x65/\",\n    isDragging: false,\n  }\n\n  const [addCard, toggleAddCard] = useState(false)\n  const [pendingInfo, setPendingInfo] = useState(emptyCard)\n  const dispatch = useDispatch()\n\n  const handleAddCard = (e) => {\n    let triggerElementId = [\"cardBoardContainer\"]\n    if (triggerElementId.includes(e.target.id)) {\n      let shouldAddCard = !(\n        JSON.stringify(pendingInfo) === JSON.stringify(emptyCard)\n      )\n\n      switch (shouldAddCard) {\n        case true: {\n          AddCard_Fs(projectId, pendingInfo)\n\n          toggleAddCard(!addCard)\n          setPendingInfo(emptyCard)\n\n          break\n        }\n\n        default: {\n          // toggleAddCard(!addCard)\n          toggleAddCard(!addCard)\n          break\n        }\n      }\n    }\n  }\n\n  return (\n    <div\n      id=\"cardBoardContainer\"\n      className={styles.container}\n      onClick={handleAddCard}\n    >\n      {filteredCard().map((card) => {\n        return (\n          <Link to={`${match.url}/${card.id}`} key={card.id}>\n            <SmallCard card={card} project={project} />\n          </Link>\n        )\n      })}\n      {addCard ? (\n        <AddCard pendingInfo={pendingInfo} setPendingInfo={setPendingInfo} />\n      ) : null}\n      <Switch>\n        <Route path={`${match.path}/:cardId`}>\n          <LargeCard />\n        </Route>\n      </Switch>\n      <div className={styles.addCardButton} onClick={() => toggleAddCard(true)}>\n        <div className={styles.tooltip_text}>新增卡片</div>\n      </div>\n    </div>\n  )\n}\n\nexport default CardBoard\n",["218","219"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/TodoList/TodoList.jsx",["220","221"],"import React, { useState, useEffect } from \"react\"\n\n// import styles from \"../../../scss/cardBoard.module.scss\"\n\nconst TodoList = () => {\n  return (\n    <div>\n      <br />\n      <br />\n      <br />\n      todoList\n    </div>\n  )\n}\n\nexport default TodoList\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Navbar/component/Title.jsx",["222","223","224","225","226","227","228","229","230"],"import React, { useState, useEffect } from \"react\"\nimport {\n  Link,\n  useRouteMatch,\n  useParams,\n  useLocation,\n  Route,\n  Switch,\n} from \"react-router-dom\"\nimport { useSelector, useDispatch } from \"react-redux\"\n\nimport styles from \"../navbar.module.scss\"\n\nimport { updateProject_Fs } from \"../../../firebase/Config\"\nimport { editProjectTitle } from \"../../Project/projectsSlice\"\n\nconst Title = ({ projectId, title }) => {\n  let projectTitle = title ? title : null\n  let [isEditing, setEditing] = useState(false)\n  let [pending, setPending] = useState(\"\")\n\n  //update pending\n  useEffect(() => {\n    setPending(projectTitle)\n  }, [projectTitle])\n\n  let dispatch = useDispatch()\n\n  const handleTitleEdit = (e) => {\n    if (e.type === \"blur\" || e.key === \"Enter\") {\n      //update cloud data\n      let change = {\n        title: e.target.value,\n      }\n      updateProject_Fs(projectId, change)\n\n      setEditing(!isEditing)\n    }\n  }\n\n  if (!isEditing) {\n    return (\n      <div\n        className={`${styles.project_title} ${styles.tooltip}`}\n        onClick={() => {\n          setEditing(!isEditing)\n        }}\n      >\n        {projectTitle}\n        <div className={styles.tooltip_text}>編輯名稱</div>\n      </div>\n    )\n  } else {\n    return (\n      <input\n        type=\"text\"\n        className={styles.project_title__edit}\n        value={pending}\n        onChange={(e) => setPending(e.target.value)}\n        onBlur={handleTitleEdit}\n        onKeyPress={handleTitleEdit}\n        autoFocus\n      />\n    )\n  }\n}\n\nexport default Title\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/component/SmallCard.jsx",["231","232","233","234","235"],"import React, { useState, useEffect, useRef } from \"react\"\nimport { colorCode } from \"../../../../lib\"\n\nimport styles from \"../cardBoard.module.scss\"\nimport { categoryTitle } from \"../../../../lib\"\nimport DayJS from \"react-dayjs\"\nimport { useParams } from \"react-router-dom\"\nimport {\n  listenToLinks,\n  listenToComments,\n  getLinksNumber_Fs,\n  getCommentsNumber_Fs,\n} from \"../../../../../firebase/Config\"\nimport { nanoid } from \"@reduxjs/toolkit\"\n\n// const fakeImg = \"https://fakeimg.pl/65x65/\"\n\nexport const SmallCard = ({ card, project }) => {\n  return (\n    <div id={card.id} className={styles.card_small}>\n      <div\n        className={styles.tag}\n        style={{ backgroundColor: colorCode[card.category] }}\n      ></div>\n      <div className={styles.info}>\n        {/* <div className={styles.card_small_picture}>\n          <img src={card.cover_pic} alt=\"pic\" />\n        </div> */}\n        <div className={styles.details}>\n          <div className={styles.title}>{card.title}</div>\n          <div className={styles.description}>{card.description}</div>\n        </div>\n        <div className={styles.small_card_icons}>\n          {/* show card's status  */}\n          {card.start_time && (\n            <div className={styles.small_card_icon__status}>\n              <DayJS format=\"MM/DD\">{card.start_time}</DayJS>\n            </div>\n          )}\n\n          {/* show card's link number  */}\n\n          <LinkIcon cardId={card.id} />\n\n          {/* show card's comment number  */}\n          <CommentIcon cardId={card.id} />\n\n          {/* fill empty  */}\n          <div className={styles.space}></div>\n\n          {/* show card's tags  */}\n          {card.tags.length > 0 &&\n            card.tags.map((tag) => {\n              try {\n                let target = project.tags.find((item) => item.id === tag)\n                return (\n                  <div\n                    key={nanoid()}\n                    style={{ backgroundColor: colorCode[target.color] }}\n                    className={styles.small_card_icon__tag}\n                  ></div>\n                )\n              } catch {\n                return null\n              }\n            })}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst CommentIcon = ({ cardId }) => {\n  const commentsNumber = useRef(0)\n\n  useEffect(() => {\n    const handleAdd = () => {\n      commentsNumber.current += 1\n    }\n\n    const handleModify = () => {\n      //do nothing\n    }\n    const handleRemove = () => {\n      commentsNumber.current -= 1\n    }\n\n    //listen to links number and handle counts\n    const unsubscribe = listenToComments(\n      cardId,\n      handleAdd,\n      handleModify,\n      handleRemove\n    )\n    return unsubscribe\n  }, [])\n\n  return commentsNumber.current > 0 ? (\n    <div className={styles.small_card_icon__comment}>\n      {commentsNumber.current}\n    </div>\n  ) : null\n}\n\nconst LinkIcon = ({ cardId }) => {\n  const linksNumber = useRef(0)\n\n  useEffect(() => {\n    const handleAdd = () => {\n      linksNumber.current += 1\n    }\n    const handleModify = () => {\n      //do nothing\n    }\n    const handleRemove = () => {\n      linksNumber.current -= 1\n    }\n\n    //listen to links number and handle counts\n    const unsubscribe = listenToLinks(\n      cardId,\n      handleAdd,\n      handleModify,\n      handleRemove\n    )\n    return unsubscribe\n  }, [])\n\n  return linksNumber.current > 0 ? (\n    <div className={styles.small_card_icon__link}>{linksNumber.current}</div>\n  ) : null\n}\n\nexport const AddCard = ({ pendingInfo, setPendingInfo, shouldAddCard }) => {\n  //category related\n  const [selectCategory, setCategory] = useState(false)\n  const toggleCategorySelect = (e) => {\n    if (e.target.id === \"pendingCategory\") {\n      setCategory(!selectCategory)\n    }\n  }\n  const updateCategory = (e) => {\n    setPendingInfo({\n      ...pendingInfo,\n      category: e.target.value,\n    })\n    setCategory(!selectCategory)\n  }\n\n  const updateTitle = (input) => {\n    setPendingInfo({ ...pendingInfo, title: input })\n  }\n\n  const updateDescription = (input) => {\n    setPendingInfo({ ...pendingInfo, description: input })\n  }\n\n  return (\n    <div className={styles.card_small}>\n      <div\n        id=\"pendingCategory\"\n        className={styles.tag}\n        style={{ backgroundColor: colorCode[pendingInfo.category] }}\n        onClick={toggleCategorySelect}\n      >\n        {selectCategory ? (\n          <SelectCategory\n            handleSelectCategory={updateCategory}\n            selected={pendingInfo.category}\n          />\n        ) : null}\n      </div>\n\n      <div className={styles.info}>\n        {/* <div className={styles.card_small_picture}>\n          <img src={fakeImg} alt=\"pic\" />\n        </div> */}\n        <div className={styles.details}>\n          <PendingTitle\n            pendingTitle={pendingInfo.title}\n            handleTitleUpdate={updateTitle}\n          />\n\n          <PendingDescription\n            pendingDescription={pendingInfo.description}\n            handleDescriptionUpdate={updateDescription}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\n////////////Title////////////\n\nconst PendingTitle = (props) => {\n  const [isEditing, setEditing] = useState(true)\n  const [pending, setPending] = useState(\"\")\n\n  let { pendingTitle, handleTitleUpdate } = props\n\n  const toggleInputTitle = (e) => {\n    if (e.target.id === \"pendingTitle\") {\n      setEditing(!isEditing)\n    }\n  }\n\n  const handleTitleEdit = (e) => {\n    if (e.type === \"blur\" || e.key === \"Enter\") {\n      if (e.target.value) {\n        setEditing(!isEditing)\n        handleTitleUpdate(e.target.value)\n      } else {\n        handleTitleUpdate(\"\")\n      }\n    }\n  }\n\n  if (isEditing) {\n    return (\n      <input\n        type=\"text\"\n        className={styles.inputTitle}\n        placeholder=\"請輸入標題\"\n        value={pending}\n        onChange={(e) => setPending(e.target.value)}\n        onBlur={handleTitleEdit}\n        onKeyPress={handleTitleEdit}\n        autoFocus\n      />\n    )\n  } else {\n    return (\n      <div\n        id=\"pendingTitle\"\n        className={styles.title}\n        onClick={toggleInputTitle}\n      >\n        {pendingTitle}\n      </div>\n    )\n  }\n}\n\n////////////Description////////////\n\nconst PendingDescription = (props) => {\n  const [isEditing, setEditing] = useState(true)\n  const [pending, setPending] = useState(\"\")\n\n  let { pendingDescription, handleDescriptionUpdate } = props\n\n  const toggleInputDescription = (e) => {\n    if (e.target.id === \"pendingDescription\") {\n      setEditing(!isEditing)\n    }\n  }\n\n  const handleTitleEdit = (e) => {\n    if (e.type === \"blur\" || e.key === \"Enter\") {\n      if (e.target.value) {\n        setEditing(!isEditing)\n        handleDescriptionUpdate(e.target.value)\n      } else {\n        handleDescriptionUpdate(\"\")\n      }\n    }\n  }\n\n  if (isEditing) {\n    return (\n      <textarea\n        type=\"text\"\n        className={styles.inputDescription}\n        placeholder=\"對卡片增加描述\"\n        value={pending}\n        onChange={(e) => setPending(e.target.value)}\n        onBlur={handleTitleEdit}\n        onKeyPress={handleTitleEdit}\n      />\n    )\n  } else {\n    return (\n      <div\n        id=\"pendingDescription\"\n        className={styles.description}\n        onClick={toggleInputDescription}\n      >\n        {pendingDescription}\n      </div>\n    )\n  }\n}\n\n////////////Category////////////\n\nconst SelectCategory = ({ selected, handleSelectCategory }) => {\n  const categories = [\"hotel\", \"activity\", \"site\", \"food\", \"commute\", \"default\"]\n\n  return (\n    <div className={styles.selectCategory}>\n      {categories.map((category) => {\n        return (\n          <option\n            key={nanoid()}\n            value={category}\n            style={{\n              backgroundColor: colorCode[category],\n            }}\n            className={\n              selected === category\n                ? `${styles.option} ${styles.current}`\n                : styles.option\n            }\n            onClick={handleSelectCategory}\n          >\n            {categoryTitle(category)}\n          </option>\n        )\n      })}\n    </div>\n  )\n}\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/component/LargeCard.jsx",["236","237","238","239","240","241","242"],"import React, { useState, useRef, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {\n  Link,\n  useRouteMatch,\n  useParams,\n  useLocation,\n  Route,\n  Switch,\n  useHistory,\n} from \"react-router-dom\"\n\nimport styles from \"./largeCard.module.scss\"\n\nimport {\n  updateCard_Fs,\n  removeCard_Fs,\n  listenToComments,\n  listenToLinks,\n  addComment_Fs,\n  updateComment_Fs,\n  removeComment_Fs,\n  addLink_Fs,\n  updateLink_Fs,\n  removeLink_Fs,\n} from \"../../../../../firebase/Config\"\nimport { nanoid } from \"@reduxjs/toolkit\"\n\nimport Tags, { AddTag, ChangeMainTag } from \"./Tags\"\n\n//DatesPicker\nimport DatePicker from \"react-datepicker\"\nimport \"react-datepicker/dist/react-datepicker.css\"\n\nimport { getTime, getColor, resetTime, colorCode } from \"../../../../lib\"\n\nconst LargeCard = () => {\n  const { projectId, cardId } = useParams()\n  const card = useSelector((state) =>\n    state.cards.find((card) => card.id === cardId)\n  )\n  const history = useHistory()\n  const dispatch = useDispatch()\n\n  //////updates//////\n  const updateTitle = (input) => {\n    let change = {\n      title: input,\n    }\n    updateCard_Fs(projectId, cardId, change)\n  }\n\n  const updateDescription = (input) => {\n    let change = {\n      description: input,\n    }\n    updateCard_Fs(projectId, cardId, change)\n  }\n\n  //handle close\n  const close = (e) => {\n    let triggerElementId = [\"closeBtn\", \"largeCardBackground\"]\n\n    // close floating menu if onblur\n    if (isfloating && e.target.ariaLabel !== isfloating.type) {\n      //prevent close on react-datepicker\n      if (\n        e.target.className.slice(0, 5) === \"react\" ||\n        e.target.getAttribute(\"aria-labelledBy\") === \"addTime\"\n      ) {\n        return\n      }\n\n      setFloat(false)\n      //close card if click on click btn\n      if (e.target.id === \"closeBtn\") {\n        history.goBack()\n      }\n      return\n    }\n\n    //close card\n    if (triggerElementId.includes(e.target.id)) {\n      history.goBack()\n      return\n    }\n  }\n\n  //float menu\n  const [isfloating, setFloat] = useState(false)\n  const sideBar_addLink = useRef(null)\n  const sideBar_addTime = useRef(null)\n  const sideBar_remove = useRef(null)\n\n  const handleFloatMenu = (type, ref) => {\n    if (!isfloating) {\n      let float = {\n        type: type,\n        position: ref.current.getBoundingClientRect(),\n      }\n      setFloat(float)\n    } else {\n      setFloat(false)\n    }\n  }\n\n  //links\n  const [links, setLinks] = useState([])\n  useEffect(() => {\n    let unsubscribe = listenToLinks(\n      cardId,\n      handleAddLink,\n      handleModifyLink,\n      handleRemoveLink\n    )\n\n    return unsubscribe\n  }, [])\n\n  const handleAddLink = (res) => {\n    if (links.findIndex((link) => link.id === res.id) < 0) {\n      setLinks((prev) => [...prev, res])\n    }\n  }\n\n  const handleModifyLink = (res) => {\n    setLinks((prev) =>\n      prev.map((link) => {\n        return link.id === res.id ? res : link\n      })\n    )\n  }\n\n  const handleRemoveLink = (res, source) => {\n    setLinks((prev) => prev.filter((link) => link.id !== res.id))\n  }\n\n  try {\n    return (\n      <div\n        id=\"largeCardBackground\"\n        className={styles.card_large_background}\n        onClick={close}\n      >\n        <div className={styles.card_large}>\n          {/* header */}\n          <div className={styles.card_header}>\n            <div className={styles.tag_icon}></div>\n            <Title title={card.title} handleUpdateTitle={updateTitle} />\n            <div id=\"closeBtn\" className={styles.card_close}></div>\n          </div>\n\n          {/* main */}\n          <div className={styles.card_main}>\n            {/* tag section */}\n            <Tags\n              card={card}\n              projectId={projectId}\n              isfloating={isfloating}\n              setFloat={setFloat}\n            />\n\n            {/* discription section */}\n            <Description\n              description={card.description}\n              handleUpdateDescription={updateDescription}\n            />\n            {links.length > 0 && (\n              <Links\n                links={links}\n                isfloating={isfloating}\n                setFloat={setFloat}\n              />\n            )}\n\n            {/* comments section */}\n            <Comments cardId={cardId} projectId={projectId} />\n          </div>\n\n          {/* side bar */}\n          <div className={styles.card_sideBar}>\n            <div className={styles.title}>新增至卡片</div>\n            <div className={styles.sidebar_button_todo}>待辦事項</div>\n            {card.links ? null : (\n              <div\n                aria-label=\"addLink\"\n                ref={sideBar_addLink}\n                className={styles.sidebar_button_addlink}\n                onClick={() => {\n                  handleFloatMenu(\"addLink\", sideBar_addLink)\n                }}\n              >\n                附件\n              </div>\n            )}\n            <div className={styles.sidebar_button_expenditure}>預估花費</div>\n            <div\n              aria-label=\"addTime\"\n              ref={sideBar_addTime}\n              className={styles.sidebar_button_addtime}\n              onClick={() => {\n                handleFloatMenu(\"addTime\", sideBar_addTime)\n              }}\n            >\n              安排時間\n            </div>\n            <RedirectButton card={card} />\n\n            <div\n              aria-label=\"remove\"\n              ref={sideBar_remove}\n              className={styles.sidebar_button_remove}\n              onClick={() => {\n                handleFloatMenu(\"remove\", sideBar_remove)\n              }}\n            >\n              刪除\n            </div>\n          </div>\n\n          {/* float menu */}\n          <FloatMenu\n            card={card}\n            cardId={cardId}\n            isfloating={isfloating}\n            setFloat={setFloat}\n          />\n        </div>\n      </div>\n    )\n  } catch {\n    return null\n  }\n}\nexport default LargeCard\n\nconst RedirectButton = ({ card }) => {\n  const { projectId } = useParams()\n  const history = useHistory()\n\n  const handleRedirect = (type, card) => {\n    if (type === \"itinerary\") {\n      // let startDate = resetTime(new Date(card.start_time))\n      // let location = {\n      //   pathname: `/projects/${projectId}/itineraries`,\n      //   state: { startDate: startDate },\n      // }\n      // history.push(location)\n      history.push(`/projects/${projectId}/itineraries`)\n    }\n\n    if (type === \"cards\") {\n      let location = {\n        pathname: `/projects/${projectId}/cards`,\n      }\n      history.push(location)\n    }\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/projects/:projectId/cards/:cardId\">\n        <div\n          aria-label=\"redirect\"\n          className={styles.sidebar_button_redirect__itinerary}\n          onClick={() => {\n            handleRedirect(\"itinerary\", card)\n          }}\n        >\n          前往行程板\n        </div>\n      </Route>\n      <Route path=\"/projects/:projectId/itineraries/:cardId\">\n        <div\n          aria-label=\"redirect\"\n          className={styles.sidebar_button_redirect__itinerary}\n          onClick={() => {\n            handleRedirect(\"cards\", card)\n          }}\n        >\n          前往卡片板\n        </div>\n      </Route>\n    </Switch>\n  )\n}\n\n////////////floating menu////////////\nconst FloatMenu = ({ card, cardId, isfloating, setFloat }) => {\n  switch (isfloating.type) {\n    case \"addLink\": {\n      return (\n        <AddLink isfloating={isfloating} setFloat={setFloat} cardId={cardId} />\n      )\n    }\n    case \"addTime\": {\n      return <AddTime card={card} isfloating={isfloating} setFloat={setFloat} />\n    }\n    case \"addTag\": {\n      return <AddTag card={card} isfloating={isfloating} setFloat={setFloat} />\n    }\n\n    case \"changeMainTag\": {\n      return (\n        <ChangeMainTag\n          card={card}\n          isfloating={isfloating}\n          setFloat={setFloat}\n        />\n      )\n    }\n    case \"remove\": {\n      return <Remove isfloating={isfloating} setFloat={setFloat} />\n    }\n    default: {\n      return null\n    }\n  }\n}\n\nconst Remove = ({ isfloating, setFloat }) => {\n  const { projectId, cardId } = useParams()\n  const history = useHistory()\n  const match = useRouteMatch()\n\n  const handleRemove = () => {\n    removeCard_Fs(projectId, cardId)\n    setFloat(false)\n    history.replace({ pathname: match.url.slice(0, -(cardId.length + 1)) })\n  }\n\n  return (\n    <div\n      aria-label=\"remove\"\n      className={styles.remove_container}\n      style={{\n        position: \"fixed\",\n        width: `${isfloating.position.width}px`,\n        left: `${isfloating.position.x}px`,\n        top: `${isfloating.position.y + 40}px`,\n      }}\n    >\n      <div aria-label=\"remove\" className={styles.remove_span}>\n        此動作將無法復原，確定要將這張卡片刪除嗎？\n      </div>\n      <div aria-label=\"remove\" className={styles.remove_buttons}>\n        <div\n          aria-label=\"remove\"\n          className={styles.remove_buttons__cancel}\n          onClick={() => {\n            setFloat(false)\n          }}\n        >\n          取消\n        </div>\n        <div\n          aria-label=\"remove\"\n          className={styles.remove_buttons__confirm}\n          onClick={handleRemove}\n        >\n          確定\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst AddTime = ({ card, isfloating, setFloat }) => {\n  const { projectId, cardId } = useParams()\n\n  //input time holder\n  const [startDate, setStartDate] = useState(resetTime(new Date()))\n  const [endDate, setEndDate] = useState(resetTime(new Date()))\n\n  useEffect(() => {\n    //update time to the latest value\n    try {\n      if (card.start_time && card.end_time) {\n        setStartDate(new Date(card.start_time))\n        setEndDate(new Date(card.end_time))\n      }\n    } catch {}\n  }, [])\n\n  const handleAddTime = () => {\n    if (\n      //check is input valid\n      endDate - startDate < 0 ||\n      endDate - startDate > 24 * 60 * 60 * 1000 ||\n      endDate.getDate() !== startDate.getDate()\n    ) {\n      alert(\"日期格式有誤，目前僅接受在同一天開始與結束的時間\")\n    } else {\n      //update to cloud database\n      let change = {\n        status: 1,\n        start_time: startDate,\n        end_time: endDate,\n      }\n      updateCard_Fs(projectId, cardId, change)\n      setFloat(false)\n    }\n  }\n\n  return (\n    <div\n      aria-label=\"addTime\"\n      className={styles.addTime_container}\n      style={{\n        position: \"fixed\",\n        width: `${isfloating.position.width}px`,\n        left: `${isfloating.position.x}px`,\n        top: `${isfloating.position.y + 40}px`,\n      }}\n    >\n      <div aria-label=\"addTime\" className={styles.addLink_span}>\n        開始時間\n      </div>\n      <DaySelect date={startDate} setDate={setStartDate} />\n      <div aria-label=\"addTime\" className={styles.addLink_span}>\n        結束時間\n      </div>\n      <DaySelect date={endDate} setDate={setEndDate} />\n      <div\n        aria-label=\"addTime\"\n        className={styles.addLink_button}\n        onClick={handleAddTime}\n      >\n        儲存\n      </div>\n    </div>\n  )\n}\n\nconst DaySelect = ({ date, setDate }) => {\n  //show dates with plans\n  const plannedCards = useSelector((state) => state.cards).filter(\n    (card) => card.status === 1\n  )\n\n  const getDate = (type, string) => {\n    switch (type) {\n      case \"dateObj\": {\n        let time = new Date(string)\n        return time\n      }\n\n      case \"date\": {\n        let time = new Date(string)\n        return time.getDate()\n      }\n      case \"month\": {\n        let time = new Date(string)\n        return time.getMonth()\n      }\n      case \"year\": {\n        let time = new Date(string)\n        return time.getFullYear()\n      }\n      default: {\n        break\n      }\n    }\n  }\n\n  const hasPlan = (date) => {\n    if (\n      plannedCards.findIndex(\n        (card) =>\n          getDate(\"dateObj\", card.start_time) - date < 24 * 60 * 60 * 1000 &&\n          getDate(\"dateObj\", card.start_time) - date > 0\n      ) > -1\n    ) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  return (\n    <DatePicker\n      ariaLabelledBy=\"addTime\"\n      selected={date}\n      onChange={(date) => setDate(date)}\n      className={styles.input}\n      showTimeSelect\n      dateFormat=\"Pp\"\n      popperClassName={styles.popper}\n      popperModifiers={{\n        offset: {\n          enabled: true,\n          offset: \"-10px, -5px\",\n        },\n        preventOverflow: {\n          enabled: true,\n          escapeWithReference: true,\n          boundariesElement: \"viewport\",\n        },\n      }}\n      wrapperClassName={styles.react_datepicker_wrapper}\n      dayClassName={(date) => (hasPlan(date) ? styles.hasPlan : undefined)}\n    />\n  )\n}\n\nconst AddLink = ({ isfloating, setFloat, cardId }) => {\n  //input link holder\n  const [url, setUrl] = useState(\"\")\n  // const [loading, setLoading] = useState(false)\n\n  const handleSubmit = async (e) => {\n    // setLoading(true)\n    setFloat(false)\n    const cors = \"https://cors-anywhere.herokuapp.com/\"\n    // const url = \"https://andy6804tw.github.io/2019/09/21/fix-cors-problem/\"\n\n    const res = await fetch(cors + url)\n    const data = await res.text()\n\n    var parser = new DOMParser()\n    var doc = parser.parseFromString(data, \"text/html\")\n    let title = doc.querySelector(\"title\").textContent\n    let img = doc.querySelector(\"body\").querySelector(\"img\")\n\n    //// img converter ////\n    // get src\n    img = img ? img.src : \"\"\n\n    //update domain if using relative path\n    let myOrigin = window.location.origin\n    if (img.slice(0, myOrigin.length) === myOrigin) {\n      let correctOrigin = new URL(url).origin\n      let correctImgPath = correctOrigin + img.slice(origin.length)\n      img = correctImgPath\n    }\n\n    let pending = {\n      card_id: cardId,\n      url: url,\n      title: title,\n      img: img,\n      date: new Date(),\n    }\n\n    ///update fiebase\n    addLink_Fs(pending)\n    // setLoading(false)\n    setUrl(\"\")\n  }\n\n  return (\n    <div\n      aria-label=\"addLink\"\n      className={styles.addLink_container}\n      style={{\n        position: \"fixed\",\n        left: `${isfloating.position.x}px`,\n        top: `${isfloating.position.y + 40}px`,\n      }}\n    >\n      <div aria-label=\"addLink\" className={styles.addLink_span}>\n        附加連結\n      </div>\n      <input\n        aria-label=\"addLink\"\n        type=\"text\"\n        value={url}\n        onChange={(e) => setUrl(e.target.value)}\n        placeholder=\"請貼上連結\"\n        className={styles.addLink_input}\n        autoFocus\n      />\n      <div\n        aria-label=\"addLink\"\n        className={styles.addLink_button}\n        onClick={url ? handleSubmit : null}\n      >\n        附加\n      </div>\n    </div>\n  )\n}\n\n////////////Title////////////\n\nconst Title = ({ title, handleUpdateTitle }) => {\n  const [isEditing, setEditing] = useState(false)\n  const [pending, setPending] = useState(title)\n\n  const handleTitleEdit = (e) => {\n    if (e.type === \"blur\" || e.key === \"Enter\") {\n      if (e.target.value) {\n        setEditing(!isEditing)\n        handleUpdateTitle(e.target.value)\n      } else {\n        alert(\"請輸入卡片標題\")\n      }\n    }\n  }\n\n  // if (isEditing) {\n  return (\n    <input\n      type=\"text\"\n      className={styles.card_title_edit}\n      value={pending}\n      onChange={(e) => setPending(e.target.value)}\n      onBlur={handleTitleEdit}\n      onKeyPress={handleTitleEdit}\n    />\n  )\n  // } else {\n  //   return (\n  //     <div\n  //       id=\"largeCardTitle\"\n  //       className={styles.card_title}\n  //       onClick={() => setEditing(!isEditing)}\n  //     >\n  //       {title}\n  //     </div>\n  //   )\n  // }\n}\n\n////////////Description////////////\n\nconst Description = ({ description, handleUpdateDescription }) => {\n  const [isEditing, setEditing] = useState(false)\n  const [pending, setPending] = useState(description)\n\n  const handleSave = (e) => {\n    handleUpdateDescription(pending ? pending : \"\")\n\n    setEditing(false)\n  }\n\n  const textAreaRef = useRef(0)\n  const handleEdit = (e) => {\n    try {\n      // console.log(e)\n      setPending(e.target.value)\n\n      //auto-grow textarea\n      let height = parseInt(getComputedStyle(e.target).height.slice(0, -2))\n      let lineHeight = parseInt(\n        getComputedStyle(e.target).lineHeight.slice(0, -2)\n      )\n      let padding = parseInt(getComputedStyle(e.target).padding.slice(0, -2))\n\n      if (e.target.scrollHeight > height) {\n        textAreaRef.current.style.height = `${\n          e.target.scrollHeight + padding * 2\n        }px`\n      } else {\n        while (height >= e.target.scrollHeight && e.target.scrollHeight >= 54) {\n          textAreaRef.current.style.height = `${height - lineHeight}px`\n          height -= lineHeight\n        }\n        textAreaRef.current.style.height = `${height + lineHeight}px`\n      }\n    } catch {\n      console.error()\n    }\n  }\n\n  return (\n    <div className={styles.description_section}>\n      <div className={styles.controll_bar}>\n        <div className={styles.title}>描述</div>\n\n        {/* edit/save btn */}\n        {!isEditing && (\n          <div\n            className={styles.edit_button}\n            onClick={(e) => {\n              console.log(e)\n              setEditing(!isEditing)\n            }}\n          >\n            編輯\n          </div>\n        )}\n      </div>\n\n      <div className={styles.container}>\n        {/* textarea/display section */}\n        {isEditing ? (\n          <textarea\n            ref={textAreaRef}\n            className={styles.inputDescription}\n            type=\"text\"\n            placeholder=\"在這裡新增描述...\"\n            value={pending}\n            onChange={handleEdit}\n            onBlurCapture={handleSave}\n            autoFocus\n          />\n        ) : (\n          <pre\n            className={styles.description}\n            style={!description ? { color: \"gray\" } : null}\n            onClick={() => setEditing(!isEditing)}\n          >\n            {description ? description : \"在這裡新增描述...\"}\n          </pre>\n        )}\n\n        {isEditing && (\n          <div className={styles.save_button} aria-label=\"saveButton\">\n            儲存\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\n////////////Links////////////\n\nconst Links = ({ links, isfloating, setFloat }) => {\n  const toggleAddLinkBtnRef = useRef(1)\n\n  const toggleAddLinkBtn = (e) => {\n    if (isfloating.type === \"addLink\") {\n      setFloat(false)\n    } else {\n      let float = {\n        type: \"addLink\",\n        position: toggleAddLinkBtnRef.current.getBoundingClientRect(),\n      }\n\n      setFloat(float)\n    }\n  }\n\n  return (\n    <div className={styles.link_section}>\n      <div className={styles.title}>附件</div>\n      <div className={styles.container}>\n        {/* {loading && <h3>Fetching link previews... 🤔🤔🤔</h3>} */}\n        {links.map((data) => (\n          <LinkItem key={data.url} data={data} />\n        ))}\n\n        <div\n          className={styles.toggleAddLinkBtn}\n          onClick={toggleAddLinkBtn}\n          ref={toggleAddLinkBtnRef}\n        >\n          增加附件\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst LinkItem = ({ data }) => {\n  const title = useRef(0)\n\n  const getTitle = () => {\n    //slice the title more precisely, but only works when re-render\n    // if (title.current.scrollHeight > title.current.clientHeight) {\n    //   while (title.current.scrollHeight > title.current.clientHeight) {\n    //     title.current.textContent = title.current.textContent.slice(0, -1)\n    //   }\n    //   title.current.textContent = title.current.textContent.slice(0, -3) + \"...\"\n    //   return title.current.textContent\n    // }\n\n    // for the first render, slice with rough length\n    if (data.title.length > 43) {\n      return data.title.slice(0, 43) + \"...\"\n    } else {\n      return data.title\n    }\n  }\n\n  const [isEditing, setEditing] = useState(false)\n  const [pending, setPending] = useState(data.title)\n\n  const handleEditTitle = (e) => {\n    if ((e.target.ariaLabel = \"editBtn\")) {\n      if (isEditing && data.title !== pending) {\n        updateLink(pending)\n        setEditing(!isEditing)\n      } else {\n        setEditing(!isEditing)\n      }\n    }\n  }\n\n  const updateLink = (input) => {\n    let change = {\n      title: input,\n    }\n    updateLink_Fs(data.id, change)\n  }\n\n  const removeLink = (e) => {\n    if ((e.target.ariaLabel = \"removeBtn\")) {\n      let yes = window.confirm(\"你確定要刪除這個附件嗎？\")\n\n      if (yes) {\n        removeLink_Fs(data.id)\n      }\n    }\n  }\n\n  return (\n    <div className={styles.link_container}>\n      <a\n        className={styles.preview_img}\n        href={data.url}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Link\n        {data.img && <img src={data.img} alt=\"link\" />}\n      </a>\n      <div className={styles.link_info}>\n        {isEditing ? (\n          <textarea\n            className={styles.message}\n            value={pending}\n            onChange={(e) => setPending(e.target.value)}\n            autoFocus\n          />\n        ) : (\n          <a\n            className={styles.link_info__title}\n            ref={title}\n            href={data.url}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            {getTitle()}\n          </a>\n        )}\n\n        <div className={styles.tools}>\n          <div className={styles.time}>{getTime(data.date)}</div>\n          <div\n            aria-label=\"removeBtn\"\n            className={styles.edit_button}\n            onClick={removeLink}\n          >\n            移除\n          </div>\n          <div\n            aria-label=\"editBtn\"\n            className={styles.edit_button}\n            onClick={handleEditTitle}\n          >\n            編輯\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n//////Comments//////\n\nconst Comments = ({ cardId, projectId }) => {\n  const userId = useSelector((state) => state.user.id)\n  const [comments, setComments] = useState([])\n  //get data from cloud\n  useEffect(() => {\n    let unsubscribe = listenToComments(\n      cardId,\n      handleAdd,\n      handleModify,\n      handleRemove\n    )\n\n    return unsubscribe\n  }, [])\n\n  const handleAdd = (res, source) => {\n    //prevent repeatly adding when itinitallizing\n    if (comments.findIndex((comment) => comment.id === res.id) < 0) {\n      setComments((prev) => [...prev, res])\n    }\n  }\n\n  const handleModify = (res) => {\n    setComments((prev) =>\n      prev.map((comment) => {\n        return comment.id === res.id ? res : comment\n      })\n    )\n  }\n\n  const handleRemove = (res, source) => {\n    setComments((prev) => prev.filter((comment) => comment.id !== res.id))\n  }\n\n  return (\n    <div className={styles.comments_section}>\n      <div className={styles.controll_bar}>\n        <div className={styles.title}>留言</div>\n      </div>\n      <div className={styles.container}>\n        {/* comment */}\n        <AddComment cardId={cardId} userId={userId} />\n        {comments.map((comment) => {\n          return <Comment key={nanoid()} comment={comment} userId={userId} />\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst AddComment = ({ cardId, userId }) => {\n  const userName = useSelector((state) => state.user.name)\n  const [pending, setPending] = useState(\"\")\n\n  const addComment = (e) => {\n    if (e.key === \"Enter\" && pending !== \"\") {\n      let input = {\n        card_id: cardId,\n        sender_id: userId,\n        content: pending,\n        date: new Date(),\n      }\n      //update cloud data\n      addComment_Fs(input)\n      setPending(\"\")\n    }\n  }\n\n  return (\n    <div className={styles.comment}>\n      <div\n        className={styles.user}\n        style={{\n          marginTop: \"7px\",\n          backgroundColor: getColor(userId),\n        }}\n      >\n        {userName[0]}\n      </div>\n      <div className={styles.details}>\n        <input\n          className={styles.add_message}\n          value={pending}\n          onChange={(e) => setPending(e.target.value)}\n          placeholder=\"撰寫留言\"\n          onKeyPress={addComment}\n        />\n      </div>\n    </div>\n  )\n}\n\nconst Comment = ({ comment, userId }) => {\n  const isMyComment = userId === comment.sender_id\n\n  //edit comment\n  const [isEditing, setEditing] = useState(false)\n  const [pending, setPending] = useState(comment.content)\n  const handleEditComment = (e) => {\n    if ((e.target.ariaLabel = \"editBtn\")) {\n      if (isEditing) {\n        updateComment(pending)\n        setEditing(!isEditing)\n      } else {\n        setEditing(!isEditing)\n      }\n    }\n  }\n\n  const updateComment = (input) => {\n    let change = {\n      content: input,\n    }\n    updateComment_Fs(comment.id, change)\n  }\n\n  const removeComment = (e) => {\n    if ((e.target.ariaLabel = \"removeBtn\")) {\n      let yes = window.confirm(\"你確定要刪除這則留言嗎？\")\n\n      if (yes) {\n        removeComment_Fs(comment.id)\n      }\n    }\n  }\n\n  const sender = useSelector((state) =>\n    state.members.find((member) => member.id === comment.sender_id)\n  )\n\n  try {\n    return (\n      <div className={styles.comment}>\n        <div\n          className={styles.user}\n          style={{ backgroundColor: getColor(sender.id) }}\n        >\n          {sender.name[0]}\n        </div>\n        <div className={styles.details}>\n          <div className={styles.info}>\n            <div className={styles.name}>{sender.name}</div>\n            <div className={styles.time}>{getTime(comment.date)}</div>\n          </div>\n\n          {isEditing ? (\n            <textarea\n              className={styles.message}\n              value={pending}\n              onChange={(e) => setPending(e.target.value)}\n              autoFocus\n            />\n          ) : (\n            <pre className={styles.message}>{comment.content} </pre>\n          )}\n\n          {isMyComment ? (\n            <div className={styles.tools}>\n              <div\n                aria-label=\"editBtn\"\n                className={styles.edit_button}\n                onClick={handleEditComment}\n              >\n                編輯\n              </div>\n              <div\n                aria-label=\"removeBtn\"\n                className={styles.edit_button}\n                onClick={removeComment}\n              >\n                刪除\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    )\n  } catch {\n    return null\n  }\n}\n","/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/User/membersSlice.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/lib.js",[],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/User/User.jsx",["243","244","245","246","247","248","249"],"/Users/galele/unSycFile/appworksSchool/personalProject/PPlanner/my-app/src/pages/Project/feature/CardBoard/component/Tags.jsx",["250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"import React, { useState, useRef, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {\n  Link,\n  useRouteMatch,\n  useParams,\n  useLocation,\n  Route,\n  Switch,\n  useHistory,\n} from \"react-router-dom\"\n\nimport styles from \"./largeCard.module.scss\"\n\nimport {\n  updateCard_Fs,\n  listenToComments,\n  listenToLinks,\n  addComment_Fs,\n  updateComment_Fs,\n  removeComment_Fs,\n  addLink_Fs,\n  updateLink_Fs,\n  removeLink_Fs,\n  updateProject_Fs,\n} from \"../../../../../firebase/Config\"\nimport { nanoid } from \"@reduxjs/toolkit\"\n\n//DatesPicker\nimport DatePicker from \"react-datepicker\"\nimport \"react-datepicker/dist/react-datepicker.css\"\n\nimport { colorCode, categoryTitle, categories } from \"../../../../lib\"\n\nconst Tags = ({ projectId, card, isfloating, setFloat }) => {\n  const project = useSelector((state) =>\n    state.projects.find((project) => project.id === projectId)\n  )\n\n  const toggleAddTag = (e) => {\n    let float = {\n      type: \"addTag\",\n      position: e.target.getBoundingClientRect(),\n    }\n\n    setFloat(float)\n  }\n\n  const toggleChangeMainTag = (e) => {\n    let float = {\n      type: \"changeMainTag\",\n      position: e.target.getBoundingClientRect(),\n    }\n\n    setFloat(float)\n  }\n  try {\n    return (\n      <div className={styles.tags_section}>\n        <div className={styles.title}>標籤</div>\n        <div className={styles.container}>\n          {/* category tag */}\n          <div\n            aria-label=\"addTag\" //need to be able to change category\n            className={styles.tag}\n            style={{ backgroundColor: colorCode[card.category] }}\n            onClick={toggleChangeMainTag}\n          >\n            {categoryTitle(card.category)}\n          </div>\n\n          {/* regular tags */}\n          {card.tags.map((tag) => {\n            let target = project.tags.find((item) => item.id === tag)\n\n            return (\n              <div\n                aria-label=\"addTag\"\n                key={nanoid()}\n                className={styles.tag}\n                style={{\n                  backgroundColor: colorCode[target.color],\n                }}\n                onClick={toggleAddTag}\n              >\n                {target.name}\n              </div>\n            )\n          })}\n          <div\n            aria-label=\"addTag\"\n            className={styles.tag}\n            onClick={toggleAddTag}\n          >\n            +\n          </div>\n        </div>\n      </div>\n    )\n  } catch (err) {\n    console.log(err.message)\n    return null\n  }\n}\n\nexport default Tags\n\nexport const AddTag = ({ card, isfloating, setFloat }) => {\n  const { projectId, cardId } = useParams()\n\n  const tags = useSelector(\n    (state) => state.projects.find((project) => project.id === projectId).tags\n  )\n\n  const toggleTag = (e) => {\n    let index = card.tags.findIndex((tag) => tag === e.target.dataset.tagid)\n    let newTags\n    if (index > -1) {\n      //delete if tag exists\n      newTags = Array.from(card.tags)\n      newTags.splice(index, 1)\n\n      let change = {\n        tags: newTags,\n      }\n      updateCard_Fs(projectId, cardId, change)\n    } else {\n      //add if not exists\n      newTags = Array.from(card.tags)\n      newTags.push(e.target.dataset.tagid)\n\n      let change = {\n        tags: newTags,\n      }\n      updateCard_Fs(projectId, cardId, change)\n    }\n  }\n\n  const [isEditing, setEditing] = useState(false)\n  const [onChangeTagId, setChangingTag] = useState(null)\n  const [pending, setPending] = useState(\"\")\n\n  const handleEditTag = (tagId, tagName) => {\n    if (isEditing) {\n      setPending(tagName)\n      setChangingTag(tagId)\n    } else {\n      setPending(tagName)\n      setChangingTag(tagId)\n      setEditing(true)\n    }\n  }\n\n  const saveEditTag = () => {\n    if (\n      isEditing &&\n      tags.find((tag) => tag.id === onChangeTagId).name !== pending\n    ) {\n      let newTags = []\n      tags.forEach((tag) => {\n        let temp = {}\n        for (let key in tag) {\n          temp[key] = tag[key]\n        }\n        newTags.push(temp)\n      })\n      newTags.find((tag) => tag.id === onChangeTagId).name = pending\n\n      let change = {\n        tags: newTags,\n      }\n\n      updateProject_Fs(projectId, change)\n      setPending(\"\")\n      setChangingTag(null)\n      setEditing(false)\n    }\n  }\n\n  try {\n    return (\n      <div\n        style={{\n          top: `${isfloating.position.y + 32}px`,\n          left: `${isfloating.position.x}px`,\n        }}\n        className={styles.addTag_container}\n        aria-label=\"addTag\"\n      >\n        {!isEditing ? (\n          <span aria-label=\"addTag\" className={styles.addTag_span}>\n            標籤\n          </span>\n        ) : (\n          <input\n            aria-label=\"addTag\"\n            type=\"text\"\n            value={pending}\n            onChange={(e) => {\n              setPending(e.target.value)\n            }}\n            placeholder=\"請輸入標籤標題...\"\n            className={styles.input}\n            autoFocus\n          />\n        )}\n\n        {tags.map((tag, index) => {\n          return (\n            <div key={nanoid()} className={styles.tag_container}>\n              <div\n                aria-label=\"addTag\"\n                data-tagid={tag.id}\n                className={\n                  ` ${styles.tag}` +\n                  `  ${card.tags.includes(tag.id) && styles.active}` +\n                  `  ${onChangeTagId === tag.id && styles.editing}`\n                }\n                style={{ backgroundColor: colorCode[tag.color] }}\n                onClick={toggleTag}\n              >\n                {tag.name}\n              </div>\n              <div\n                aria-label=\"addTag\"\n                data-tagid={tag.id}\n                className={\n                  onChangeTagId === tag.id ? styles.onEdit : styles.edit\n                }\n                onClick={() => {\n                  handleEditTag(tag.id, tag.name)\n                }}\n              ></div>\n            </div>\n          )\n        })}\n        <div\n          aria-label=\"addTag\"\n          className={styles.addTag_button}\n          onClick={() => {\n            saveEditTag()\n          }}\n        >\n          新增\n        </div>\n      </div>\n    )\n  } catch {\n    return null\n  }\n}\n\nexport const ChangeMainTag = ({ card, isfloating, setFloat }) => {\n  const { projectId, cardId } = useParams()\n\n  const handleChangeMainTag = (e) => {\n    let change = {\n      category: e.target.dataset.category,\n    }\n\n    updateCard_Fs(projectId, cardId, change)\n  }\n\n  return (\n    <div\n      style={{\n        top: `${isfloating.position.y + 32}px`,\n        left: `${isfloating.position.x}px`,\n      }}\n      className={styles.addTag_container}\n      aria-label=\"changeMainTag\"\n    >\n      <span aria-label=\"changeMainTag\" className={styles.addTag_span}>\n        主標籤\n      </span>\n\n      {categories.map((category) => {\n        return (\n          <div key={nanoid()} className={styles.tag_container}>\n            <div\n              aria-label=\"changeMainTag\"\n              data-category={category}\n              className={\n                ` ${styles.tag}` +\n                `  ${card.category === category && styles.active}`\n              }\n              style={{ backgroundColor: colorCode[category] }}\n              onClick={handleChangeMainTag}\n            >\n              {categoryTitle(category)}\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n",{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","severity":1,"message":"273","line":2,"column":10,"nodeType":"274","messageId":"275","endLine":2,"endColumn":17},{"ruleId":"272","severity":1,"message":"276","line":2,"column":19,"nodeType":"274","messageId":"275","endLine":2,"endColumn":28},{"ruleId":"268","replacedBy":"277"},{"ruleId":"270","replacedBy":"278"},{"ruleId":"272","severity":1,"message":"279","line":2,"column":27,"nodeType":"274","messageId":"275","endLine":2,"endColumn":36},{"ruleId":"272","severity":1,"message":"280","line":5,"column":20,"nodeType":"274","messageId":"275","endLine":5,"endColumn":26},{"ruleId":"272","severity":1,"message":"281","line":8,"column":3,"nodeType":"274","messageId":"275","endLine":8,"endColumn":7},{"ruleId":"272","severity":1,"message":"282","line":21,"column":10,"nodeType":"274","messageId":"275","endLine":21,"endColumn":19},{"ruleId":"272","severity":1,"message":"283","line":27,"column":11,"nodeType":"274","messageId":"275","endLine":27,"endColumn":22},{"ruleId":"272","severity":1,"message":"284","line":31,"column":9,"nodeType":"274","messageId":"275","endLine":31,"endColumn":18},{"ruleId":"272","severity":1,"message":"285","line":35,"column":10,"nodeType":"274","messageId":"275","endLine":35,"endColumn":22},{"ruleId":"272","severity":1,"message":"286","line":236,"column":9,"nodeType":"274","messageId":"275","endLine":236,"endColumn":24},{"ruleId":"272","severity":1,"message":"287","line":19,"column":9,"nodeType":"274","messageId":"275","endLine":19,"endColumn":22},{"ruleId":"272","severity":1,"message":"281","line":7,"column":3,"nodeType":"274","messageId":"275","endLine":7,"endColumn":7},{"ruleId":"272","severity":1,"message":"288","line":11,"column":3,"nodeType":"274","messageId":"275","endLine":11,"endColumn":8},{"ruleId":"272","severity":1,"message":"289","line":12,"column":3,"nodeType":"274","messageId":"275","endLine":12,"endColumn":9},{"ruleId":"268","replacedBy":"290"},{"ruleId":"270","replacedBy":"291"},{"ruleId":"272","severity":1,"message":"292","line":60,"column":11,"nodeType":"274","messageId":"275","endLine":60,"endColumn":20},{"ruleId":"272","severity":1,"message":"292","line":76,"column":11,"nodeType":"274","messageId":"275","endLine":76,"endColumn":20},{"ruleId":"272","severity":1,"message":"293","line":116,"column":11,"nodeType":"274","messageId":"275","endLine":116,"endColumn":17},{"ruleId":"272","severity":1,"message":"293","line":669,"column":11,"nodeType":"274","messageId":"275","endLine":669,"endColumn":17},{"ruleId":"268","replacedBy":"294"},{"ruleId":"270","replacedBy":"295"},{"ruleId":"272","severity":1,"message":"296","line":11,"column":23,"nodeType":"274","messageId":"275","endLine":11,"endColumn":34},{"ruleId":"272","severity":1,"message":"283","line":222,"column":7,"nodeType":"274","messageId":"275","endLine":222,"endColumn":18},{"ruleId":"272","severity":1,"message":"297","line":223,"column":7,"nodeType":"274","messageId":"275","endLine":223,"endColumn":15},{"ruleId":"272","severity":1,"message":"298","line":224,"column":9,"nodeType":"274","messageId":"275","endLine":224,"endColumn":18},{"ruleId":"272","severity":1,"message":"297","line":272,"column":7,"nodeType":"274","messageId":"275","endLine":272,"endColumn":15},{"ruleId":"272","severity":1,"message":"298","line":273,"column":9,"nodeType":"274","messageId":"275","endLine":273,"endColumn":18},{"ruleId":"299","severity":1,"message":"300","line":277,"column":9,"nodeType":"301","endLine":277,"endColumn":43},{"ruleId":"302","severity":1,"message":"303","line":334,"column":34,"nodeType":"304","messageId":"305","endLine":334,"endColumn":35},{"ruleId":"299","severity":1,"message":"306","line":413,"column":6,"nodeType":"307","endLine":413,"endColumn":17,"suggestions":"308"},{"ruleId":"272","severity":1,"message":"309","line":481,"column":7,"nodeType":"274","messageId":"275","endLine":481,"endColumn":17},{"ruleId":"268","replacedBy":"310"},{"ruleId":"270","replacedBy":"311"},{"ruleId":"272","severity":1,"message":"281","line":6,"column":3,"nodeType":"274","messageId":"275","endLine":6,"endColumn":7},{"ruleId":"272","severity":1,"message":"312","line":7,"column":3,"nodeType":"274","messageId":"275","endLine":7,"endColumn":16},{"ruleId":"272","severity":1,"message":"313","line":8,"column":3,"nodeType":"274","messageId":"275","endLine":8,"endColumn":12},{"ruleId":"272","severity":1,"message":"314","line":14,"column":8,"nodeType":"274","messageId":"275","endLine":14,"endColumn":12},{"ruleId":"272","severity":1,"message":"315","line":1,"column":17,"nodeType":"274","messageId":"275","endLine":1,"endColumn":25},{"ruleId":"272","severity":1,"message":"279","line":1,"column":27,"nodeType":"274","messageId":"275","endLine":1,"endColumn":36},{"ruleId":"272","severity":1,"message":"281","line":3,"column":10,"nodeType":"274","messageId":"275","endLine":3,"endColumn":14},{"ruleId":"272","severity":1,"message":"316","line":1,"column":38,"nodeType":"274","messageId":"275","endLine":1,"endColumn":44},{"ruleId":"272","severity":1,"message":"280","line":3,"column":20,"nodeType":"274","messageId":"275","endLine":3,"endColumn":26},{"ruleId":"272","severity":1,"message":"281","line":6,"column":3,"nodeType":"274","messageId":"275","endLine":6,"endColumn":7},{"ruleId":"272","severity":1,"message":"313","line":8,"column":3,"nodeType":"274","messageId":"275","endLine":8,"endColumn":12},{"ruleId":"272","severity":1,"message":"317","line":9,"column":3,"nodeType":"274","messageId":"275","endLine":9,"endColumn":14},{"ruleId":"299","severity":1,"message":"318","line":58,"column":6,"nodeType":"307","endLine":58,"endColumn":14,"suggestions":"319"},{"ruleId":"272","severity":1,"message":"320","line":161,"column":10,"nodeType":"274","messageId":"275","endLine":161,"endColumn":23},{"ruleId":"272","severity":1,"message":"321","line":161,"column":25,"nodeType":"274","messageId":"275","endLine":161,"endColumn":41},{"ruleId":"272","severity":1,"message":"273","line":2,"column":10,"nodeType":"274","messageId":"275","endLine":2,"endColumn":17},{"ruleId":"272","severity":1,"message":"276","line":2,"column":19,"nodeType":"274","messageId":"275","endLine":2,"endColumn":28},{"ruleId":"272","severity":1,"message":"315","line":1,"column":17,"nodeType":"274","messageId":"275","endLine":1,"endColumn":25},{"ruleId":"272","severity":1,"message":"280","line":3,"column":20,"nodeType":"274","messageId":"275","endLine":3,"endColumn":26},{"ruleId":"272","severity":1,"message":"281","line":6,"column":3,"nodeType":"274","messageId":"275","endLine":6,"endColumn":7},{"ruleId":"272","severity":1,"message":"322","line":12,"column":10,"nodeType":"274","messageId":"275","endLine":12,"endColumn":16},{"ruleId":"272","severity":1,"message":"323","line":14,"column":8,"nodeType":"274","messageId":"275","endLine":14,"endColumn":14},{"ruleId":"272","severity":1,"message":"324","line":16,"column":28,"nodeType":"274","messageId":"275","endLine":16,"endColumn":37},{"ruleId":"272","severity":1,"message":"325","line":17,"column":28,"nodeType":"274","messageId":"275","endLine":17,"endColumn":40},{"ruleId":"272","severity":1,"message":"326","line":21,"column":8,"nodeType":"274","messageId":"275","endLine":21,"endColumn":19},{"ruleId":"272","severity":1,"message":"327","line":22,"column":8,"nodeType":"274","messageId":"275","endLine":22,"endColumn":16},{"ruleId":"272","severity":1,"message":"328","line":25,"column":3,"nodeType":"274","messageId":"275","endLine":25,"endColumn":22},{"ruleId":"272","severity":1,"message":"329","line":26,"column":3,"nodeType":"274","messageId":"275","endLine":26,"endColumn":19},{"ruleId":"272","severity":1,"message":"330","line":31,"column":10,"nodeType":"274","messageId":"275","endLine":31,"endColumn":23},{"ruleId":"272","severity":1,"message":"331","line":41,"column":3,"nodeType":"274","messageId":"275","endLine":41,"endColumn":12},{"ruleId":"272","severity":1,"message":"283","line":59,"column":7,"nodeType":"274","messageId":"275","endLine":59,"endColumn":18},{"ruleId":"272","severity":1,"message":"332","line":60,"column":9,"nodeType":"274","messageId":"275","endLine":60,"endColumn":14},{"ruleId":"272","severity":1,"message":"333","line":63,"column":9,"nodeType":"274","messageId":"275","endLine":63,"endColumn":25},{"ruleId":"272","severity":1,"message":"334","line":67,"column":9,"nodeType":"274","messageId":"275","endLine":67,"endColumn":28},{"ruleId":"272","severity":1,"message":"335","line":71,"column":9,"nodeType":"274","messageId":"275","endLine":71,"endColumn":28},{"ruleId":"272","severity":1,"message":"336","line":79,"column":9,"nodeType":"274","messageId":"275","endLine":79,"endColumn":25},{"ruleId":"299","severity":1,"message":"337","line":155,"column":6,"nodeType":"307","endLine":155,"endColumn":8,"suggestions":"338"},{"ruleId":"299","severity":1,"message":"339","line":164,"column":6,"nodeType":"307","endLine":164,"endColumn":12,"suggestions":"340"},{"ruleId":"272","severity":1,"message":"315","line":1,"column":17,"nodeType":"274","messageId":"275","endLine":1,"endColumn":25},{"ruleId":"272","severity":1,"message":"279","line":1,"column":27,"nodeType":"274","messageId":"275","endLine":1,"endColumn":36},{"ruleId":"272","severity":1,"message":"279","line":1,"column":27,"nodeType":"274","messageId":"275","endLine":1,"endColumn":36},{"ruleId":"272","severity":1,"message":"341","line":9,"column":3,"nodeType":"274","messageId":"275","endLine":9,"endColumn":13},{"ruleId":"272","severity":1,"message":"342","line":19,"column":10,"nodeType":"274","messageId":"275","endLine":19,"endColumn":14},{"ruleId":"343","severity":1,"message":"344","line":50,"column":29,"nodeType":"345","messageId":"346","endLine":50,"endColumn":31},{"ruleId":"272","severity":1,"message":"347","line":73,"column":9,"nodeType":"274","messageId":"275","endLine":73,"endColumn":17},{"ruleId":"268","replacedBy":"348"},{"ruleId":"270","replacedBy":"349"},{"ruleId":"272","severity":1,"message":"315","line":1,"column":17,"nodeType":"274","messageId":"275","endLine":1,"endColumn":25},{"ruleId":"272","severity":1,"message":"279","line":1,"column":27,"nodeType":"274","messageId":"275","endLine":1,"endColumn":36},{"ruleId":"272","severity":1,"message":"281","line":3,"column":3,"nodeType":"274","messageId":"275","endLine":3,"endColumn":7},{"ruleId":"272","severity":1,"message":"312","line":4,"column":3,"nodeType":"274","messageId":"275","endLine":4,"endColumn":16},{"ruleId":"272","severity":1,"message":"313","line":5,"column":3,"nodeType":"274","messageId":"275","endLine":5,"endColumn":12},{"ruleId":"272","severity":1,"message":"317","line":6,"column":3,"nodeType":"274","messageId":"275","endLine":6,"endColumn":14},{"ruleId":"272","severity":1,"message":"288","line":7,"column":3,"nodeType":"274","messageId":"275","endLine":7,"endColumn":8},{"ruleId":"272","severity":1,"message":"289","line":8,"column":3,"nodeType":"274","messageId":"275","endLine":8,"endColumn":9},{"ruleId":"272","severity":1,"message":"350","line":10,"column":10,"nodeType":"274","messageId":"275","endLine":10,"endColumn":21},{"ruleId":"272","severity":1,"message":"351","line":15,"column":10,"nodeType":"274","messageId":"275","endLine":15,"endColumn":26},{"ruleId":"272","severity":1,"message":"347","line":27,"column":7,"nodeType":"274","messageId":"275","endLine":27,"endColumn":15},{"ruleId":"272","severity":1,"message":"313","line":7,"column":10,"nodeType":"274","messageId":"275","endLine":7,"endColumn":19},{"ruleId":"272","severity":1,"message":"352","line":11,"column":3,"nodeType":"274","messageId":"275","endLine":11,"endColumn":20},{"ruleId":"272","severity":1,"message":"353","line":12,"column":3,"nodeType":"274","messageId":"275","endLine":12,"endColumn":23},{"ruleId":"299","severity":1,"message":"354","line":96,"column":6,"nodeType":"307","endLine":96,"endColumn":8,"suggestions":"355"},{"ruleId":"299","severity":1,"message":"354","line":127,"column":6,"nodeType":"307","endLine":127,"endColumn":8,"suggestions":"356"},{"ruleId":"272","severity":1,"message":"281","line":4,"column":3,"nodeType":"274","messageId":"275","endLine":4,"endColumn":7},{"ruleId":"272","severity":1,"message":"317","line":7,"column":3,"nodeType":"274","messageId":"275","endLine":7,"endColumn":14},{"ruleId":"272","severity":1,"message":"357","line":35,"column":40,"nodeType":"274","messageId":"275","endLine":35,"endColumn":49},{"ruleId":"272","severity":1,"message":"347","line":43,"column":9,"nodeType":"274","messageId":"275","endLine":43,"endColumn":17},{"ruleId":"299","severity":1,"message":"358","line":118,"column":6,"nodeType":"307","endLine":118,"endColumn":8,"suggestions":"359"},{"ruleId":"299","severity":1,"message":"360","line":383,"column":6,"nodeType":"307","endLine":383,"endColumn":8,"suggestions":"361"},{"ruleId":"299","severity":1,"message":"362","line":877,"column":6,"nodeType":"307","endLine":877,"endColumn":8,"suggestions":"363"},{"ruleId":"272","severity":1,"message":"281","line":7,"column":3,"nodeType":"274","messageId":"275","endLine":7,"endColumn":7},{"ruleId":"272","severity":1,"message":"312","line":8,"column":3,"nodeType":"274","messageId":"275","endLine":8,"endColumn":16},{"ruleId":"272","severity":1,"message":"288","line":11,"column":3,"nodeType":"274","messageId":"275","endLine":11,"endColumn":8},{"ruleId":"272","severity":1,"message":"289","line":12,"column":3,"nodeType":"274","messageId":"275","endLine":12,"endColumn":9},{"ruleId":"299","severity":1,"message":"364","line":285,"column":6,"nodeType":"307","endLine":285,"endColumn":8,"suggestions":"365"},{"ruleId":"272","severity":1,"message":"366","line":300,"column":17,"nodeType":"274","messageId":"275","endLine":300,"endColumn":25},{"ruleId":"299","severity":1,"message":"339","line":319,"column":6,"nodeType":"307","endLine":319,"endColumn":8,"suggestions":"367"},{"ruleId":"272","severity":1,"message":"316","line":1,"column":27,"nodeType":"274","messageId":"275","endLine":1,"endColumn":33},{"ruleId":"272","severity":1,"message":"279","line":1,"column":35,"nodeType":"274","messageId":"275","endLine":1,"endColumn":44},{"ruleId":"272","severity":1,"message":"296","line":2,"column":10,"nodeType":"274","messageId":"275","endLine":2,"endColumn":21},{"ruleId":"272","severity":1,"message":"281","line":4,"column":3,"nodeType":"274","messageId":"275","endLine":4,"endColumn":7},{"ruleId":"272","severity":1,"message":"312","line":5,"column":3,"nodeType":"274","messageId":"275","endLine":5,"endColumn":16},{"ruleId":"272","severity":1,"message":"317","line":7,"column":3,"nodeType":"274","messageId":"275","endLine":7,"endColumn":14},{"ruleId":"272","severity":1,"message":"288","line":8,"column":3,"nodeType":"274","messageId":"275","endLine":8,"endColumn":8},{"ruleId":"272","severity":1,"message":"289","line":9,"column":3,"nodeType":"274","messageId":"275","endLine":9,"endColumn":9},{"ruleId":"272","severity":1,"message":"341","line":10,"column":3,"nodeType":"274","messageId":"275","endLine":10,"endColumn":13},{"ruleId":"272","severity":1,"message":"368","line":17,"column":3,"nodeType":"274","messageId":"275","endLine":17,"endColumn":19},{"ruleId":"272","severity":1,"message":"369","line":18,"column":3,"nodeType":"274","messageId":"275","endLine":18,"endColumn":16},{"ruleId":"272","severity":1,"message":"370","line":19,"column":3,"nodeType":"274","messageId":"275","endLine":19,"endColumn":16},{"ruleId":"272","severity":1,"message":"371","line":20,"column":3,"nodeType":"274","messageId":"275","endLine":20,"endColumn":19},{"ruleId":"272","severity":1,"message":"372","line":21,"column":3,"nodeType":"274","messageId":"275","endLine":21,"endColumn":19},{"ruleId":"272","severity":1,"message":"373","line":22,"column":3,"nodeType":"274","messageId":"275","endLine":22,"endColumn":13},{"ruleId":"272","severity":1,"message":"374","line":23,"column":3,"nodeType":"274","messageId":"275","endLine":23,"endColumn":16},{"ruleId":"272","severity":1,"message":"375","line":24,"column":3,"nodeType":"274","messageId":"275","endLine":24,"endColumn":16},{"ruleId":"272","severity":1,"message":"376","line":30,"column":8,"nodeType":"274","messageId":"275","endLine":30,"endColumn":18},"no-native-reassign",["377"],"no-negated-in-lhs",["378"],"no-unused-vars","'getData' is defined but never used.","Identifier","unusedVar","'getFsData' is defined but never used.",["377"],["378"],"'useEffect' is defined but never used.","'Router' is defined but never used.","'Link' is defined but never used.","'OnDragEnd' is defined but never used.","'itineraryId' is assigned a value but never used.","'itinerary' is assigned a value but never used.","'filterMethod' is assigned a value but never used.","'convertedChange' is assigned a value but never used.","'handleAddCard' is assigned a value but never used.","'Route' is defined but never used.","'Switch' is defined but never used.",["377"],["378"],"'errorCode' is assigned a value but never used.","'source' is assigned a value but never used.",["377"],["378"],"'useDispatch' is defined but never used.","'location' is assigned a value but never used.","'projectId' is assigned a value but never used.","react-hooks/exhaustive-deps","The 'tags' conditional could make the dependencies of useEffect Hook (at line 311) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'tags' in its own useMemo() Hook.","VariableDeclarator","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'handleDateChange'. Either include it or remove the dependency array.","ArrayExpression",["379"],"'ModeSelect' is assigned a value but never used.",["377"],["378"],"'useRouteMatch' is defined but never used.","'useParams' is defined but never used.","'User' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'useLocation' is defined but never used.","React Hook useEffect has missing dependencies: 'handleAddProject', 'handleModifyProject', and 'handleRemoveProject'. Either include them or remove the dependency array.",["380"],"'pendingMember' is assigned a value but never used.","'setPendingMember' is assigned a value but never used.","'nanoid' is defined but never used.","'styles' is defined but never used.","'CardsIcon' is defined but never used.","'CalendarIcon' is defined but never used.","'Expenditure' is defined but never used.","'TodoList' is defined but never used.","'getFsData_Itinerary' is defined but never used.","'listenToDayplans' is defined but never used.","'initItinerary' is defined but never used.","'initCards' is defined but never used.","'cards' is assigned a value but never used.","'handleAddDayplan' is assigned a value but never used.","'handleModifyDayplan' is assigned a value but never used.","'handleRemoveDayplan' is assigned a value but never used.","'handleModifyCard' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkModifyCard', 'dispatch', 'handleAddCard', 'handleAddMember', 'handleModifyMember', 'handleRemoveCard', 'handleRemoveMember', and 'projectId'. Either include them or remove the dependency array.",["381"],"React Hook useEffect has missing dependencies: 'history' and 'projectId'. Either include them or remove the dependency array.",["382"],"'useHistory' is defined but never used.","'wait' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'dispatch' is assigned a value but never used.",["377"],["378"],"'useSelector' is defined but never used.","'editProjectTitle' is defined but never used.","'getLinksNumber_Fs' is defined but never used.","'getCommentsNumber_Fs' is defined but never used.","React Hook useEffect has a missing dependency: 'cardId'. Either include it or remove the dependency array.",["383"],["384"],"'colorCode' is defined but never used.","React Hook useEffect has missing dependencies: 'cardId' and 'handleAddLink'. Either include them or remove the dependency array.",["385"],"React Hook useEffect has missing dependencies: 'card.end_time' and 'card.start_time'. Either include them or remove the dependency array. If 'setStartDate' needs the current value of 'card.start_time', you can also switch to useReducer instead of useState and read 'card.start_time' in the reducer.",["386"],"React Hook useEffect has missing dependencies: 'cardId' and 'handleAdd'. Either include them or remove the dependency array.",["387"],"React Hook useEffect has missing dependencies: 'handleNoUser' and 'handleUser'. Either include them or remove the dependency array.",["388"],"'setPopUp' is assigned a value but never used.",["389"],"'listenToComments' is defined but never used.","'listenToLinks' is defined but never used.","'addComment_Fs' is defined but never used.","'updateComment_Fs' is defined but never used.","'removeComment_Fs' is defined but never used.","'addLink_Fs' is defined but never used.","'updateLink_Fs' is defined but never used.","'removeLink_Fs' is defined but never used.","'DatePicker' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"390","fix":"391"},{"desc":"392","fix":"393"},{"desc":"394","fix":"395"},{"desc":"396","fix":"397"},{"desc":"398","fix":"399"},{"desc":"398","fix":"400"},{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},"Update the dependencies array to be: [handleDateChange, startDate]",{"range":"411","text":"412"},"Update the dependencies array to be: [handleAddProject, handleModifyProject, handleRemoveProject, userId]",{"range":"413","text":"414"},"Update the dependencies array to be: [checkModifyCard, dispatch, handleAddCard, handleAddMember, handleModifyMember, handleRemoveCard, handleRemoveMember, projectId]",{"range":"415","text":"416"},"Update the dependencies array to be: [history, projectId, user]",{"range":"417","text":"418"},"Update the dependencies array to be: [cardId]",{"range":"419","text":"420"},{"range":"421","text":"420"},"Update the dependencies array to be: [cardId, handleAddLink]",{"range":"422","text":"423"},"Update the dependencies array to be: [card.end_time, card.start_time]",{"range":"424","text":"425"},"Update the dependencies array to be: [cardId, handleAdd]",{"range":"426","text":"427"},"Update the dependencies array to be: [handleNoUser, handleUser]",{"range":"428","text":"429"},"Update the dependencies array to be: [history, projectId]",{"range":"430","text":"431"},[10450,10461],"[handleDateChange, startDate]",[1358,1366],"[handleAddProject, handleModifyProject, handleRemoveProject, userId]",[3661,3663],"[checkModifyCard, dispatch, handleAddCard, handleAddMember, handleModifyMember, handleRemoveCard, handleRemoveMember, projectId]",[3907,3913],"[history, projectId, user]",[2686,2688],"[cardId]",[3315,3317],[2634,2636],"[cardId, handleAddLink]",[9634,9636],"[card.end_time, card.start_time]",[21753,21755],"[cardId, handleAdd]",[6500,6502],"[handleNoUser, handleUser]",[7203,7205],"[history, projectId]"]